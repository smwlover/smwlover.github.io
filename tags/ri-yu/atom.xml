<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签：日语 | 美柑の部屋]]></title>
  <link href="http://smwlover.github.io/tags/ri-yu/atom.xml" rel="self"/>
  <link href="http://smwlover.github.io/"/>
  <updated>2016-06-04T10:52:32+08:00</updated>
  <id>http://smwlover.github.io/</id>
  <author>
    <name><![CDATA[smwlover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[更多Octopress插件来袭]]></title>
    <link href="http://smwlover.github.io/blog/2016/05/16/more-plugins/"/>
    <updated>2016-05-16T19:18:17+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/05/16/more-plugins</id>
    <content type="html"><![CDATA[<p>有需求才会有动力，在上两篇博客中，因为我想介绍关于日麻的内容，所以我开发了两款用于显示日麻图片的插件<code>mahjong</code>和<code>majonglist</code>。然而今天，我在逛<a href="https://zh.moegirl.org/Mainpage">萌娘百科</a>时发现里面有一些很cool的东西，这么cool的东西能够搬到自己的博客中来不是极好的吗？所以，我又开发了三个简易的Octopress插件。</p>

<!--more-->


<h2>第一个插件：删除线</h2>

<p><del>其实这个东西根本没必要写成插件的</del>   ←就是这样的效果。<br/>
之前说到过，所谓Octopress的插件，其实就是把我们在markdown文件中写的内容转化为html的工具，要写关于删除线的插件，就要先弄明白删除线在html里是怎么表示的。我随便找了一个有删除线的萌娘百科网页，通过F12键查看源代码……<br/>
<img src="/images/blogimg/1.png"><br/>
可以发现，删除线什么的，就是用<code>&lt;del&gt;</code>和<code>&lt;/del&gt;</code>标签括起来嘛！所以写markdown的时候直接手动加上这样的两个标签就可以了，也不麻烦，<del>根本用不着什么插件嘛</del>。<br/>
不过，写就写了，语法是<code>{% delete sentence %}</code>。看看代码吧，反正就几行：</p>

<p><figure class='code'><figcaption><span>delete.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class DeleteTag &amp;lt; Liquid::Tag</span>
</span><span class='line'><span class="sr">    def initialize(tag_name, markup, tokens)</span>
</span><span class='line'><span class="sr">        @content = &amp;ldquo;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="sr">&amp;rdquo;.strip</span>
</span><span class='line'><span class="sr">        super</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;&amp;lt;del&amp;gt;</span><span class="si">#{</span><span class="vi">@content</span><span class="si">}</span><span class="s2">&amp;lt;/del&amp;gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;delete&amp;rsquo;, Jekyll::DeleteTag)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>第二个插件：36K钛合金防剧透屏障</h2>

<p><span class="mask">这是什么中二爆表的名字</span> ←就是这样的效果。<br/>
同理，我们要查看一下相应的html是怎么写的，我找到的网页如下：<br/>
<img src="/images/blogimg/2.png"><br/>
我们可以发现，这是一种特殊类别的<code>&lt;span&gt;</code>，在css分类器中为这种<code>&lt;span&gt;</code>定义了特殊的样式表，使得文字颜色和背景色相同，就可以达到“防剧透屏障”的效果。我们也照葫芦画瓢，开发一个语法为<code>{% mask sentence %}</code>的插件：</p>

<p><figure class='code'><figcaption><span>mask.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class MaskTag &amp;lt; Liquid::Tag</span>
</span><span class='line'><span class="sr">    def initialize(tag_name, markup, tokens)</span>
</span><span class='line'><span class="sr">        @content = &amp;ldquo;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="sr">&amp;rdquo;.strip</span>
</span><span class='line'><span class="sr">        super</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;&amp;lt;span class=</span><span class="se">\&quot;</span><span class="s2">mask</span><span class="se">\&quot;</span><span class="s2">&amp;gt;</span><span class="si">#{</span><span class="vi">@content</span><span class="si">}</span><span class="s2">&amp;lt;/span&amp;gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;mask&amp;rsquo;, Jekyll::MaskTag)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>我们定义了一种类别叫<code>mask</code>，然后我们需要到<code>sass/custom/_styles.scss</code>中定义<code>mask</code>对应的样式：</p>

<p><figure class='code'><figcaption><span>_styles.scss </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">//Mask Plugin:</span>
</span><span class='line'><span class="nc">.mask</span><span class="p">{</span>
</span><span class='line'>        <span class="na">background-color</span><span class="o">:</span> <span class="mh">#252525</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">color</span><span class="o">:</span> <span class="mh">#252525</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">text-shadow</span><span class="o">:</span> <span class="no">none</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>第三个插件：写作xx读作xx</h2>

<p>不知道大家看过《<ruby><rb>Clannad</rb><rp>(</rp><rt class="rubytagrt">人生</rt><rp>)</rp></ruby>》没有？ ←就是这样的效果。当然，这种效果还可以用来对日语进行注音，比如“<ruby><rb>学</rb><rp>(</rp><rt class="rubytagrt">がっ</rt><rp>)</rp></ruby><ruby><rb>校</rb><rp>(</rp><rt class="rubytagrt">こう</rt><rp>)</rp></ruby>”。<br/>
日语中，经常见到用假名在汉字上方标明读音的情况，这种情况叫振假名（<ruby><rb>振</rb><rp>(</rp><rt class="rubytagrt">ふ</rt><rp>)</rp></ruby>り<ruby><rb>仮</rb><rp>(</rp><rt class="rubytagrt">が</rt><rp>)</rp></ruby><ruby><rb>名</rb><rp>(</rp><rt class="rubytagrt">な</rt><rp>)</rp></ruby>）。又因为日文印刷时以五号格大小的振假名为标准，并且五号格大小的文字在印刷行业被简称为ruby，所以振假名也有“<ruby><rb>ルビー</rb><rp>(</rp><rt class="rubytagrt">ruby</rt><rp>)</rp></ruby>”的别称。所以，我把这个插件的名字叫做<code>rubytag</code>。<br/>
同样，我找到了萌娘百科的一个网页，观察振假名的具体实现方式：<br/>
<img src="/images/blogimg/3.png"><br/>
可以发现，这种效果正是利用html一个叫做<code>&lt;ruby&gt;</code>的标签实现的。其中，<code>&lt;rb&gt;&lt;/rb&gt;</code>中的内容是下面的文字，<code>&lt;rt&gt;&lt;/rt&gt;</code>中的内容是上面的标注。通过调查发现，一般情况下，<code>&lt;rp&gt;&lt;/rp&gt;</code>中的内容是不显示的，但是在不支持<code>&lt;ruby&gt;</code>标签的浏览器中，<code>&lt;rp&gt;(&lt;/rp&gt;</code>和<code>&lt;rp&gt;)&lt;/rp&gt;</code>中的内容就会显示出来，使得标注不是显示在文字上方，而是显示在由<code>&lt;rp&gt;</code>组成的一对括号中，效果类似于“学(がっ)校(こう)”。<br/>
总体来讲，这个插件的逻辑比上面两个插件要复杂一些，但是比起前面的<code>mahjonglist</code>来还是较为简单的。我定义了本插件的语法为<code>{% rubytag word1[-tag1]/word2[-tag2]/... %}</code>，其中不同的单词之间用<code>/</code>分割，每个单词及其注音则用<code>-</code>分割。本插件允许不带注音的单词，这种情况下该单词就会被当成一个普通文本来显示。<br/>
实现本插件的代码如下，总体来讲就是一个<code>string.split</code>函数的调用过程：</p>

<p><figure class='code'><figcaption><span>rubytag.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class RubyTag &amp;lt; Liquid::Tag&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">markup</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="vi">@result</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>    <span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">count</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">arr</span><span class="o">.</span><span class="n">size</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">word</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">count</span><span class="o">]</span>
</span><span class='line'>        <span class="n">word</span><span class="o">.</span><span class="n">strip!</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">word</span><span class="o">.</span><span class="n">size</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">parts</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">parts</span><span class="o">.</span><span class="n">size</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span>
</span><span class='line'>                <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;每组对应关系中内容太多&quot;</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">elsif</span> <span class="n">parts</span><span class="o">.</span><span class="n">size</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span>
</span><span class='line'>                <span class="n">html</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>                <span class="vi">@result</span> <span class="o">=</span> <span class="vi">@result</span> <span class="o">+</span> <span class="n">html</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">rb</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>                <span class="n">rt</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>                <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;ruby&amp;gt;&amp;lt;rb&amp;gt;</span><span class="si">#{</span><span class="n">rb</span><span class="si">}</span><span class="s2">&amp;lt;/rb&amp;gt;&amp;lt;rp&amp;gt;(&amp;lt;/rp&amp;gt;&amp;lt;rt class=</span><span class="se">\&quot;</span><span class="s2">rubytagrt</span><span class="se">\&quot;</span><span class="s2">&amp;gt;</span><span class="si">#{</span><span class="n">rt</span><span class="si">}</span><span class="s2">&amp;lt;/rt&amp;gt;&amp;lt;rp&amp;gt;)&amp;lt;/rp&amp;gt;&amp;lt;/ruby&amp;gt;&quot;</span>
</span><span class='line'>                <span class="vi">@result</span> <span class="o">=</span> <span class="vi">@result</span> <span class="o">+</span> <span class="n">html</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@successful</span>
</span><span class='line'>        <span class="vi">@result</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;&amp;lt;strong&amp;gt;错误：</span><span class="si">#{</span><span class="vi">@information</span><span class="si">}</span><span class="s2">&amp;lt;/strong&amp;gt;&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;rubytag&amp;rsquo;, Jekyll::RubyTag)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>由于默认的日文标注字体太丑陋，我新定义了一种标注类别<code>rubytagrt</code>，将其字体改为较美观的微软雅黑。当然这一步仍然需要修改<code>_styles.scss</code>：</p>

<p><figure class='code'><figcaption><span>_styles.scss </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">//Rubytag Plugin:</span>
</span><span class='line'><span class="nc">.rubytagrt</span><span class="p">{</span>
</span><span class='line'>        <span class="na">font-family</span><span class="o">:</span> <span class="n">microsoft</span> <span class="n">yahei</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>到此为止，这个插件的开发就告一段落，那么我们可以输入各种各样的用例，测试插件的显示效果了：<br/>
1. 正常情况：<code>{% rubytag 明日-あした %}</code>会显示成<ruby><rb>明日</rb><rp>(</rp><rt class="rubytagrt">あした</rt><rp>)</rp></ruby>；<br/>
2. 包含多个单词的情况：<code>{% rubytag 明-みょう/日-にち %}</code>会显示成<ruby><rb>明</rb><rp>(</rp><rt class="rubytagrt">みょう</rt><rp>)</rp></ruby><ruby><rb>日</rb><rp>(</rp><rt class="rubytagrt">にち</rt><rp>)</rp></ruby>；<br/>
3. 包含多个单词，但是有些单词没有标注的情况：<code>{% rubytag 振-ふ/り/仮-が/名-な %}</code>会显示成<ruby><rb>振</rb><rp>(</rp><rt class="rubytagrt">ふ</rt><rp>)</rp></ruby>り<ruby><rb>仮</rb><rp>(</rp><rt class="rubytagrt">が</rt><rp>)</rp></ruby><ruby><rb>名</rb><rp>(</rp><rt class="rubytagrt">な</rt><rp>)</rp></ruby>；<br/>
4. 错误情况：<code>{% rubytag 明-みょう-日-にち %}</code>会显示成<strong>错误：每组对应关系中内容太多</strong>。</p>

<h3>Octopress插件的嵌套浅析</h3>

<p>在插件测试中，我发现了一个神奇的事情：本插件可以嵌套在一些<code>Block</code>类型的Octopress插件中使用。比如下面的例子，我就将本插件嵌套进了<code>blockquote</code>插件中：</p>

<p><blockquote><p><ruby><rb>迷</rb><rp>(</rp><rt class="rubytagrt">まよ</rt><rp>)</rp></ruby>いはないよ、<ruby><rb>固</rb><rp>(</rp><rt class="rubytagrt">かた</rt><rp>)</rp></ruby>く<ruby><rb>決</rb><rp>(</rp><rt class="rubytagrt">き</rt><rp>)</rp></ruby>めたから。<ruby><rb>涙</rb><rp>(</rp><rt class="rubytagrt">なみだ</rt><rp>)</rp></ruby>は<ruby><rb>見</rb><rp>(</rp><rt class="rubytagrt">み</rt><rp>)</rp></ruby>せないと<ruby><rb>誓</rb><rp>(</rp><rt class="rubytagrt">ちか</rt><rp>)</rp></ruby>った。<br/>我不会迷惘，因为早已下定决心，发誓不再让他人看到我的泪水。</p><footer><strong>阿万音铃羽</strong> <cite>虹色の光りの中で</cite></footer></blockquote></p>

<p>对应的markdown文件如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% blockquote 阿万音铃羽, 虹色の光りの中で %}
</span><span class='line'>{% rubytag 迷-まよ/いはないよ、/固-かた/く/決-き/めたから。/涙-なみだ/は/見-み/せないと/誓-ちか/った。 %}
</span><span class='line'>我不会迷惘，因为早已下定决心，发誓不再让他人看到我的泪水。
</span><span class='line'>{% endblockquote %}</span></code></pre></td></tr></table></div></figure></p>

<p>关于产生这种现象的原因，我研究了一下<code>blockquote.rb</code>，可以发现，在该代码的47行处有这样的一段话：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="n">quote</span> <span class="o">=</span> <span class="n">paragraphize</span><span class="p">(</span><span class="k">super</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#以下省略</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>那么这个<code>super</code>究竟代表什么呢？通过查阅资料发现，Ruby中<code>super</code>指<strong>调用父类的同名函数，并将本函数的所有参数传入父类的同名函数</strong>。上面的代码中调用的就是其父类的<code>render(context)</code>函数。我们可以在这一行代码的前面加入<code>print super</code>，然后运行<code>rake generate</code>，看看其父类的<code>render(context)</code>函数究竟会返回什么。我们发现，输出的结果正是将嵌套在其内部的标识符<code>rubytag</code>解析完成之后的结果：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ruby>&lt;rb>迷&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">まよ&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>いはないよ、&lt;ruby>&lt;rb>固&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">かた&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>く&lt;ruby>&lt;rb>決&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">き&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>めたから。&lt;ruby>&lt;rb>涙&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">なみだ&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>は&lt;ruby>&lt;rb>見&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">み&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>せないと&lt;ruby>&lt;rb>誓&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">ちか&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>った。
</span><span class='line'>我不会迷惘，因为早已下定决心，发誓不再让他人看到我的泪水。</span></code></pre></td></tr></table></div></figure></p>

<p>通过这个结果，我们可以得出一个猜想：在<code>Block</code>类型标识符的解析过程中，Octopress会先解析被该标识符包裹的内容，如果这些内容中有子标识符存在，那么先解析它们并且将它们转化为html代码，然后才是对该<code>Block</code>类型标识符本身的解析。<br/>
对于<code>blockquote.rb</code>来讲，它在<code>render(context)</code>函数中通过<code>super</code>获得对其包裹的内容的解析结果，然后再通过<code>paragraphize(super)</code>对这个结果进行进一步的处理，该函数的代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">paragraphize</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="c1">#{input.lstrip.rstrip.gsub(/\n\n/, &amp;lsquo;&lt;/p&gt;&lt;p&gt;&amp;rsquo;).gsub(/\n/, &amp;lsquo;&lt;br/&gt;&amp;rsquo;)}&lt;/p&gt;&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>通过观察这段代码，我们发现，该函数对其包裹的内容的处理至少涉及三个方面：<br/>
1. 在其包裹的内容前后添加<code>&lt;p&gt;</code>和<code>&lt;/p&gt;</code>标签；<br/>
2. 将其包裹的内容中的<code>\n\n</code>替换为<code>&lt;/p&gt;&lt;p&gt;</code>标签；<br/>
3. 将其包裹的内容中的<code>\n</code>替换为<code>&lt;br/&gt;</code>标签。<br/>
说到这里，我忽然想到，在写markdown文件的时候，我们其实经常用到一个插件去嵌套其他插件，那就是<code>{% raw %}</code>。那么<code>{% raw %}</code>是如何避免解析被其包裹的内容的呢？笔者观察了<code>raw.rb</code>，但还是没有研究出答案。</p>

<h2>总结与展望：</h2>

<p>还是那句话，有需求才会有动力。获取某天，我又偶然间发现了什么想搬到自己博客中来的东西，于是又开发了一个新的Octopress插件呢。这也是有可能的，不是么？</p>
]]></content>
  </entry>
  
</feed>
