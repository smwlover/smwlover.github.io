<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签：c++ | 美柑の部屋]]></title>
  <link href="http://smwlover.github.io/tags/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://smwlover.github.io/"/>
  <updated>2016-08-21T19:45:44+08:00</updated>
  <id>http://smwlover.github.io/</id>
  <author>
    <name><![CDATA[smwlover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[巩固基础：二叉树的遍历]]></title>
    <link href="http://smwlover.github.io/blog/2016/08/21/binary-tree-traversal/"/>
    <updated>2016-08-21T17:38:39+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/08/21/binary-tree-traversal</id>
    <content type="html"><![CDATA[<p>我们在数据结构的学习中，都接触过二叉树。二叉树常用的遍历方法包括：前序遍历、中序遍历、后序遍历以及层次遍历。其中前三种遍历方法均可以通过递归或者迭代实现。递归实现难度较小，而且写出来的代码简洁明了；迭代实现起来则具有一定难度。在这篇文章中，我就来总结一下利用迭代遍历二叉树的方法。</p>

<!--more-->


<h2>一、前序遍历</h2>

<p>二叉树的前序、中序和后序遍历都是通过栈来实现的，而前序遍历则是其中最简单的。所谓前序遍历，指的是对于每个结点，先访问该结点本身，然后访问左子树，最后访问右子树。为了进行前序遍历，我们初始化一个空栈存储二叉树的结点。首先令根结点入栈。每当栈不为空，弹出栈顶的结点并访问该结点，然后依次将其右儿子、左儿子入栈（如果不为<code>NULL</code>）。注意入栈的顺序是先右儿子，再左儿子。</p>

<p><figure class='code'><figcaption><span>Preorder Traversal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">preorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TreeNode</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">nodeStack</span><span class="p">;</span>
</span><span class='line'><span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">nodeStack</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">nodeStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="n">nodeStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>二、中序遍历</h2>

<p>所谓中序遍历，指的是对于每个结点，先访问左子树，然后访问该结点本身，最后访问右子树。为了进行中序遍历，我们需要维持两个栈，一个栈存储二叉树的结点，另一个栈则是标记栈，存储结点栈中相应结点的标记，标记的取值可能为0或1。<br/>
首先，我们令根结点入栈（标记为0）。每当栈不为空，我们弹出栈顶结点及其标记：如果该结点的标记为0，则令该结点再次入栈（标记为1），并且如果该结点有左儿子，将其左儿子入栈（标记为0）；如果该结点的标记为1，则访问该结点，并且如果该结点有右儿子，将其右儿子入栈（标记为0）。</p>

<p><figure class='code'><figcaption><span>Inorder Traversal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">inorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TreeNode</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">nodeStack</span><span class="p">;</span>
</span><span class='line'><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">markStack</span><span class="p">;</span>
</span><span class='line'><span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">nodeStack</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">nodeStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mark</span> <span class="o">=</span> <span class="n">markStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="n">nodeStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">markStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">mark</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>        <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Left child:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">){</span>
</span><span class='line'>            <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>            <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Right child:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">){</span>
</span><span class='line'>            <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>            <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>三、后序遍历</h2>

<p>所谓后序遍历，指的是对于每个结点，先访问左子树，然后访问右子树，最后访问该结点本身。后序遍历的实现思路和中序遍历类似，仍然是维持一个结点栈和一个标记栈，不同之处在于标记的取值可能为0、1或2。<br/>
首先，我们令根结点入栈（标记为0）。每当栈不为空，我们弹出栈顶结点及其标记：如果该结点的标记为0，则令该结点再次入栈（标记为1），并且如果该结点有左儿子，将其左儿子入栈（标记为0）；如果该结点的标记为1，则令该结点再次入栈（标记为2），并且如果该结点有右儿子，将其右儿子入栈（标记为0）；如果该结点的标记为2，则访问该结点。</p>

<p><figure class='code'><figcaption><span>Postorder Traversal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">postorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TreeNode</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">nodeStack</span><span class="p">;</span>
</span><span class='line'><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">markStack</span><span class="p">;</span>
</span><span class='line'><span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">nodeStack</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">nodeStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mark</span> <span class="o">=</span> <span class="n">markStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="n">nodeStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">markStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">mark</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>        <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Left child:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">){</span>
</span><span class='line'>            <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>            <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">mark</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>        <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Right child:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">){</span>
</span><span class='line'>            <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>            <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span>
</span><span class='line'>        <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>另外需要注意的是，通过一棵二叉树的前序与中序，或者中序与后序遍历序列是可以重建这棵二叉树的。比如一棵二叉树的前序与中序遍历序列如下：<br/>
前序遍历序列：<code>a,b,e,c,f,g</code>；<br/>
中序遍历序列：<code>b,e,a,f,c,g</code>。<br/>
我们知道，前序遍历序列的结点顺序为根结点、左子树、右子树；中序遍历为左子树、根结点、右子树；后序遍历则为左子树、右子树、根结点。通过这个结论，我们可以知道结点<code>a</code>为二叉树的根结点，所以在中序遍历序列中，位于<code>a</code>前面的序列<code>b,e</code>就是左子树的中序遍历序列，位于<code>a</code>后面的序列<code>f,c,g</code>则是右子树的中序遍历序列。另外我们可以确定，左右子树的大小分别为2和3，所以在前序遍历序列中，<code>a</code>后面的2个结点<code>b,e</code>就是左子树的前序遍历序列，再后面的3个结点<code>c,f,g</code>就是右子树的前序遍历序列。<br/>
然后我们对左右子树分别进行递归调用，即可重建这棵二叉树。</p>

<h2>四、层次遍历</h2>

<p>如果说前序遍历类似于图的深度优先搜索，那么层次遍历则类似于广度优先搜索。层次遍历指的是按照结点所在层，从根结点开始逐一访问。不同于之前几种遍历方法利用栈来实现，层次遍历是利用队列来实现的。首先我们初始化一个空队列并令根结点进队。每当队列不为空，使队列最前端的结点出队并且访问该结点，然后将该结点的左右儿子依次进队。</p>

<p><strong>扩展：</strong>输入一棵二叉树，将其层次遍历序列输出到<code>vector</code>中，不同层的结点需要输出到不同的<code>vector</code>中。比如对于如下图所示的二叉树，层次遍历的结果应该是<code>[[1],[2,4],[8,3]]</code>。</p>

<p><div align="center"><img src="/images/blogimg/15.png"></div></p>

<p><strong>答案：</strong>上面的题目要求我们在层次遍历的基础上，将不同层的结点加以区分。我们可以<strong>利用两个队列交替放置不同层的结点</strong>，也就是说当队列<code>A</code>中的一个结点出队时，我们将其左右儿子加入到队列<code>B</code>中，反之亦然。这样，与当前结点同一层的结点就会出现在同一个队列中，而当前结点的上层或下层结点就会在另一个队列中出现，达到了区分不同层结点的目的。</p>

<p><figure class='code'><figcaption><span>Level Order Traversal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">levelOrder</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TreeNode</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">q</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">dep</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>        <span class="n">TreeNode</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">front</span><span class="p">();</span>
</span><span class='line'>        <span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="n">tmp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>            <span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="o">^</span><span class="mi">1</span><span class="p">].</span><span class="n">push</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>            <span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="o">^</span><span class="mi">1</span><span class="p">].</span><span class="n">push</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dep</span> <span class="o">^=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++中sizeof运算符的简要总结]]></title>
    <link href="http://smwlover.github.io/blog/2016/08/13/sizeof-operator/"/>
    <updated>2016-08-13T15:16:14+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/08/13/sizeof-operator</id>
    <content type="html"><![CDATA[<p><code>sizeof</code>是C++中的一个运算符（不是一个函数），它的作用被表述为：<em>The</em> <code>sizeof</code> <em>keyword gives the amount of storage, <strong>in bytes</strong>, associated with <strong>a variable or a type (including aggregate types)</strong>. This keyword returns a value of type</em> <code>size_t</code><em>.</em> 简而言之，就是返回一个变量或类型在内存中所占的字节数。但正是这么一个看似简单的运算符，却成为了面试中的热门考点。这说明关于这个运算符其实有很多需要注意的地方。在这篇文章中，我就对这个运算符进行一个简要的总结。</p>

<!--more-->


<h2>一、指针，数组与<code>sizeof</code></h2>

<p>面试的时候，面试官经常将<code>sizeof</code>运算符与<code>char*</code>类型字符串或者<code>char[]</code>类型字符串综合起来考察。比如下面的例子：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">getSize</span><span class="p">(</span><span class="kt">char</span> <span class="n">var</span><span class="p">[]){</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">str1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mo">01234567</span><span class="mi">89</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span> <span class="n">str2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;0123456789&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">str3</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;0123456789&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">str3</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">getSize</span><span class="p">(</span><span class="n">str3</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在<code>main</code>函数中，我们依次定义了三个内容相似的字符串。首先对于<code>str1</code>，它是一个指针，指针大小在32位机器中恒定为4，所以输出为4；<code>str2</code>是字符数组，没有预定义大小，所以其大小由存储的字符串长度决定，字符串的长度为10，加上末尾的字符串结束符<code>\0</code>，共11个字符，所以输出11；<code>str3</code>是预定义大小的字符数组，不管内部存储的字符串长度是多少，其大小都是预定义的大小100，所以输出100。而对于函数<code>getSize</code>，我们需要了解的是，<strong>在C++中，任何数组作为函数参数传递进去后都会退化成指针，</strong>所以输出为4。<br/>
综上所述  ，输出依次为4、11、100和4。</p>

<h2>二、<code>struct</code>和<code>class</code>在内存中的数据对齐</h2>

<p>数据对齐这件事，我们平时好像不太关注，但是一提到<code>sizeof</code>操作符，就会不可避免地涉及到内存对齐的机制。之所以要进行内存对齐，是出于如下考虑：<strong>对于<code>n</code>字节的元素，它的首地址能被<code>n</code>整除时，才能在程序执行时获得最好的性能。</strong>对于类或者结构体，为了保证这一点，就需要使其内部的成员变量按照<strong>最长的成员变量的长度</strong>去对齐。举个例子：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">A</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">B</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在上面的代码中，我们定义了两个结构体<code>A</code>和<code>B</code>，它们的成员变量内容相同，但是顺序不同。通过观察发现，<code>A</code>和<code>B</code>中最长的数据元素类型均为<code>int</code>，占4字节，所以两个结构体的成员变量均要以4字节为单位进行对齐。简而言之，就是成员变量按照顺序放入长度为4字节的位置中，如果能放得下，就继续往里放；如果放不下，就需要开辟一个新的位置。所以，<code>A</code>和<code>B</code>数据对齐的情况如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A的数据对齐情况，按照声明的顺序，应该依次放置a,b,c：
</span><span class='line'>|-a-|&mdash;|-b-|-b-|
</span><span class='line'>|-c-|-c-|-c-|-c-|
</span><span class='line'>所以sizeof(A)应该等于8。&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>B的数据对齐情况，按照声明的顺序，应该依次放置a,c,b：
</span><span class='line'>|-a-|&mdash;|&mdash;|&mdash;|
</span><span class='line'>|-c-|-c-|-c-|-c-|
</span><span class='line'>|-b-|-b-|&mdash;|&mdash;|
</span><span class='line'>所以sizeof(B)应该等于12。</span></code></pre></td></tr></table></div></figure></p>

<p>而对于联合体<code>union</code>，相比于<code>struct</code>在内存上的顺序式组织，<code>union</code>是重叠式组织的，所以对一个<code>union</code>使用<code>sizeof</code>返回的是其最长成员的长度。</p>

<h2>三、类和<code>sizeof</code>运算符</h2>

<h3>3.1 关于空类的继承：</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">B</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">func</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">C</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span><span class="p">,</span> <span class="k">public</span> <span class="n">B</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>对一个空类使用<code>sizeof</code>结果为1，因为即使是空类，也需要在内存中占用一定位置，否则就不可寻址了，这是编译器做的一步特殊处理。所以<code>sizeof(A)</code>的结果为1。对于一个只有普通函数，没有成员变量的类使用<code>sizeof</code>，结果仍为1，因为类的普通函数不会占用类的每个实例的空间。所以<code>sizeof(B)</code>的结果为1。对一个多重继承的空类使用<code>sizeof</code>，输出仍然为1。所以<code>sizeof(C)</code>的结果为1。</p>

<h3>3.2 关于有成员变量的类的继承：</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">B</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">C</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span><span class="p">,</span> <span class="k">public</span> <span class="n">B</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在上面这种情况下，<code>C</code>的实例不仅要存储自身定义的成员变量，还要存储其父类定义的成员变量。所以<code>sizeof(C)</code>的结果为12。</p>

<h3>3.3 关于有虚函数的类：</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">func</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">B</span><span class="p">{</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">func1</span><span class="p">();</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="nf">func2</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">C</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span><span class="p">,</span> <span class="k">public</span> <span class="n">B</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>有虚函数的类会保存一个指向虚表的指针，在32位机器上指针的大小为4，所以<code>sizeof(A)</code>的结果为4。一个类无论有多少个虚函数，都只有一张虚表，所以<code>sizeof(B)</code>的结果也是4。而如果一个类有多重继承，那么它就会保存多张虚表。在上面的例子中，<code>C</code>的实例保存了两张虚表，每张虚表的大小是4，所以<code>sizeof(C)</code>的结果为8。</p>

<h3>3.4 关于有<code>static</code>成员变量的类：</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>静态成员变量是存放在全局数据区的，而<code>sizeof</code>运算符只计算栈中分配的大小，所以静态成员变量不会计算在内。<code>sizeof(A)</code>的结果为4。</p>

<h2>四、<code>sizeof</code>和<code>strlen</code>的区别与联系</h2>

<ul>
<li>首先，<code>sizeof</code>是运算符，而<code>strlen</code>是函数。</li>
<li>其次，<code>sizeof</code>可以作用于变量名、类型名、表达式或者函数；而<code>strlen</code>只能使用<code>char</code>类型字符串做参数，且必须是以<code>\0</code>结尾。对于一个<code>char</code>数组，<code>sizeof</code>返回的是该数组的总大小，而<code>strlen</code>返回的是该数组实际对应的字符串的长度（末尾的<code>\0</code>不计算在内）；对于一个<code>char*</code>字符串，<code>sizeof</code>在32位机器上恒定返回4，而<code>strlen</code>仍然返回字符串的实际长度。</li>
<li>最后，大部分程序在编译阶段做类型检测的时候就把<code>sizeof</code>的值计算过了（参考如下代码），而<code>strlen</code>必须是运行时才会计算出来。</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">add</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">sizeof</span><span class="p">(</span><span class="n">add</span><span class="p">());</span>
</span><span class='line'>    <span class="k">sizeof</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="k">sizeof</span> <span class="n">x</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上述代码中，在<code>main</code>函数的第一行，<code>sizeof(add())</code>会在编译时刻被替换为<code>sizeof(int)</code>然后得出结果4，不需要在运行时调用<code>add</code>函数。同理，<code>x=6</code>这句表达式也是不被执行的。所以在这两个表达式执行完成后，<code>x</code>的值仍然为0。另外，由于在编译时刻已经确定了值，所以<code>sizeof</code>的结果可以被用来作为定义静态数组的维数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试问题赏析：求1到N的和]]></title>
    <link href="http://smwlover.github.io/blog/2016/08/06/add-numbers/"/>
    <updated>2016-08-06T15:39:19+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/08/06/add-numbers</id>
    <content type="html"><![CDATA[<p>在面试中，我们可能会遇到一些“不走寻常路”的问题。这类问题看似简单，但是经常有许多奇葩的要求。比如我们之前讨论过的一个问题：输入两个<code>int</code>类型的整数<code>a</code>和<code>b</code>，输出二者的和，要求不能使用四则运算符。最后我们得出的解决方法是利用<a href="http://smwlover.github.io/blog/2016/05/20/binary-manipulation/">位运算</a>。今天我们再来讨论一道题目：<strong>输入一个<code>int</code>类型的正整数<code>n</code>，输出<code>1</code>到<code>n</code>的和，要求不能使用<code>*</code>、<code>/</code>、<code>for</code>、<code>while</code>、<code>if</code>、<code>else</code>、<code>switch</code>、<code>case</code>以及<code>?:</code>等关键字或运算符</strong>。</p>

<!--more-->


<p>我们可以思考一下，如果不考虑这些限制条件，我们应该怎么去做。能想到的方法无非三种：首先是直接输出结果<code>n*(n+1)/2</code>（但是出现了乘除法，不能用）；其次是利用循环（显然不能用）；最后是利用递归（递归需要用条件判断语句判断是否达到终止条件，所以不能用）。<br/>
其实，上面提到的“不能用”，指的是我们不能在程序中<strong>显式地</strong>使用。我们仍然可以<strong>隐式地</strong>使用它们，也就是<strong>让编译器代替我们实现循环或条件判断</strong>。如果能发现这一点，我们就可以想出很多解法来了，在这里列举其中四种。</p>

<h2>一、让编译器代替我们实现循环</h2>

<h3>方法一</h3>

<p>假设我们有一个类<code>Sum</code>，在我们执行语句<code>new Sum[n]</code>时，会调用<code>n</code>次类<code>Sum</code>的构造函数。我们可以在类<code>Sum</code>中声明两个静态成员变量<code>sum</code>和<code>n</code>，并且分别初始化为0和1。在<code>Sum</code>的构造函数中，我们可以令<code>sum+=n</code>，然后<code>n+=1</code>。这样在构造函数被调用<code>n</code>次之后，<code>Sum::sum</code>的值就是我们想要的结果。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Sum</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Sum</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">n</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">Sum</span><span class="o">::</span><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">Sum</span><span class="o">::</span><span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Sum</span><span class="o">*</span> <span class="n">dump</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sum</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Sum</span><span class="o">::</span><span class="n">sum</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">delete</span><span class="p">[]</span> <span class="n">dump</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这种方法需要我们理解什么是一个类的静态成员，还需要我们知道在通过<code>new</code>操作符为类的一个或多个实例动态分配内存空间的时候，类的构造函数是会被调用的。在用代码实现的时候，我们还需要清楚类的静态成员变量是如何初始化的。</p>

<p><div class="expand">关于<code>static</code>成员变量和函数的一些补充<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
☆静态成员不能在类定义内部初始化，只能在外部初始化。<br/>
☆静态成员函数没有<code>this</code>指针，它不能返回非静态成员，因为除了实例会调用它以外，类本身也可以调用。<br/>
☆静态成员之间可以相互访问，静态成员函数可以访问静态成员变量和静态成员函数。<br/>
☆非静态成员函数可以任意地访问静态成员函数和静态成员变量。<br/>
☆静态成员函数不能访问非静态成员函数和非静态成员变量。
</div></div></p>

<h2>二、让编译器代替我们实现条件判断</h2>

<h3>方法二</h3>

<p>我们知道，C++有一种语言特性叫做短路求值。具体来讲，在逻辑与操作符中，如果前面一个表达式值为<code>false</code>，不必对后面的表达式再做判断，直接返回<code>false</code>；在逻辑或操作符中，如果前面一个表达式值为<code>true</code>，不必对后面的表达式再做判断，直接返回<code>true</code>。我们可以发现，短路求值的效果和条件判断语句是很类似的。<br/>
假设我们用递归来实现求和的功能，递归函数为<code>getSum(int n)</code>，我们需要该函数达到以下效果：<code>n==0</code>的时候达到终止条件，不做递归调用；<code>n&gt;0</code>的时候递归调用<code>getSum(n-1)</code>。参考刚才提到的短路求值，我们可以写出表达式<code>n &amp;&amp; getSum(n-1)</code>，这个表达式刚好满足我们的要求。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sum</span> <span class="o">+=</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>如果说上一种方法考察我们对静态成员变量的理解，这种方法则考察我们对短路求值这种语言特性的认识。</p>

<h3>方法三</h3>

<p>我们先观察一个表达式<code>!!n</code>。在<code>n==0</code>的时候，<code>!n</code>为<code>true</code>，<code>!!n</code>则为<code>false</code>，转化成整形则为<code>0</code>；在<code>n&gt;0</code>的时候，<code>!n</code>为<code>false</code>，<code>!!n</code>则为<code>true</code>，转化成整形则为<code>1</code>。也就是说，这个表达式在<code>n==0</code>的时候返回<code>0</code>，其余情况返回<code>1</code>。<br/>
在了解了这一点之后，我们可以写出下面的代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">getSumZero</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">Func</span><span class="p">)(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="n">Func</span> <span class="n">functions</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">getSumZero</span><span class="p">,</span> <span class="n">getSum</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">getSumZero</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span> <span class="o">+</span> <span class="n">functions</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;n-1&quot;</span><span class="o">&gt;!!</span><span class="n">n</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以看到，我们首先声明了两个函数，其中<code>getSumZero</code>对应递归的终止条件，而<code>getSum</code>则是递归的主函数。然后我们声明了一个由函数指针构成的数组<code>functions</code>，数组的长度为2，而数组的每个元素都是<code>Func</code>类型。根据之前我们定义的类型别名，我们知道<code>Func</code>类型实际上指的是一种函数指针类型，这种函数指针指向一个参数为<code>int</code>且返回值为<code>int</code>的函数。<br/>
在<code>getSum</code>函数的实现中，我们发现：当<code>n&gt;0</code>时，我们会调用<code>functions[1](n-1)</code>，这其实是对<code>getSum</code>自身的递归调用；当<code>n==0</code>时，调用的则是<code>getSumZero(n-1)</code>，这就是递归的终止条件。通过<code>!!n</code>的值，我们可以从数组中选择一个函数进行调用，实现了隐式的条件判断。<br/>
这种方法需要我们理解C++中布尔类型和整数类型之间是如何进行转换的，也需要我们对函数指针的使用方法有一个大致的了解。</p>

<h3>方法四</h3>

<p>这个方法总体上和上一种方法类似，但是没有使用函数指针，而是使用了类的继承与虚函数。代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span><span class="p">;</span>
</span><span class='line'><span class="n">A</span><span class="o">*</span> <span class="n">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">B</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span> <span class="k">return</span> <span class="n">n</span> <span class="o">+</span> <span class="n">arr</span><span class="p">[</span><span class="o">!!</span><span class="n">n</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">A</span><span class="p">();</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">B</span><span class="p">();</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="k">delete</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以看到，我们定义了两个类<code>A</code>和<code>B</code>，其中<code>B</code>是<code>A</code>的子类。它们有一个虚成员函数<code>getSum</code>，其中<code>A::getSum</code>直接返回<code>0</code>，对应递归的终止条件；<code>B::getSum</code>覆盖了其父类的定义，对应递归的主函数。程序定义了一个<code>A*</code>类型的数组，其第一个元素指向一个<code>A</code>类型的实例，第二个元素指向一个<code>B</code>类型的实例。由于<code>getSum</code>是虚函数，程序会根据指针实际指向的类型（动态类型），而不是其声明时的类型<code>A*</code>（静态类型）进行调用。<br/>
其实，这个方法本质上与上一种方法是相同的，因为虚函数（多态）的实现方式是虚表，而虚表实际上就是由一些函数指针构成的。这种方法需要我们对类的继承、虚函数、多态等知识有一个清晰的了解，这些内容是C++的精华，在面试中也是必不可少的。</p>

<h2>总结</h2>

<p>通过上面几种方法我们可以发现，这个问题表面上是让我们实现一个求和的功能，实际上考察的是我们对C++一些重要的语言特性的了解程度，以及我们从这些语言特性入手解决问题的创新能力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hihoCoder题目赏析：并查集]]></title>
    <link href="http://smwlover.github.io/blog/2016/07/31/union-find/"/>
    <updated>2016-07-31T16:00:37+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/07/31/union-find</id>
    <content type="html"><![CDATA[<p>并查集是一种非常精巧而实用的数据结构，它可以处理一些不相交集合的合并与查询问题。并查集的用途有求连通子图、求最小生成树（Kruskal算法）、求最近公共祖先等。本文就通过hihoCoder上的一道题目<a href="http://hihocoder.com/problemset/problem/1066">“无间道之并查集”</a>，来介绍一下并查集这种数据结构。</p>

<!--more-->


<h2>一、题目</h2>

<h3>背景</h3>

<p>这天天气晴朗、阳光明媚、鸟语花香，空气中弥漫着春天的气息……额，说远了，总之，小Hi和小Ho决定趁着这朗朗春光出去玩。但是刚刚离开居住的宾馆不久，抄近道不小心走入了一条偏僻小道的小Hi和小Ho就发现自己的前方走来了几个彪形大汉，定睛一看还都是地地道道的黑人兄弟！小Hi和小Ho这下就慌了神，捡肥皂事小，这一身百把来斤别一不小心葬身他乡可就没处说去了。<br/>
就在两人正举足无措之时，为首的黑叔叔从怀里掏出了一件东西——两张花花绿绿的纸，分别递给了小Hi和小Ho。小Hi和小Ho接过来，只见上面写道：“本地最大的帮派——青龙帮，诚邀您的加入！”下面还详细的列出了加入青龙帮的种种好处。<br/>
于是两人略感心安，在同黑叔叔们交谈一番之后，已是均感相见恨晚。同时，在小Hi和小Ho表示自己不日便将回国之后，黑叔叔们也没有再提加入帮派之事，但是那为首的黑叔叔思索一会，开口道：“我现在有一个难题，思索了很久也没法子解决，既然你们俩都是高材生，不如来帮我看看。”<br/>
小Hi和小Ho点了点头表示没问题，于是黑叔叔继续说道：“这个问题是这样的，我们帮派最近混进了许多警察的卧底，但是在我们的调查过程中只能够知道诸如‘某人和另一个人是同阵营的’这样的信息，虽然没有办法知道他们具体是哪个阵营的，但是这样的信息也是很重要的，因为我们经常会想要知道某两个人究竟是不是同一阵营的。”<br/>
小Hi和小Ho赞同的点了点头，毕竟无间道也都是他们看过的。<br/>
黑叔叔接着说道：“于是现在问题就来了，我希望你们能写出这样一个程序，我会有两种操作，一种是告诉它哪两个人是同一阵营的，而另一种是询问某两个人是不是同一阵营的……既然你们就要回国了，不如现在就去我们帮派的总部写好这个程序再走吧。”<br/>
为了生命安全与……小Hi和小Ho都不得不解决这个问题！</p>

<h3>输入与输出</h3>

<p>输入数据的第一行为一个整数<code>N</code>，表示黑叔叔总共进行的操作次数。<br/>
输入数据的第二至<code>N+1</code>行，每行分别描述黑叔叔的一次操作，其中第<code>i+1</code>行为一个整数<code>op_i</code>和两个由大小写字母组成的字符串<code>Name1_i</code>、<code>Name2_i</code>。<code>op_i</code>只可能为<code>0</code>或<code>1</code>。当<code>op_i==0</code>时，表示黑叔叔判定<code>Name1_i</code>和<code>Name2_i</code>是同一阵营的；当<code>op_i==1</code>时，表示黑叔叔希望知道<code>Name1_i</code>和<code>Name2_i</code>是否为同一阵营的。<br/>
输出：对于黑叔叔每次<code>op_i==1</code>的操作，输出一行，表示查询的结果：如果根据已知信息（即这次操作之前的所有<code>op_i==0</code>的操作），可以判定询问中的两个人是同一阵营的，则输出yes，否则输出no。<br/>
<strong>注意：数据中所有涉及的人物中不存在两个名字相同的人（即姓名唯一地确定了一个人），对于所有的</strong><code>i</code><strong>，满足</strong><code>Name1_i</code><strong>和</strong><code>Name2_i</code><strong>是不同的两个人。</strong></p>

<p><div align="center"><table class="blogTable"><caption>样例输入与输出</caption><tr><th>样例输入</th><th>样例输出</th></tr><tr><td><code><span>10</span><br/><span>0 Steven David</span><br/><span>0 Lcch Dzx</span><br/><span>1 Lcch Dzx</span><br/><span>1 David Dzx</span><br/><span>0 Lcch David</span><br/><span>0 Frank Dzx</span><br/><span>1 Steven Dzx</span><br/><span>1 Frank David</span><br/><span>0 Steven Dzx</span><br/><span>0 Dzx Frank</span></code></td><td><code><span>yes</span><br/><span>no</span><br/><span>yes</span><br/><span>yes</span></code></td></tr></table></div></p>

<h2>二、并查集简介</h2>

<p>并查集即一个或多个不相交的集合，我们从每个集合中选出一个元素作为代表，来表示这个集合。一般情况下，我们不关心每个集合具体包含哪些元素；也不关心每个集合的代表具体是哪个元素。我们所关心的并查集的基本操作主要包含<strong>合并（Union）</strong>和<strong>查询（Find）</strong>操作。其中查询操作是给定一个元素，返回该元素所在集合的代表元素；合并操作则是给定两个元素，将它们所在的集合合并为一个整体。<br/>
我们可以用一个森林来表示并查集，森林中的每棵树代表并查集中的一个集合，树中每个结点表示一个元素，根结点则是这个集合的代表元素。初始状态下，每个结点单独成为一个集合，即每个结点的代表结点均为它自己，如图所示：</p>

<p><div align="center"><img src="/images/blogimg/10.png"></div></p>

<p>并查集的合并操作则是将一棵树的根结点指向另一棵树的根结点。如图所示：</p>

<p><div align="center"><img src="/images/blogimg/11.png"></div></p>

<p>而在C++中，我们可以用一个<code>map</code>或者<code>unordered_map</code>来实现并查集。其中，键代表一个结点的名字，值表示其代表结点的名字。这样，我们可以为上面的问题建立一个数据结构如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Union</span><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">unordered_map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">,</span> <span class="n">string</span><span class="o">&gt;</span> <span class="n">represent</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Union</span><span class="p">()</span><span class="o">:</span> <span class="n">represent</span><span class="p">(</span><span class="n">unordered_map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">,</span> <span class="n">string</span><span class="o">&gt;</span><span class="p">()){}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">insert</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">);</span> <span class="c1">//添加一个结点</span>
</span><span class='line'>    <span class="n">string</span> <span class="nf">find</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">);</span> <span class="c1">//find查询函数</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="n">string</span> <span class="n">name1</span><span class="p">,</span> <span class="n">string</span> <span class="n">name2</span><span class="p">);</span> <span class="c1">//union合并函数</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="n">string</span> <span class="n">name1</span><span class="p">,</span> <span class="n">string</span> <span class="n">name2</span><span class="p">);</span> <span class="c1">//op==0的操作</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="nf">judge</span><span class="p">(</span><span class="n">string</span> <span class="n">name1</span><span class="p">,</span> <span class="n">string</span> <span class="n">name2</span><span class="p">);</span> <span class="c1">//op==1的操作</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>三、查询操作</h2>

<p><code>find</code>操作的实现是显而易见的：判断当前元素的代表结点是不是它自己，如果是，返回它自己；如果不是，则对其代表结点递归调用<code>find</code>函数。这样的思路写成伪代码如下：</p>

<p><div align="center"><img src="/images/blogimg/12.png"></div></p>

<p>但是这种思路有一个缺陷，它的平均时间复杂度为树的高度。为了提高查询操作的效率，我们可以在查询的过程中改变树的结构：如果我们求解出了<code>X</code>所在集合的代表元素是<code>X_r</code>的话，我们可以直接令<code>represent[X]=X_r</code>。这样，下一次再对<code>X</code>进行查询时，效率就会高很多。这种操作会在查询时令查询路径上经过的每一个结点都直接指向根结点，就像把整条路径压缩了一样，所以被称为<strong>路径压缩</strong>，如图所示：</p>

<p><div align="center"><img src="/images/blogimg/14.png"></div></p>

<p>实现路径压缩的伪代码如下：</p>

<p><div align="center"><img src="/images/blogimg/13.png"></div></p>

<h2>四、合并操作</h2>

<p><code>union</code>操作需要输入两个元素<code>name1</code>和<code>name2</code>，我们首先调用<code>find</code>找到这两个元素的代表元素<code>repName1</code>和<code>repName2</code>，然后令<code>repName1</code>的代表元素等于<code>repName2</code>即可。<br/>
当然这一步也可以做一些优化：假设两个元素对应的树高度分别为3和4，如果我们将第二棵树合并到第一棵树上，那么最终得到的树的高度就是5；如果反过来合并，那么得到的树的高度就是4。为了让我们每次合并之后得到的树的高度都是最小的，我们需要将高度较小的树合并到高度较大的树上面。在并查集中，我们通常将树高度的上界称为<strong>秩（rank）</strong>，这种将秩较小的树合并到秩较大的树上的方法，称为<strong>按秩合并</strong>。<br/>
在下面的代码中，我们利用<code>unordered_map&lt;string, int&gt; rank</code>来记录每个结点的秩，然后根据秩的大小关系决定合并操作的方法：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">unionSet</span><span class="p">(</span><span class="n">string</span> <span class="n">x</span><span class="p">,</span> <span class="n">string</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">x</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="o">==</span> <span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">y</span><span class="p">)))</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">rank</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">rank</span><span class="p">[</span><span class="n">y</span><span class="p">])</span> <span class="n">represent</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">represent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">rank</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="n">rank</span><span class="p">[</span><span class="n">y</span><span class="p">])</span> <span class="n">rank</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hihoCoder题目赏析：状态压缩]]></title>
    <link href="http://smwlover.github.io/blog/2016/06/28/state-compression/"/>
    <updated>2016-06-28T09:48:08+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/06/28/state-compression</id>
    <content type="html"><![CDATA[<p>本文来赏析hihoCoder上的一道题目<a href="http://hihocoder.com/problemset/problem/1044">“状态压缩”</a>。我们知道，用动态规划解决问题的时候，状态的表示是很重要的一环。一般来讲，状态可以用一个数组来表示，但是对于有些问题，它们的状态中所包含的信息过多，如果要用数组表示的话，数组的维度会达到四维或以上，这时我们就需要使用状态压缩。状态压缩的核心思想是<strong>用二进制位来表示状态，用位运算来表示状态之间的转化</strong>。这样不仅减少了空间的消耗，而且提高了程序的效率。</p>

<!--more-->


<h2>一、题目</h2>

<h3>背景</h3>

<p>小Hi和小Ho决定乘坐火车前往一座城市，但是不幸的是，他们并没有能够买到很好的火车票——他们只能够乘坐最为破旧的火车进行他们的旅程。<br/>
火车上的人非常多，以致于都没有足够的位置能让每一个人都有地方坐下来。小Hi和小Ho本着礼让他们的心情——当然还因为本来他们买的就是站票，老老实实的呆在两节车厢的结合处。他们本以为就能够这样安稳抵达目的地，但事与愿违，他们这节车厢的乘务员是一个强迫症，每隔一小会都要清扫一次卫生，而时值深夜，大家都早已入睡，这种行为总是会惊醒一些人。一旦相邻的一些乘客被惊醒了大多数的话，就会同乘务员吵起来，弄得大家都睡不好。<br/>
将这一切看在眼里的小Hi与小Ho决定利用他们的算法知识，来帮助这个有着强迫症的乘务员——在不与乘客吵起来的前提下尽可能多的清扫垃圾。<br/>
小Hi和小Ho所处的车厢可以被抽象成连成一列的<code>N</code>个位置，按顺序分别编号为<code>1..N</code>，每个位置上都有且仅有一名乘客在休息。同时每个位置上都有一些垃圾需要被清理，其中第<code>i</code>个位置的垃圾数量为<code>Wi</code>。乘务员可以选择其中一些位置进行清理，但是值得注意的是，一旦编号连续的<code>M</code>个位置中有超过<code>Q</code>个的位置都在这一次清理中被选中的话（即这<code>M</code>个位置上的乘客有至少<code>Q+1</code>个被惊醒了），就会发生令人不愉快的口角。而小Hi和小Ho的任务是，计算选择哪些位置进行清理，在不发生口角的情况下，清扫尽可能多的垃圾。</p>

<h3>输入与输出</h3>

<p>输入数据的第一行为三个正整数<code>N</code>、<code>M</code>和<code>Q</code>，意义如前文所述。<br/>
输入数据的第二行为<code>N</code>个整数，分别为<code>W1</code>到<code>WN</code>，代表每一个位置上的垃圾数目。 <br/>
输出一个整数<code>Ans</code>，表示在不发生口角的情况下，乘务员最多可以清扫的垃圾数目。</p>

<p><div align="center"><table class="blogTable"><caption>样例输入与输出</caption><tr><th>样例输入</th><th>样例输出</th></tr><tr><td><code><span>5 2 1</span><br/><span>36 9 80 69 85</span></code></td><td><code>201</code></td></tr></table></div></p>

<h2>二、列出状态转移方程</h2>

<p>我们定义<code>F(i,p1,p2,...,p(m-1))</code>表示<strong>当前已经完成了第<code>1</code>个位置到第<code>i</code>个位置的清理工作，并且<code>p1</code>表示第<code>i</code>个位置是否被清理（<code>0</code>表示未清理，<code>1</code>表示已清理）、<code>p2</code>表示第<code>i-1</code>个位置是否被清理……<code>p(m-1)</code>表示第<code>i-m+2</code>个位置是否被清理的情况下，最多可以清扫的垃圾数量。</strong>注意到，<code>p1...p(m-1)</code>代表从第<code>i</code>个位置往前的连续<code>m-1</code>个位置。<br/>
假设我们已经求得了<code>F(i,p1,p2,...,p(m-1))</code>的值，我们来讨论第<code>i+1</code>个位置的清理情况：<br/>
如果不清理第<code>i+1</code>个位置，那么我们在该位置的状态可以表示为<code>F(i+1,0,p1,p2,...,p(m-2))</code>，并且由于我们没有在第<code>i+1</code>个位置清理任何垃圾，所以我们清理的垃圾数量相比于第<code>i</code>个位置是没有变化的；<br/>
如果要清理第<code>i+1</code>个位置，我们首先要观察是否违反了题目的条件，即<code>p1...p(m-1)</code>中1的数量是否小于<code>Q</code>。如果不小于<code>Q</code>，我们无法清理第<code>i+1</code>个位置；如果小于<code>Q</code>，我们可以清理，此时该位置的状态可以表示为：<code>F(i+1,1,p1,p2,...,p(m-2))</code>，并且由于我们清理了第<code>i+1</code>个位置的垃圾，所以我们清理的垃圾数量相比于第<code>i</code>个位置增加了<code>W(i+1)</code>。<br/>
综上所述，我们列出的状态转移方程如下：</p>

<p><div align="center"><img src="/images/blogimg/7.png"></div></p>

<p>因为每次状态转移都是从<code>i</code>向<code>i+1</code>进行的，所以我们只需要按照<code>i</code>从小到大的顺序进行计算就可以了。最后，我们找到第<code>N</code>个位置上对应的所有状态，这些状态中清理垃圾数量的最大值即为所求。</p>

<h2>三、状态压缩</h2>

<p>我们如果按照上面的方程求解，那么需要开辟一个维数为<code>M</code>的数组，在<code>M</code>达到两位数的时候显然是不太可能做到的。通过观察发现，对于<code>p1...p(m-1)</code>中的每个<code>p</code>，取值只有0或1两种可能，我们很自然地想到用长度为<code>m-1</code>的二进制串来表示<code>p1...p(m-1)</code>，其最高位代表<code>p1</code>，最低位代表<code>p(m-1)</code>。这样我们动态规划数组的维度可以被直接减少到二维。<br/>
此时，我们的方程可以直接写成<code>F(i,j)</code>，其中<code>i</code>的含义和之前相同，<code>j</code>则是上述二进制串对应的十进制整数，其取值范围为<code>0</code>到<code>2^(m-1)-1</code>。<br/>
如果不清理第<code>i+1</code>个位置，<code>j</code>的变化相当于<strong>右移一位，第一位补0</strong>，即：</p>

<div align="center"><img src="http://smwlover.github.io/images/blogimg/8.png" class="mahjong"/></div>


<p></p>

<p>如果要清理第<code>i+1</code>个位置，<code>j</code>的变化相当于<strong>右移一位，第一位补1</strong>，即：</p>

<div align="center"><img src="http://smwlover.github.io/images/blogimg/9.png" class="mahjong"/></div>


<p></p>

<p>通过状态压缩，我们保存状态只需要开辟<code>N*2^(m-1)</code>大小的空间。在遍历的时候，对于第<code>i</code>行，讨论清理或不清理第<code>i+1</code>个位置的情况，并且填充第<code>i+1</code>行的相应位置。最后观察第<code>N</code>行的所有位置中填充的数据，最大值即为所求。</p>

<h2>四、代码</h2>

<p><figure class='code'><figcaption><span>状态压缩 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">countFlag</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">num</span><span class="p">){</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">Q</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span> <span class="o">&gt;&gt;</span> <span class="n">Q</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">rubbish</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">rubbish</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="n">M</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">table</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">size</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="n">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">size</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="c1">//考虑第i+1个位置选还是不选：</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">countFlag</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Q</span><span class="p">)</span> <span class="c1">//可以选择：</span>
</span><span class='line'>                <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][(</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;(</span><span class="n">M</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">j</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][(</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;(</span><span class="n">M</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">j</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">)],</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">rubbish</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="c1">//不选的情况：</span>
</span><span class='line'>            <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//遍历最后一行，找到最大值：</span>
</span><span class='line'><span class="kt">int</span> <span class="n">maxRubbish</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">size</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">maxRubbish</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">maxRubbish</span><span class="p">,</span> <span class="n">table</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">maxRubbish</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
