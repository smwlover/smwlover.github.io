<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 笔记 | 美柑の部屋]]></title>
  <link href="http://smwlover.github.io/blog/categories/bi-ji/atom.xml" rel="self"/>
  <link href="http://smwlover.github.io/"/>
  <updated>2016-08-30T22:36:38+08:00</updated>
  <id>http://smwlover.github.io/</id>
  <author>
    <name><![CDATA[smwlover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++中指针的简要总结]]></title>
    <link href="http://smwlover.github.io/blog/2016/08/28/pointers/"/>
    <updated>2016-08-28T21:40:57+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/08/28/pointers</id>
    <content type="html"><![CDATA[<p>指针被誉为“C语言的灵魂”。C语言之所以强大，很大一部分原因在于其灵活的指针运用。在这篇文章中，我就对C/C++中指针这一重要的语言特性进行简要的总结。</p>

<!--more-->


<h3>一、给指针分配一个绝对地址会发生什么？</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="mh">0x8000</span><span class="p">;</span>
</span><span class='line'><span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>我们可以给指针分配一个绝对地址，但是这样的做法是非常危险的。一旦我们试图改变它指向的内容，程序就会崩溃。上述代码的第二行可以执行，但是会在第三行崩溃。</p>

<h3>二、指针和引用有什么区别？</h3>

<ol>
<li>非空区别，一个引用必须总是指向某些对象，而指针可以为空，所以在使用指针之前需要测试其合法性，防止其为空。</li>
<li>二是可修改区别，引用总是指向初始化时被指定的对象，之后引用所指的对象就不能改变（但是所指对象的内容可以改变），但是指针可以被重新赋值，指向另外的对象。</li>
<li>三是初始化时的区别，引用在声明的时候必须初始化，而指针在声明的时候可以不初始化，但是这样它会指向一个不确定的值，在这种情况下就改变其指向的内容是不合理的。</li>
</ol>


<h3>三、指针、引用与<code>const</code></h3>

<p><code>const</code>修饰符意味着一个变量或函数是只读的。<code>const</code>修饰指针，一般分为以下三种情况：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="k">const</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="k">const</span> <span class="n">a</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>其中第一种和第二种情况是等价的，都是说明指针<code>a</code>指向的是一个<code>const int</code>，这种情况下不允许对指针所指向的内容进行修改操作，但是指针本身的值可以修改；第三种情况中<code>const</code>位于星号右侧，说明指针<code>a</code>本身是一个常量，该指针指向的位置是不能变化的，但是该指针所指向的内容可以修改。<br/>
另外在前两种情况中，我们在声明指针<code>a</code>的同时可以不对其进行初始化；而第三种情况中，因为指针<code>a</code>本身是常量，我们必须在声明指针<code>a</code>的同时对其进行初始化（声明常量时必须对其进行初始化）。</p>

<p><code>const</code>修饰引用时，有一点需要注意：在声明引用的时候，我们需要用一个变量对其进行初始化。而在声明<code>const</code>引用时，不仅可以利用变量进行初始化，还允许用一个字面值，甚至是一个表达式作为初始值。此时编译器会创建一个临时量，然后将该<code>const</code>引用绑定到临时量上。参考下面的代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span> <span class="c1">//错误，不能将非常量引用绑定到字面量上。</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span> <span class="c1">//正确。</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span> <span class="c1">//正确。</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong><code>const</code>指针与引用的“自以为是”：</strong>我们不能通过指向常量的指针或引用修改其指向的内容，但是可以通过其他途径修改。所谓常量指针或引用，其实只是指针或引用自以为是，它们觉得自己指向了常量，所以自觉不去改变所指对象的值，但是这个值还是可以通过其他途径改变的。比如下面的代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span> <span class="c1">//这句是合法的，允许非常量转化为常量。</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="mi">600</span><span class="p">;</span> <span class="c1">//错误，不能通过a改变其内容。</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="mi">600</span><span class="p">;</span> <span class="c1">//正确，a指向的内容已经被改变成了600。&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">//错误。</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">//均正确，a的内容已经被改变成了20。</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>四、<code>char*</code>与<code>char[]</code>字符串有什么区别？</h3>

<p>观察下面的代码，并寻找其中潜在的危险：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">getStr</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">str</span><span class="p">[]</span> <span class="o">=</span> <span class="err">“</span><span class="mo">01234567</span><span class="mi">89</span><span class="err">”</span><span class="p">;</span> <span class="c1">//如果想得到正确的结果，可以将char数组改为char&lt;/em&gt;。</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在上述代码中，函数体中的<code>str</code>以数组的形式存储，这个数组的空间是在栈中分配的，且<code>str</code>指向的是这个数组在栈中的首地址。在函数调用完成之后，栈恢复到调用函数之前的状态，调用函数时的临时空间（包括函数内部的临时变量）被回缩，<code>str</code>所对应的地址已经不再属于应该被访问到的范围了。如果将<code>str</code>的类型改为<code>char*</code>则是正确的。通过数组方式分配的字符串位于栈上，在函数执行完毕后，该空间就被回缩；通过指针方式分配字符串位于内存中全局区域的文字常量区，该空间是一直存在的。<br/>
<code>char*</code>与<code>char[]</code>的区别还包括：<strong>①</strong>我们可以修改<code>char[]</code>字符串的内容，但是<code>char*</code>字符串存储在全局区域中的文字常量区，我们无法修改该字符串的内容，如果试图修改，程序会在运行时崩溃。<strong>②</strong>对于<code>char str[]</code>，在存储字符串的内容之外，没有额外存储一个指向该数组的指针，因为<code>str</code>本身可以当作指向该数组第一个元素的指针来使用；而对于<code>char* str</code>，除了在文字常量区存储字符串的内容之外，在栈中还会利用4字节的空间存储指向该字符串的指针。</p>

<h3>五、指针与动态分配内存</h3>

<p>在C++中，我们经常利用操作符<code>new</code>动态分配一块内存，这块内存位于堆中。需要注意两点：<strong>①</strong>使用<code>new</code>动态分配的内存要使用<code>delete</code>释放掉，否则会造成内存泄漏。<strong>②</strong>在我们<code>delete</code>了一个<code>new</code>返回的指针后，它对应的内存空间已经被释放，但是该指针本身仍然存在且不指向任何有效的空间，成为了悬空指针。如果在没有对该指针重新赋值的情况下就要修改它指向的空间，会造成程序崩溃。</p>

<p>那么，C++中的<code>new</code>和C语言中的<code>malloc</code>有什么区别呢？<br/>
首先，动态销毁<code>malloc</code>创建的内存要用到<code>free</code>，而<code>new</code>则对应<code>delete</code>；另外，对于我们自定义的类型，我们需要在动态创建对象的时候执行该类型的构造函数，在动态销毁对象的时候执行该类型的析构函数，<code>malloc/free</code>则无法完成这一点。</p>

<h3>六、<code>this</code>指针</h3>

<p><code>this</code>指针是一种特殊的指针，在类成员函数的调用过程中，它时时刻刻指向类的实例本身。关于这个特别的指针，我们有一些要点需要了解：<br/>
<strong>①</strong>如果类的一个非静态成员函数中访问到了类的非静态成员，那么编译器会对该函数进行一些处理：将对象本身的地址作为一个隐含参数传递给函数。实际上，对于类<code>T</code>，成员函数默认的第一个参数都是<code>T* const this</code>。比如成员函数<code>int func(int a)</code>，在编译器看来其实应该是<code>int func(T* const this, int a)</code>。<br/>
<strong>②</strong><code>this</code>指针的生命周期同任何一个成员函数的参数是一样的，在成员函数的开始前构造，在成员函数的结束后清除。当然，<code>this</code>指针作为参数的传递效率一般比其他参数要高，可能会使用寄存器传递，而不是通过栈。<br/>
<strong>③</strong>一个对象的<code>this</code>指针并不是对象本身的一部分，不会影响对该对象使用<code>sizeof</code>的结果。其实，所有成员函数的参数都不会占用对象本身的空间，它们只会在参数传递的时候占用栈空间，或者直接通过一个寄存器进行传递。<br/>
<strong>④</strong>静态函数中不能使用<code>this</code>指针，因为它可以不通过类的实例，而是类对象本身进行调用。</p>

<p><div class="expand">一道关于<code>this</code>指针的奇葩问题<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
观察下面的代码，注释1到注释4中，哪些行会令程序崩溃？
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">func1</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">func1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">func2</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">func2</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">a</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">func3</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">func3</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">void</span> <span class="nf">func4</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">func4</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">A</span><span class="o">::</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">A</span><span class="o">*</span> <span class="n">pa</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pa</span><span class="o">-&gt;</span><span class="n">func1</span><span class="p">();</span> <span class="c1">//1</span>
</span><span class='line'>    <span class="n">pa</span><span class="o">-&gt;</span><span class="n">func2</span><span class="p">();</span> <span class="c1">//2</span>
</span><span class='line'>    <span class="n">pa</span><span class="o">-&gt;</span><span class="n">func3</span><span class="p">();</span> <span class="c1">//3</span>
</span><span class='line'>    <span class="n">pa</span><span class="o">-&gt;</span><span class="n">func4</span><span class="p">();</span> <span class="c1">//4</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<br/>
注释1这一行不会崩溃，因为<code>func1()</code>这个函数首先不是虚函数，所以要调用该函数不需要查询虚表；另外该函数无需访问类的非静态成员，所以不需要隐含地传递一个<code>this</code>指针进去。<br/>
注释2这一行会崩溃，因为<code>func2()</code>这个函数需要访问类的非静态成员变量<code>a</code>，而空指针是无法访问非静态成员变量的。<br/>
注释3这一行会崩溃，因为<code>func3()</code>是虚函数，为了找到该函数的地址需要访问虚表，也就需要访问指向虚表的指针<code>vptr</code>，而空指针是无法访问<code>vptr</code>的。<br/>
注释4这一行不会崩溃，因为<code>func4()</code>是一个静态成员函数，不需要<code>this</code>指针，并且访问的静态成员变量<code>b</code>不占用类实例的内存空间。
</div></div></p>

<h3>七、函数指针</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="n">func</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在上述代码中，我们声明了一个名称为<code>p</code>的函数指针，它的参数表为<code>(int, int)</code>，返回值为<code>int</code>。需要注意的是，绝对不能将<code>*p</code>外面的括号省略掉，否则<code>p</code>就成为了一个返回值为<code>int*</code>类型的函数。然后我们令指针<code>p</code>指向一个函数<code>func</code>。当我们把函数名称作为一个变量使用时，该变量会自动转化为指针，所以没必要写成<code>&amp;func</code>。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">Func</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">Func</span> <span class="n">q</span> <span class="o">=</span> <span class="n">func</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>函数指针类型通常比较冗长，我们可能想通过<code>typedef</code>为它起一个别名。对函数指针类型使用<code>typedef</code>的语法如上述代码所示。</p>

<h3>八、数组指针</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在上述代码中，我们声明了一个名称为<code>p</code>的数组指针，它指向的是长度为3的<code>int</code>类型数组。与函数指针类似，我们绝对不能将<code>*p</code>外面的括号省略掉，否则<code>p</code>就成为了一个长度为3的<code>int*</code>类型数组（这里涉及到数组指针与指针数组的区别。数组指针是指向数组类型的指针，指针数组是一个数组，其中的元素都是指针类型）。然后我们令指针<code>p</code>指向了一个数组<code>a</code>，<code>a</code>的类型是<code>int[3]</code>，<code>p</code>的类型则为<code>int(*)[3]</code>。<br/>
<strong>※</strong>这里有一个误区，由于数组的名称可以当作指向数组第一个元素的指针来使用，很多人都认为<code>a</code>的类型为<code>int*</code>。实际上<code>a</code>的类型为<code>int[3]</code>，只不过可以为<code>int*</code>类型的指针赋值而已。</p>

<p><strong>数组指针的加减运算：</strong>正如对<code>int*</code>类型的指针使用自增时，该指针会移动<code>sizeof(int)</code>字节的长度一样，我们对<code>int(*)[3]</code>类型的指针使用自增时，该指针会移动<code>sizeof(int[3])</code>，也就是12字节的长度。观察下面的代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">*</span><span class="p">(</span><span class="n">ptr</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>a</code>是<code>int[5]</code>类型，<code>&amp;a</code>则是<code>int(*)[5]</code>类型，将该类型的指针<code>+1</code>，即移动20个字节，指向<code>a</code>最后一个元素的下一个位置。然后我们将该<code>int(*)[5]</code>类型的指针强制转化为<code>int*</code>类型，并对其<code>-1</code>，即前移4字节，此时该指针指向<code>a</code>的最后一个元素。所以输出的内容应该是5。</p>

<h3>九、智能指针<code>auto_ptr</code></h3>

<p>使用C++中的智能指针<code>auto_ptr</code>可以方便管理单个堆内存对象，它解决了因为动态分配的对象忘记<code>delete</code>而导致的内存泄漏问题。比如下面的代码将不会导致<code>T</code>类型对象的内存泄漏，无论函数是正常退出还是因为异常跳出，<code>pt</code>都会将对应的内存空间自动释放掉。智能指针调用成员函数的方法与普通指针基本一致。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">auto_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">pt</span><span class="p">(</span><span class="k">new</span> <span class="n">T</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>智能指针的<code>get()</code>函数：</strong>该函数返回被该智能指针管理的裸指针，在上述代码中，<code>pt-&gt;get()</code>返回的就是<code>T*</code>类型的指针。<br/>
<strong>智能指针的<code>release()</code>函数：</strong>该函数让出该智能指针对裸指针的管理权（注意只是让出管理权，而不是释放对应的内存空间），一旦管理权被让出，那么该智能指针就不会自动释放内存空间了，需要我们手动<code>delete</code>。<br/>
<strong>注意：智能指针不能相互赋值！</strong>将<code>pt1</code>赋值给<code>pt2</code>会使<code>pt2</code>完全夺取<code>pt1</code>的内存管理所有权，导致<code>pt1</code>悬空，之后再对<code>pt1</code>指向的内存空间进行访问时就会程序崩溃。所以，智能指针绝对不能使用赋值操作符，并且由智能指针管理的对象也不能放入<code>vector</code>等容器中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[巩固基础：二叉树的遍历]]></title>
    <link href="http://smwlover.github.io/blog/2016/08/21/binary-tree-traversal/"/>
    <updated>2016-08-21T17:38:39+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/08/21/binary-tree-traversal</id>
    <content type="html"><![CDATA[<p>我们在数据结构的学习中，都接触过二叉树。二叉树常用的遍历方法包括：前序遍历、中序遍历、后序遍历以及层次遍历。其中前三种遍历方法均可以通过递归或者迭代实现。递归实现难度较小，而且写出来的代码简洁明了；迭代实现起来则具有一定难度。在这篇文章中，我就来总结一下利用迭代遍历二叉树的方法。</p>

<!--more-->


<h2>一、前序遍历</h2>

<p>二叉树的前序、中序和后序遍历都是通过栈来实现的，而前序遍历则是其中最简单的。所谓前序遍历，指的是对于每个结点，先访问该结点本身，然后访问左子树，最后访问右子树。为了进行前序遍历，我们初始化一个空栈存储二叉树的结点。首先令根结点入栈。每当栈不为空，弹出栈顶的结点并访问该结点，然后依次将其右儿子、左儿子入栈（如果不为<code>NULL</code>）。注意入栈的顺序是先右儿子，再左儿子。</p>

<p><figure class='code'><figcaption><span>Preorder Traversal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">preorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TreeNode</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">nodeStack</span><span class="p">;</span>
</span><span class='line'><span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">nodeStack</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">nodeStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="n">nodeStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>二、中序遍历</h2>

<p>所谓中序遍历，指的是对于每个结点，先访问左子树，然后访问该结点本身，最后访问右子树。为了进行中序遍历，我们需要维持两个栈，一个栈存储二叉树的结点，另一个栈则是标记栈，存储结点栈中相应结点的标记，标记的取值可能为0或1。<br/>
首先，我们令根结点入栈（标记为0）。每当栈不为空，我们弹出栈顶结点及其标记：如果该结点的标记为0，则令该结点再次入栈（标记为1），并且如果该结点有左儿子，将其左儿子入栈（标记为0）；如果该结点的标记为1，则访问该结点，并且如果该结点有右儿子，将其右儿子入栈（标记为0）。</p>

<p><figure class='code'><figcaption><span>Inorder Traversal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">inorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TreeNode</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">nodeStack</span><span class="p">;</span>
</span><span class='line'><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">markStack</span><span class="p">;</span>
</span><span class='line'><span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">nodeStack</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">nodeStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mark</span> <span class="o">=</span> <span class="n">markStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="n">nodeStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">markStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">mark</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>        <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Left child:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">){</span>
</span><span class='line'>            <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>            <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Right child:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">){</span>
</span><span class='line'>            <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>            <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>三、后序遍历</h2>

<p>所谓后序遍历，指的是对于每个结点，先访问左子树，然后访问右子树，最后访问该结点本身。后序遍历的实现思路和中序遍历类似，仍然是维持一个结点栈和一个标记栈，不同之处在于标记的取值可能为0、1或2。<br/>
首先，我们令根结点入栈（标记为0）。每当栈不为空，我们弹出栈顶结点及其标记：如果该结点的标记为0，则令该结点再次入栈（标记为1），并且如果该结点有左儿子，将其左儿子入栈（标记为0）；如果该结点的标记为1，则令该结点再次入栈（标记为2），并且如果该结点有右儿子，将其右儿子入栈（标记为0）；如果该结点的标记为2，则访问该结点。</p>

<p><figure class='code'><figcaption><span>Postorder Traversal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">postorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TreeNode</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">nodeStack</span><span class="p">;</span>
</span><span class='line'><span class="n">stack</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">markStack</span><span class="p">;</span>
</span><span class='line'><span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">nodeStack</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">nodeStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mark</span> <span class="o">=</span> <span class="n">markStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="n">nodeStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">markStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">mark</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>        <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Left child:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">){</span>
</span><span class='line'>            <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>            <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">mark</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>        <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Right child:</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">){</span>
</span><span class='line'>            <span class="n">nodeStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>            <span class="n">markStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span>
</span><span class='line'>        <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>另外需要注意的是，通过一棵二叉树的前序与中序，或者中序与后序遍历序列是可以重建这棵二叉树的。比如一棵二叉树的前序与中序遍历序列如下：<br/>
前序遍历序列：<code>a,b,e,c,f,g</code>；<br/>
中序遍历序列：<code>b,e,a,f,c,g</code>。<br/>
我们知道，前序遍历序列的结点顺序为根结点、左子树、右子树；中序遍历为左子树、根结点、右子树；后序遍历则为左子树、右子树、根结点。通过这个结论，我们可以知道结点<code>a</code>为二叉树的根结点，所以在中序遍历序列中，位于<code>a</code>前面的序列<code>b,e</code>就是左子树的中序遍历序列，位于<code>a</code>后面的序列<code>f,c,g</code>则是右子树的中序遍历序列。另外我们可以确定，左右子树的大小分别为2和3，所以在前序遍历序列中，<code>a</code>后面的2个结点<code>b,e</code>就是左子树的前序遍历序列，再后面的3个结点<code>c,f,g</code>就是右子树的前序遍历序列。<br/>
然后我们对左右子树分别进行递归调用，即可重建这棵二叉树。</p>

<h2>四、层次遍历</h2>

<p>如果说前序遍历类似于图的深度优先搜索，那么层次遍历则类似于广度优先搜索。层次遍历指的是按照结点所在层，从根结点开始逐一访问。不同于之前几种遍历方法利用栈来实现，层次遍历是利用队列来实现的。首先我们初始化一个空队列并令根结点进队。每当队列不为空，使队列最前端的结点出队并且访问该结点，然后将该结点的左右儿子依次进队。</p>

<p><strong>扩展：</strong>输入一棵二叉树，将其层次遍历序列输出到<code>vector</code>中，不同层的结点需要输出到不同的<code>vector</code>中。比如对于如下图所示的二叉树，层次遍历的结果应该是<code>[[1],[2,4],[8,3]]</code>。</p>

<p><div align="center"><img src="/images/blogimg/15.png"></div></p>

<p><strong>答案：</strong>上面的题目要求我们在层次遍历的基础上，将不同层的结点加以区分。我们可以<strong>利用两个队列交替放置不同层的结点</strong>，也就是说当队列<code>A</code>中的一个结点出队时，我们将其左右儿子加入到队列<code>B</code>中，反之亦然。这样，与当前结点同一层的结点就会出现在同一个队列中，而当前结点的上层或下层结点就会在另一个队列中出现，达到了区分不同层结点的目的。</p>

<p><figure class='code'><figcaption><span>Level Order Traversal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">levelOrder</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TreeNode</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">q</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">dep</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>        <span class="n">TreeNode</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">front</span><span class="p">();</span>
</span><span class='line'>        <span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="p">].</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="n">tmp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>            <span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="o">^</span><span class="mi">1</span><span class="p">].</span><span class="n">push</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>            <span class="n">q</span><span class="p">[</span><span class="n">dep</span><span class="o">^</span><span class="mi">1</span><span class="p">].</span><span class="n">push</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dep</span> <span class="o">^=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++中sizeof运算符的简要总结]]></title>
    <link href="http://smwlover.github.io/blog/2016/08/13/sizeof-operator/"/>
    <updated>2016-08-13T15:16:14+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/08/13/sizeof-operator</id>
    <content type="html"><![CDATA[<p><code>sizeof</code>是C++中的一个运算符（不是一个函数），它的作用被表述为：<em>The</em> <code>sizeof</code> <em>keyword gives the amount of storage, <strong>in bytes</strong>, associated with <strong>a variable or a type (including aggregate types)</strong>. This keyword returns a value of type</em> <code>size_t</code><em>.</em> 简而言之，就是返回一个变量或类型在内存中所占的字节数。但正是这么一个看似简单的运算符，却成为了面试中的热门考点。这说明关于这个运算符其实有很多需要注意的地方。在这篇文章中，我就对这个运算符进行一个简要的总结。</p>

<!--more-->


<h2>一、指针，数组与<code>sizeof</code></h2>

<p>面试的时候，面试官经常将<code>sizeof</code>运算符与<code>char*</code>类型字符串或者<code>char[]</code>类型字符串综合起来考察。比如下面的例子：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">getSize</span><span class="p">(</span><span class="kt">char</span> <span class="n">var</span><span class="p">[]){</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">str1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mo">01234567</span><span class="mi">89</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span> <span class="n">str2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;0123456789&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">str3</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;0123456789&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">str3</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">getSize</span><span class="p">(</span><span class="n">str3</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在<code>main</code>函数中，我们依次定义了三个内容相似的字符串。首先对于<code>str1</code>，它是一个指针，指针大小在32位机器中恒定为4，所以输出为4；<code>str2</code>是字符数组，没有预定义大小，所以其大小由存储的字符串长度决定，字符串的长度为10，加上末尾的字符串结束符<code>\0</code>，共11个字符，所以输出11；<code>str3</code>是预定义大小的字符数组，不管内部存储的字符串长度是多少，其大小都是预定义的大小100，所以输出100。而对于函数<code>getSize</code>，我们需要了解的是，<strong>在C++中，任何数组作为函数参数传递进去后都会退化成指针，</strong>所以输出为4。<br/>
综上所述  ，输出依次为4、11、100和4。</p>

<h2>二、<code>struct</code>和<code>class</code>在内存中的数据对齐</h2>

<p>数据对齐这件事，我们平时好像不太关注，但是一提到<code>sizeof</code>操作符，就会不可避免地涉及到内存对齐的机制。之所以要进行内存对齐，是出于如下考虑：<strong>对于<code>n</code>字节的元素，它的首地址能被<code>n</code>整除时，才能在程序执行时获得最好的性能。</strong>对于类或者结构体，为了保证这一点，就需要使其内部的成员变量按照<strong>最长的成员变量的长度</strong>去对齐。举个例子：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">A</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">B</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">short</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在上面的代码中，我们定义了两个结构体<code>A</code>和<code>B</code>，它们的成员变量内容相同，但是顺序不同。通过观察发现，<code>A</code>和<code>B</code>中最长的数据元素类型均为<code>int</code>，占4字节，所以两个结构体的成员变量均要以4字节为单位进行对齐。简而言之，就是成员变量按照顺序放入长度为4字节的位置中，如果能放得下，就继续往里放；如果放不下，就需要开辟一个新的位置。所以，<code>A</code>和<code>B</code>数据对齐的情况如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A的数据对齐情况，按照声明的顺序，应该依次放置a,b,c：
</span><span class='line'>|-a-|&mdash;|-b-|-b-|
</span><span class='line'>|-c-|-c-|-c-|-c-|
</span><span class='line'>所以sizeof(A)应该等于8。&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>B的数据对齐情况，按照声明的顺序，应该依次放置a,c,b：
</span><span class='line'>|-a-|&mdash;|&mdash;|&mdash;|
</span><span class='line'>|-c-|-c-|-c-|-c-|
</span><span class='line'>|-b-|-b-|&mdash;|&mdash;|
</span><span class='line'>所以sizeof(B)应该等于12。</span></code></pre></td></tr></table></div></figure></p>

<p>而对于联合体<code>union</code>，相比于<code>struct</code>在内存上的顺序式组织，<code>union</code>是重叠式组织的，所以对一个<code>union</code>使用<code>sizeof</code>返回的是其最长成员的长度。</p>

<h2>三、类和<code>sizeof</code>运算符</h2>

<h3>3.1 关于空类的继承：</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">B</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">func</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">C</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span><span class="p">,</span> <span class="k">public</span> <span class="n">B</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>对一个空类使用<code>sizeof</code>结果为1，因为即使是空类，也需要在内存中占用一定位置，否则就不可寻址了，这是编译器做的一步特殊处理。所以<code>sizeof(A)</code>的结果为1。对于一个只有普通函数，没有成员变量的类使用<code>sizeof</code>，结果仍为1，因为类的普通函数不会占用类的每个实例的空间。所以<code>sizeof(B)</code>的结果为1。对一个多重继承的空类使用<code>sizeof</code>，输出仍然为1。所以<code>sizeof(C)</code>的结果为1。</p>

<h3>3.2 关于有成员变量的类的继承：</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">B</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">C</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span><span class="p">,</span> <span class="k">public</span> <span class="n">B</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在上面这种情况下，<code>C</code>的实例不仅要存储自身定义的成员变量，还要存储其父类定义的成员变量。所以<code>sizeof(C)</code>的结果为12。</p>

<h3>3.3 关于有虚函数的类：</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">func</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">B</span><span class="p">{</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">func1</span><span class="p">();</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="nf">func2</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">C</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span><span class="p">,</span> <span class="k">public</span> <span class="n">B</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>有虚函数的类会保存一个指向虚表的指针，在32位机器上指针的大小为4，所以<code>sizeof(A)</code>的结果为4。一个类无论有多少个虚函数，都只有一张虚表，所以<code>sizeof(B)</code>的结果也是4。而如果一个类有多重继承，那么它就会保存多张虚表。在上面的例子中，<code>C</code>的实例保存了两张虚表，每张虚表的大小是4，所以<code>sizeof(C)</code>的结果为8。</p>

<h3>3.4 关于有<code>static</code>成员变量的类：</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>静态成员变量是存放在全局数据区的，而<code>sizeof</code>运算符只计算栈中分配的大小，所以静态成员变量不会计算在内。<code>sizeof(A)</code>的结果为4。</p>

<h2>四、<code>sizeof</code>和<code>strlen</code>的区别与联系</h2>

<ul>
<li>首先，<code>sizeof</code>是运算符，而<code>strlen</code>是函数。</li>
<li>其次，<code>sizeof</code>可以作用于变量名、类型名、表达式或者函数；而<code>strlen</code>只能使用<code>char</code>类型字符串做参数，且必须是以<code>\0</code>结尾。对于一个<code>char</code>数组，<code>sizeof</code>返回的是该数组的总大小，而<code>strlen</code>返回的是该数组实际对应的字符串的长度（末尾的<code>\0</code>不计算在内）；对于一个<code>char*</code>字符串，<code>sizeof</code>在32位机器上恒定返回4，而<code>strlen</code>仍然返回字符串的实际长度。</li>
<li>最后，大部分程序在编译阶段做类型检测的时候就把<code>sizeof</code>的值计算过了（参考如下代码），而<code>strlen</code>必须是运行时才会计算出来。</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">add</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">sizeof</span><span class="p">(</span><span class="n">add</span><span class="p">());</span>
</span><span class='line'>    <span class="k">sizeof</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="k">sizeof</span> <span class="n">x</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上述代码中，在<code>main</code>函数的第一行，<code>sizeof(add())</code>会在编译时刻被替换为<code>sizeof(int)</code>然后得出结果4，不需要在运行时调用<code>add</code>函数。同理，<code>x=6</code>这句表达式也是不被执行的。所以在这两个表达式执行完成后，<code>x</code>的值仍然为0。另外，由于在编译时刻已经确定了值，所以<code>sizeof</code>的结果可以被用来作为定义静态数组的维数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试问题赏析：求1到N的和]]></title>
    <link href="http://smwlover.github.io/blog/2016/08/06/add-numbers/"/>
    <updated>2016-08-06T15:39:19+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/08/06/add-numbers</id>
    <content type="html"><![CDATA[<p>在面试中，我们可能会遇到一些“不走寻常路”的问题。这类问题看似简单，但是经常有许多奇葩的要求。比如我们之前讨论过的一个问题：输入两个<code>int</code>类型的整数<code>a</code>和<code>b</code>，输出二者的和，要求不能使用四则运算符。最后我们得出的解决方法是利用<a href="http://smwlover.github.io/blog/2016/05/20/binary-manipulation/">位运算</a>。今天我们再来讨论一道题目：<strong>输入一个<code>int</code>类型的正整数<code>n</code>，输出<code>1</code>到<code>n</code>的和，要求不能使用<code>*</code>、<code>/</code>、<code>for</code>、<code>while</code>、<code>if</code>、<code>else</code>、<code>switch</code>、<code>case</code>以及<code>?:</code>等关键字或运算符</strong>。</p>

<!--more-->


<p>我们可以思考一下，如果不考虑这些限制条件，我们应该怎么去做。能想到的方法无非三种：首先是直接输出结果<code>n*(n+1)/2</code>（但是出现了乘除法，不能用）；其次是利用循环（显然不能用）；最后是利用递归（递归需要用条件判断语句判断是否达到终止条件，所以不能用）。<br/>
其实，上面提到的“不能用”，指的是我们不能在程序中<strong>显式地</strong>使用。我们仍然可以<strong>隐式地</strong>使用它们，也就是<strong>让编译器代替我们实现循环或条件判断</strong>。如果能发现这一点，我们就可以想出很多解法来了，在这里列举其中四种。</p>

<h2>一、让编译器代替我们实现循环</h2>

<h3>方法一</h3>

<p>假设我们有一个类<code>Sum</code>，在我们执行语句<code>new Sum[n]</code>时，会调用<code>n</code>次类<code>Sum</code>的构造函数。我们可以在类<code>Sum</code>中声明两个静态成员变量<code>sum</code>和<code>n</code>，并且分别初始化为0和1。在<code>Sum</code>的构造函数中，我们可以令<code>sum+=n</code>，然后<code>n+=1</code>。这样在构造函数被调用<code>n</code>次之后，<code>Sum::sum</code>的值就是我们想要的结果。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Sum</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Sum</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">n</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">Sum</span><span class="o">::</span><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">Sum</span><span class="o">::</span><span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Sum</span><span class="o">*</span> <span class="n">dump</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sum</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Sum</span><span class="o">::</span><span class="n">sum</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">delete</span><span class="p">[]</span> <span class="n">dump</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这种方法需要我们理解什么是一个类的静态成员，还需要我们知道在通过<code>new</code>操作符为类的一个或多个实例动态分配内存空间的时候，类的构造函数是会被调用的。在用代码实现的时候，我们还需要清楚类的静态成员变量是如何初始化的。</p>

<p><div class="expand">关于<code>static</code>成员变量和函数的一些补充<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
☆静态成员不能在类定义内部初始化，只能在外部初始化。<br/>
☆静态成员函数没有<code>this</code>指针，它不能返回非静态成员，因为除了实例会调用它以外，类本身也可以调用。<br/>
☆静态成员之间可以相互访问，静态成员函数可以访问静态成员变量和静态成员函数。<br/>
☆非静态成员函数可以任意地访问静态成员函数和静态成员变量。<br/>
☆静态成员函数不能访问非静态成员函数和非静态成员变量。
</div></div></p>

<h2>二、让编译器代替我们实现条件判断</h2>

<h3>方法二</h3>

<p>我们知道，C++有一种语言特性叫做短路求值。具体来讲，在逻辑与操作符中，如果前面一个表达式值为<code>false</code>，不必对后面的表达式再做判断，直接返回<code>false</code>；在逻辑或操作符中，如果前面一个表达式值为<code>true</code>，不必对后面的表达式再做判断，直接返回<code>true</code>。我们可以发现，短路求值的效果和条件判断语句是很类似的。<br/>
假设我们用递归来实现求和的功能，递归函数为<code>getSum(int n)</code>，我们需要该函数达到以下效果：<code>n==0</code>的时候达到终止条件，不做递归调用；<code>n&gt;0</code>的时候递归调用<code>getSum(n-1)</code>。参考刚才提到的短路求值，我们可以写出表达式<code>n &amp;&amp; getSum(n-1)</code>，这个表达式刚好满足我们的要求。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">sum</span> <span class="o">+=</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>如果说上一种方法考察我们对静态成员变量的理解，这种方法则考察我们对短路求值这种语言特性的认识。</p>

<h3>方法三</h3>

<p>我们先观察一个表达式<code>!!n</code>。在<code>n==0</code>的时候，<code>!n</code>为<code>true</code>，<code>!!n</code>则为<code>false</code>，转化成整形则为<code>0</code>；在<code>n&gt;0</code>的时候，<code>!n</code>为<code>false</code>，<code>!!n</code>则为<code>true</code>，转化成整形则为<code>1</code>。也就是说，这个表达式在<code>n==0</code>的时候返回<code>0</code>，其余情况返回<code>1</code>。<br/>
在了解了这一点之后，我们可以写出下面的代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">getSumZero</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">Func</span><span class="p">)(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="n">Func</span> <span class="n">functions</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">getSumZero</span><span class="p">,</span> <span class="n">getSum</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">getSumZero</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span> <span class="o">+</span> <span class="n">functions</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;n-1&quot;</span><span class="o">&gt;!!</span><span class="n">n</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以看到，我们首先声明了两个函数，其中<code>getSumZero</code>对应递归的终止条件，而<code>getSum</code>则是递归的主函数。然后我们声明了一个由函数指针构成的数组<code>functions</code>，数组的长度为2，而数组的每个元素都是<code>Func</code>类型。根据之前我们定义的类型别名，我们知道<code>Func</code>类型实际上指的是一种函数指针类型，这种函数指针指向一个参数为<code>int</code>且返回值为<code>int</code>的函数。<br/>
在<code>getSum</code>函数的实现中，我们发现：当<code>n&gt;0</code>时，我们会调用<code>functions[1](n-1)</code>，这其实是对<code>getSum</code>自身的递归调用；当<code>n==0</code>时，调用的则是<code>getSumZero(n-1)</code>，这就是递归的终止条件。通过<code>!!n</code>的值，我们可以从数组中选择一个函数进行调用，实现了隐式的条件判断。<br/>
这种方法需要我们理解C++中布尔类型和整数类型之间是如何进行转换的，也需要我们对函数指针的使用方法有一个大致的了解。</p>

<h3>方法四</h3>

<p>这个方法总体上和上一种方法类似，但是没有使用函数指针，而是使用了类的继承与虚函数。代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span><span class="p">;</span>
</span><span class='line'><span class="n">A</span><span class="o">*</span> <span class="n">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">B</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span> <span class="k">return</span> <span class="n">n</span> <span class="o">+</span> <span class="n">arr</span><span class="p">[</span><span class="o">!!</span><span class="n">n</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">A</span><span class="p">();</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">B</span><span class="p">();</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getSum</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="k">delete</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以看到，我们定义了两个类<code>A</code>和<code>B</code>，其中<code>B</code>是<code>A</code>的子类。它们有一个虚成员函数<code>getSum</code>，其中<code>A::getSum</code>直接返回<code>0</code>，对应递归的终止条件；<code>B::getSum</code>覆盖了其父类的定义，对应递归的主函数。程序定义了一个<code>A*</code>类型的数组，其第一个元素指向一个<code>A</code>类型的实例，第二个元素指向一个<code>B</code>类型的实例。由于<code>getSum</code>是虚函数，程序会根据指针实际指向的类型（动态类型），而不是其声明时的类型<code>A*</code>（静态类型）进行调用。<br/>
其实，这个方法本质上与上一种方法是相同的，因为虚函数（多态）的实现方式是虚表，而虚表实际上就是由一些函数指针构成的。这种方法需要我们对类的继承、虚函数、多态等知识有一个清晰的了解，这些内容是C++的精华，在面试中也是必不可少的。</p>

<h2>总结</h2>

<p>通过上面几种方法我们可以发现，这个问题表面上是让我们实现一个求和的功能，实际上考察的是我们对C++一些重要的语言特性的了解程度，以及我们从这些语言特性入手解决问题的创新能力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试常见问题盘点：双指针]]></title>
    <link href="http://smwlover.github.io/blog/2016/06/09/two-pointers/"/>
    <updated>2016-06-09T15:22:29+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/06/09/two-pointers</id>
    <content type="html"><![CDATA[<p>在关于数组的问题中，有那么一类问题，它们可以利用双指针（Two Pointers）方法解决。需要说明的一点是，这里提到的“指针”不一定指的是严格意义上的指针，在很多场合下，它被用来代指用来进行遍历的下标<code>i</code>或<code>j</code>。所以“双指针”问题其实就是利用两个下标<code>i</code>和<code>j</code>对数组进行遍历的一类问题。本文就来列举一部分面试中经常涉及到的“双指针”问题。</p>

<!--more-->


<h2>类别一</h2>

<h3>1、Two Sum问题</h3>

<p><strong>问题：</strong>输入一个排好序的<code>int</code>类型数组<code>arr</code>，以及一个整数<code>target</code>。判断<code>arr</code>中是否存在两个元素，它们的和等于<code>target</code>。<br/>
<strong>解法：</strong>这个问题是双指针问题中比较基础并且比较典型的一类问题了。我们定义两个指针<code>i</code>和<code>j</code>，分别从数组的左右端点开始遍历，在遍历时，观察<code>arr[i]</code>和<code>arr[j]</code>的和<code>sum</code>。如果<code>sum &gt; target</code>，则<code>j--</code>；如果<code>sum &lt; target</code>，则<code>i++</code>。如果<code>i</code>和<code>j</code>已经相遇但是仍未找到答案，则说明原数组不存在这样的两个元素。<br/>
<strong>分析：</strong>相比起<code>O(n2)</code>的暴力解法，双指针的方法进行了剪枝，将时间复杂度减少到了<code>O(n)</code>。</p>

<h3>2、判断一个字符串是否是回文字符串</h3>

<p><strong>问题：</strong>输入一个字符串<code>str</code>，判断它是不是回文字符串。<br/>
<strong>解法：</strong>仍然是定义两个指针<code>i</code>和<code>j</code>，分别从字符串的左右端点开始遍历。在每个迭代中，观察<code>str[i]</code>和<code>str[j]</code>是否相等，并且令<code>i</code>右移一格、<code>j</code>左移一格，直到两个指针相遇。<br/>
<strong>分析：</strong>同类的题目还有在<code>O(n)</code>时间内原地反转字符串等。</p>

<h3>3、容积最大的容器</h3>

<p><strong>问题：</strong>Given <code>n</code> non-negative integers <code>a1</code>, <code>a2</code>, &hellip;, <code>an</code>, where each represents a point at coordinate <code>(i, ai)</code>. <code>n</code> vertical lines are drawn such that the two endpoints of line <code>i</code> is at <code>(i, ai)</code> and <code>(i, 0)</code>. Find two lines, which together with x-axis forms a container, such that the container contains the most water. <em>Note: You may not slant the container.</em><br/>
<strong>解法：</strong>暴力解法的时间复杂度为<code>O(n2)</code>，能不能像前面提到的Two Sum问题一样进行剪枝呢？答案是肯定的。<br/>
我们在遍历的过程中用<code>maxWater</code>记录当前最大的容积。假设容器的两条边是<code>0</code>和<code>n-1</code>号，我们可以算出一个容量<code>F(0,n-1) = height[0] * (n-1)</code>，将其作为<code>maxWater</code>的初始值。<br/>
我们注意到：<strong>如果<code>0</code>号边的高度不大于<code>n-1</code>号边的高度，所有以<code>0</code>号边为左侧边的容器容积都比<code>F(0,n-1)</code>小。</strong>因为所有这样的容器高度肯定不大于<code>height[0]</code>，但是宽度却一定小于<code>n-1</code>，所以其容积肯定小于<code>F(0,n-1)</code>，所以我们不需要对这些情况进行枚举。同理，如果<code>0</code>号边的高度大于<code>n-1</code>号边的高度，我们就不需要对其他以<code>n-1</code>号边作为右侧边的容器进行枚举了。<br/>
这样我们就完成了剪枝。我们定义两个指针<code>i</code>和<code>j</code>，分别从数组的左右端点开始遍历。每个迭代，先算出<code>F(i,j)</code>并更新<code>maxWater</code>的值，然后根据前面得出的结论：如果<code>height[i]</code>不大于<code>height[j]</code>，直接<code>i++</code>；否则直接<code>j--</code>。显然，这种方法的时间复杂度是<code>O(n)</code>。</p>

<p><figure class='code'><figcaption><span>Container With Most Water </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">maxArea</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">maxWater</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p2</span><span class="p">){</span>
</span><span class='line'>    <span class="n">maxWater</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">maxWater</span><span class="p">,</span> <span class="n">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">p1</span><span class="p">],</span> <span class="n">height</span><span class="p">[</span><span class="n">p2</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="n">p2</span><span class="o">-</span><span class="n">p1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">p2</span><span class="p">])</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">p2</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">maxWater</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>总结</h3>

<p>这一类的双指针问题有一个共同之处：分别从数组的左右端点开始遍历。其中，问题二需要这样做，是因为需要研究字符串本身的对称性；问题一和问题三需要这样做，是对暴力搜索进行剪枝的结果。</p>

<h2>类别二</h2>

<h3>1、删除数组中所有值等于<code>val</code>的元素</h3>

<p><strong>问题：</strong>Given an array and a value, remove all instances of that value in place and return the new length. <em>Note: The order of elements can be changed. It doesn&rsquo;t matter what you leave beyond the new length.</em><br/>
<strong>解法：</strong>通常我们会使用一个新的数组来存储那些不被删除的数，这样就能够很顺利的完成任务。但是实际上由于在这个过程中，新数组的大小是肯定会小于原本数组中已经处理过的数的数量的，所以我们就可以直接利用原本数组中已经处理过的数的位置，避免再开一个额外的数组。所以这里就用到了一种思想，定义两个指针<code>i</code>和<code>cnt</code>，<code>i</code>是遍历用的指针，<code>cnt</code>指向新数组的下一个位置。每当<code>i</code>遍历到一个符合条件的元素，就通过<code>arr[cnt++] = arr[i]</code>将其加入到新数组中。此方法的时间复杂度是<code>O(n)</code>。</p>

<p><figure class='code'><figcaption><span>Remove Element </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">removeElement</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>            <span class="n">nums</span><span class="p">[</span><span class="n">cnt</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>2、奇偶分类</h3>

<p><strong>问题：</strong>输入一个数组，将其进行重排，使得所有奇数位于所有偶数的前面。<br/>
<strong>解法：</strong>我们定义两个指针<code>i</code>和<code>j</code>，其中<code>j</code>是遍历用的指针，<code>i</code>则记录了当前数组奇数部分的下一个位置。每当<code>j</code>遍历到一个奇数时，就交换<code>arr[i]</code>和<code>arr[j]</code>的值，然后<code>i++</code>。这样当数组遍历完毕后，<code>arr[0..i-1]</code>就存储了所有的奇数，剩下的部分则存储了所有的偶数。</p>

<p><figure class='code'><figcaption><span>Classify Odd And Even Numbers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">num</span><span class="p">;</span> <span class="c1">//输入数组长度</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">arr</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">num</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="c1">//依次输入数组元素</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//奇数部分的下一个位置</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">num</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0x1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">num</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>3、替换空格</h3>

<p><strong>问题：</strong>实现一个函数，把字符串中的每个空格都替换成<code>"%20"</code>。<br/>
<strong>解法：</strong>如果是暴力解法，从前往后遍历字符串，在遍历到空格的时候，就将后面的所有字符后移两格，这样的方法在最坏情况下（字符串中都是空格）是<code>O(n2)</code>的。我们有更快的解法，其时间复杂度为<code>O(n)</code>，每个字符只需要向后移动一次，那就是“从后往前替换字符串”。<br/>
首先遍历一遍原字符串确认有多少个空格，这样我们就得到了新字符串的长度。然后我们令<code>p1</code>从原字符串的末尾往前遍历，<code>p2</code>指向新字符串中已经被替换好的部分的前一个元素。如果<code>arr[p1]</code>不是空格，直接将其拷贝到<code>arr[p2]</code>的位置，然后<code>p2</code>左移一格；如果<code>arr[p1]</code>是空格，则在<code>p2</code>位置依次插入<code>0</code>、<code>2</code>和<code>%</code>。</p>

<p><figure class='code'><figcaption><span>Replace Space </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">replaceSpace</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">arr</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">spaceCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>            <span class="n">spaceCount</span><span class="o">++</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">2</span><span class="o">*</span><span class="n">spaceCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">arr</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p2</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p2</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">p1</span><span class="p">];</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">--</span><span class="p">,</span> <span class="n">p2</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p2</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p2</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;2&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p2</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;%&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>总结</h3>

<p>这一类的双指针问题有一个共同之处：其中一个指针用于遍历，另一个指针指向数组已完成部分的下一个元素。这种方法可以节省空间，或者减少数据重复移动的次数。</p>

<h2>类别三</h2>

<h3>1、无重复字符的最长子字符串</h3>

<p><strong>问题：</strong>Given a string, find the length of the longest substring without repeating characters. <em>For example, the longest substring without repeating letters for</em> <code>"abcabcbb"</code> <em>is</em> <code>"abc"</code><em>, which the length is 3. For</em> <code>"bbbbb"</code> <em>the longest substring is</em> <code>"b"</code><em>, with the length of 1.</em><br/>
<strong>解法：</strong>利用<code>p1</code>和<code>p2</code>两个指针构成一个窗口，其中<code>p1</code>指向窗口的第一个元素，<code>p2</code>指向窗口最后一个元素的下一个元素。我们利用一个hashmap记录窗口中各个字符的出现次数，并且保证窗口中没有重复字符。<br/>
具体做法是：观察即将加入窗口中的字符<code>str[p2]</code>。如果该字符没有在窗口中出现过，我们可以直接将该字符加入窗口中，即<code>p2++</code>，同时调整hashmap的记录；如果该字符在窗口中出现过，那么我们令<code>p1++</code>来缩小窗口的大小，同时调整hashmap的记录，直到该字符没有在窗口中出现为止。在遍历的过程中，记录窗口达到的最大长度。算法的时间复杂度为<code>O(n)</code>。</p>

<p><figure class='code'><figcaption><span>Longest Substring Without Repeating Characters </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'><span class="n">unordered_map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hashmap</span><span class="p">;</span>
</span><span class='line'><span class="n">hashmap</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">p1</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span> <span class="c1">//首元素加入哈希表。</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">maxLength</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">curLength</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p2</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">size</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hashmap</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">p2</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">p2</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p2</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">curLength</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">maxLength</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">maxLength</span><span class="p">,</span> <span class="n">curLength</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">p1</span><span class="p">]]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">curLength</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">maxLength</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>2、Minimum Window Substring</h3>

<p><strong>问题：</strong>Given a string <code>S</code> and a string <code>T</code>, find the minimum window in <code>S</code> which will contain all the characters in <code>T</code> in complexity <code>O(n)</code>. For example,  <br/>
<code>
<span>S = &ldquo;ADOBECODEBANC&rdquo;</span><br/>
<span>T = &ldquo;ABC&rdquo;</span>
</code><br/>
Minimum window is <code>"BANC"</code>.<br/>
<em>Note: If there is no such window in</em> <code>S</code> <em>that covers all characters in</em> <code>T</code><em>, return the empty string</em> <code>""</code><em>. If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in</em> <code>S</code><em>.</em><br/>
<strong>解法：</strong>我们仍然利用两个指针<code>p1</code>和<code>p2</code>组成一个窗口，其中<code>p1</code>指向窗口的第一个元素，<code>p2</code>指向窗口最后一个元素的下一个元素。我们还要定义一个哈希表<code>set</code>，表示<code>T</code>中出现过哪些字符，如果遍历到没有在<code>T</code>中出现过的字符，我们可以将该字符跳过，继续遍历下一个字符。<br/>
为了记录窗口中的字符和<code>T</code>中字符的匹配情况，我们定义一个整数<code>count</code>，表示<code>T</code>中待匹配的字符数量，<code>count</code>等于<code>0</code>说明<code>T</code>中所有字符都已经匹配上；另外，定义一个哈希表<code>num</code>，表示每个字符的待匹配次数，比如当<code>num['a']</code>等于<code>2</code>时，说明窗口中还要再包括进两个<code>'a'</code>才能满足题意。需要注意的是，<strong><code>num</code>中字符对应的待匹配次数可以为负，负数说明该字符过匹配（出现次数太多了）。</strong></p>

<p>在每次遍历中，我们首先检查<code>count</code>是否大于<code>0</code>。<br/>
如果<code>count</code>大于<code>0</code>，说明还有字符待匹配，我们需要将<code>s[p2]</code>加入到窗口中，并且令<code>num[s[p2]]--</code>。如果该字符还没有过匹配（<code>num[s[p2]]&gt;=0</code>），那么将该字符加入窗口后，待匹配的字符数量减少<code>1</code>，所以<code>count--</code>；如果<code>s[p2]</code>过匹配（<code>num[s[p2]]&lt;0</code>），那么将该字符加入窗口后并不能使待匹配的字符数量减少，所以<code>count</code>不发生变化。<br/>
如果<code>count</code>等于<code>0</code>，说明已经找到了一个符合题意的窗口，我们需要将记录当前窗口的长度，然后继续向下搜索：从窗口中取出<code>s[p1]</code>，并且令<code>num[s[p1]]++</code>。如果发现<code>num[s[p1]]&gt;0</code>，说明该字符从匹配状态变成了未匹配状态，所以待匹配的字符数量增加<code>1</code>，即<code>count++</code>；如果发现<code>num[s[p1]]&lt;=0</code>，说明该字符仍是匹配状态，待匹配的字符数量并没有增加，所以<code>count</code>不发生变化。</p>

<p><figure class='code'><figcaption><span>Minimum Window Substring </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">string</span> <span class="nf">minWindow</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">,</span> <span class="n">string</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">unordered_map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">charNum</span><span class="p">;</span>
</span><span class='line'><span class="n">unordered_map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">charSet</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">charSet</span><span class="p">[</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">charNum</span><span class="p">[</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">minLen</span> <span class="o">=</span> <span class="mi">2147483647</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">minStart</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p2</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">char</span> <span class="n">chr</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">p2</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">charSet</span><span class="p">[</span><span class="n">chr</span><span class="p">]){</span>
</span><span class='line'>            <span class="n">charNum</span><span class="p">[</span><span class="n">chr</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">charNum</span><span class="p">[</span><span class="n">chr</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p2</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">p2</span> <span class="o">-</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">len</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">minLen</span><span class="p">){</span>
</span><span class='line'>            <span class="n">minLen</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>            <span class="n">minStart</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">chr</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">p1</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">charSet</span><span class="p">[</span><span class="n">chr</span><span class="p">]){</span>
</span><span class='line'>            <span class="n">charNum</span><span class="p">[</span><span class="n">chr</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">charNum</span><span class="p">[</span><span class="n">chr</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">minLen</span> <span class="o">==</span> <span class="mi">2147483647</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">minStart</span><span class="p">,</span> <span class="n">minLen</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>总结</h3>

<p>这一类的双指针问题主要是利用两个指针构造一个窗口，然后对窗口的内容进行讨论。</p>
]]></content>
  </entry>
  
</feed>
