<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 笔记 | 美柑の部屋]]></title>
  <link href="http://smwlover.github.io/blog/categories/bi-ji/atom.xml" rel="self"/>
  <link href="http://smwlover.github.io/"/>
  <updated>2016-05-21T22:55:49+08:00</updated>
  <id>http://smwlover.github.io/</id>
  <author>
    <name><![CDATA[smwlover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[位运算的Tricks]]></title>
    <link href="http://smwlover.github.io/blog/2016/05/20/binary-manipulation/"/>
    <updated>2016-05-20T20:08:18+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/05/20/binary-manipulation</id>
    <content type="html"><![CDATA[<p>很多初学程序设计的人不熟悉位运算，或者只是听说过名字，没有真正在程序中使用过。实际上，位运算不仅可以大大提升程序的执行速度，而且可以很巧妙地解决一些普通方法无法解决的问题。这篇文章就来盘点几个常见的位运算tricks。</p>

<!--more-->


<h2>一、交换两个整数</h2>

<p>如何交换两个整数呢？不少人的第一反应是下面的代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>如果对问题做一些限制：不能引入临时变量。那么很多人会进一步想到下面的代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>但是上面的代码有一个问题：当a和b太大的时候，有可能在执行<code>a = a + b</code>一行的之后直接溢出。有没有可以避免溢出，并且不引入临时变量的方法呢？答案就是利用异或运算。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面的代码为什么是正确的？我们要从异或谈起。<strong>异或运算满足三个性质：首先，一个数异或0等于它本身；其次，一个数异或它本身等于0；最后，异或满足交换律和结合律。</strong><br/>
所以，第二句话中的<code>b</code>其实等于<code>(a ^ b) ^ b = a ^ (b ^ b) = a ^ 0 = a</code>。<br/>
同理，第三句话中的<code>a</code>其实等于<code>(a ^ b) ^ a = b ^ (a ^ a) = b ^ 0 = b</code>。<br/>
这就达到了交换两个整数的目的。</p>

<h2>二、判断整数二进制表示中1的个数</h2>

<p>首先我们来观察<code>a &amp; (a - 1)</code>这个表达式干了什么。<br/>
如果<code>a</code>的二进制最后一位是1，那么将<code>a</code>减一，即最后一位变为0，而前面其他位都不变，将<code>a</code>和<code>a - 1</code>按位与，也就相当于消掉了<code>a</code>的最后一个1。<br/>
如果<code>a</code>的二进制最后一位为0，且从右往左数第m位第一次出现1，那么将<code>a</code>减一，则第m位由1变成0，m右面的所有位都变成1，m左边的所有位不变。将<code>a</code>和<code>a - 1</code>按位与，还是相当于消掉了<code>a</code>的最后一个1。<br/>
<strong>总结：<code>a &amp; (a - 1)</code>用来消去<code>a</code>的二进制表示的最右边的1。</strong><br/>
所以，为了判断<code>a</code>的二进制表示中1的个数，我们可以一直让<code>a</code>与<code>a - 1</code>进行按位与，一直消掉最右边的1，直到所有的1全部消掉为止。这个判断方法对于负数好像依然有效。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="p">){</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>扩展：</strong>如何判断一个整数是否是2的整数次方？</p>

<p><div class="expand">思路与答案<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
一个正整数是2的整数次方的充要条件是其二进制表示中只有1个1。弄清楚这一点，写出对应的代码就很简单了。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">((</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
</div></div></p>

<p><strong>扩展：</strong>输入一个非负整数<code>n</code>，我们要输出一个大小为<code>n+1</code>的数组<code>arr</code>，其中<code>arr[i]</code>表示<code>i</code>的二进制表示中所含有的1的个数。</p>

<p><div class="expand">思路与答案<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
我们很容易想出一个时间复杂度为<code>O(n*sizeof(int))</code>的方法，但是我们有更好的方法，可以在<code>O(n)</code>的时间内仅遍历一次即可得出结果。那就是利用动态规划。<br/>
回想我们求一个数二进制表示方式中1的数量时采取的方法，很容易列出状态转移方程：<br/>
<code>F(n) = 1 + F(n &amp; (n-1)) (n > 0)</code>，以及<code>F(0) = 0</code>。对于正整数而言，<code>n &amp; (n-1)</code>一定小于<code>n</code>，所以我们列出的状态转移方程是可行的。<br/>
对应的代码如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">countBits</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">(</span><span class="n">num</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div></div></p>

<h2>三、数组中只出现一次的元素</h2>

<p>有一个<code>int</code>类型的数组<code>arr</code>，其中除了一个元素只出现一次之外，其他的每个元素都出现正好两次。将这个单独的元素找出来。要求<code>O(n)</code>的时间复杂度以及<code>O(1)</code>的空间复杂度。<br/>
这个题仍然是利用异或运算的性质，我们只需要令<code>res = 0</code>，然后令<code>res</code>依次异或<code>arr</code>中的每个元素。这样，<code>arr</code>中成对出现的元素都会异或成0，最后剩余的就是那个单独的元素。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">singleNumber</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">^=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>扩展：</strong>还是上面那个数组<code>arr</code>，这次变成了有两个单独的元素。需要把这两个单独的元素全部找出来。</p>

<p><div class="expand">思路与答案<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
解题的基本思路还是基于异或。假设两个单独的元素是<code>a</code>和<code>b</code>：<br/>
我们按照与上面相同的方法，将数组中所有的元素依次异或一遍，可以知道，得到的值是<code>a ^ b</code>。<br/>
由于<code>a</code>不可能等于<code>b</code>，所以我们知道得到的<code>a ^ b</code>的二进制表示中肯定至少有1位是1。我们找到这样的一位，可以知道，<code>a</code>和<code>b</code>的二进制表示在这一位是不同的。<br/>
然后我们遍历原数组，根据原数组的每个元素的这一位是不是1，我们可以将原数组分为两部分，并且<code>a</code>和<code>b</code>肯定处于不同的部分，且每个部分都满足“所有元素都出现两次，只有一个元素出现一次”的性质。<br/>
到此为止，这个问题就转化为了之前的问题。只需要对每个部分异或一遍就可以了。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">FindNumsAppearOnce</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">,</span><span class="kt">int</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">num1</span><span class="p">,</span><span class="kt">int</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">num2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">num1</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="n">num2</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">exclusiveRes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">exclusiveRes</span> <span class="o">^=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">differentBit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">((</span><span class="n">exclusiveRes</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">differentBit</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">differentBit</span><span class="o">++</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">res1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">res2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">compareFlag</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">differentBit</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">data</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">compareFlag</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res1</span> <span class="o">^=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">res2</span> <span class="o">^=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="o">*</span><span class="n">num1</span><span class="p">)</span> <span class="o">=</span> <span class="n">res1</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="o">*</span><span class="n">num2</span><span class="p">)</span> <span class="o">=</span> <span class="n">res2</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div></div></p>

<p><strong>扩展：</strong>还是上面那个数组<code>arr</code>，这次除去一个单独的元素之外，每个元素都出现正好三次。找出那个单独的元素。</p>

<p><div class="expand">思路与答案<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
原则上来讲，只要元素出现的次数为偶数，都可以用异或的方法解决，但是如果是三次就不可以了，我们要寻求新的解决方法。<br/>
由于<code>int</code>类型有32位，我们可以统计每一位上1的出现次数。如果没有那个单独的元素，那么每一位上1的出现次数肯定是3的倍数。现在加入了那个单独的元素，一定有某些位上1的出现次数是3的倍数加1。<br/>
所以我们可以将所统计的每一位上1的出现次数对3取余。如果余数为0，说明单独的元素这一位并不是1；如果余数为1，说明单独的元素这一位是1。这样我们就找到了那个单独的元素所有是1的二进制位，进而还原出该元素。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">singleNumber</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">mark</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">32</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">j</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">mark</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">32</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">mark</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div></div></p>

<h2>四、求一个数组的所有子集</h2>

<p>已知一个数组中没有相同的元素，且该数组长度不大于32，求它的所有子集，且每个子集中的元素按照从小到大的顺序排列。<br/>
通过集合论的知识，我们知道对于一个集合来说，若其元素个数为<code>n</code>，则其子集的个数为<code>2 ^ n</code>。对于任意一个子集，我们用一个长度为<code>n</code>的二进制串来表示元素的状态。如果第<code>i</code>位是1，说明原数组的第<code>i</code>个元素位于当前子集中，否则说明没有位于当前子集中。<br/>
因此我们可以枚举<code>0</code>到<code>2 ^ n - 1</code>，然后对其中的每一个数依次还原相应的子集。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">subsets</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">limit</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tp</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">i</span><span class="p">,</span> <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">p</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="n">tp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">now</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="o">++</span><span class="n">now</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">ret</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tp</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>扩展：</strong>给定一个9×9大小的<code>char</code>类型数组，代表一个尚未被填充的数独。其中<code>.</code>代表该位置为空位，<code>1-9</code>代表该位置有数字，判断这个数独是否是有效的。（需要注意的是，一个有效的数独不一定有解，只需要初始状态下被填充的格子满足数独的要求即可。）</p>

<p><div class="expand">思路与答案<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
这个题的关键在于对每行、每列和每个对角线分别记录数字<code>1-9</code>是否存在，我们当然可以用一个长度为9的<code>bool</code>类型数组去记录，但是更好的方法是只用一个<code>int</code>类型的整数去记录，其二进制表示的第0到8位分别代表<code>1-9</code>是否存在。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">getCell</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">i</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">j</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">bool</span> <span class="n">isValidSudoku</span><span class="p">(</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">board</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">col</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">row</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">cell</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">9</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">9</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mark</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">cellIndex</span> <span class="o">=</span> <span class="n">getCell</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">col</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mark</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mark</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">cell</span><span class="p">[</span><span class="n">cellIndex</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mark</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="n">col</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">|=</span> <span class="n">mark</span><span class="p">;</span>
</span><span class='line'>        <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">|=</span> <span class="n">mark</span><span class="p">;</span>
</span><span class='line'>        <span class="n">cell</span><span class="p">[</span><span class="n">cellIndex</span><span class="p">]</span> <span class="o">|=</span> <span class="n">mark</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div></div></p>

<p>上面的两个问题使我们意识到，我们可以利用二进制记录一个元素在或不在的状态，也就是建立一个简易的hashset。事实上，在海量数据的处理问题中，经常用到一种类似的方法：将一组有范围的数据中的每一个数据映射为内存中的一个bit，该方法叫做bitmap。<br/>
<strong>例题：</strong>我们有40亿个不重复的无序<code>unsigned int</code>数据，然后给定一个数，如何快速判断这个数是否在那40亿个数当中？</p>

<p><div class="expand">思路与答案<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
<code>unsigned int</code>类型整数的大小范围为<code>0</code>到<code>2 ^ 32 - 1</code>，也就是有<code>2 ^ 32</code>即4G种情况。<br/>
我们可以在内存中申请一块空间，空间的每一个bit代表一个整数，这样只需要4G / 8 = 512M的空间即可，是可以接受的。<br/>
我们将这些bit都初始化为0，然后我们遍历这40亿个整数，每遍历到一个，则将其对应的bit置为1。最后我们检查给定的数对应的bit：如果是0，说明该数不在那40亿个数中；否则说明在那40亿个数中。
</div></div></p>

<p><strong>扩展：</strong>如何在2.5亿个int中找出不重复的整数？</p>

<p><div class="expand">思路与答案<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
<code>int</code>类型的取值有<code>2 ^ 32</code>种情况，我们为每个数分配两个bit的空间，这样所消耗的内存即为4G / 4 = 1G，可以接受。<br/>
我们可以令00表示该整数没有出现过，01表示出现过一次，10表示出现过多次。每读入一个数，就更改相应位置的数值。最后遍历一遍这1G大小的空间，将值为01的位置对应的整数输出即可。
</div></div></p>

<h2>五、反转一个整数的二进制表示</h2>

<p>将一个<code>unsigned int</code>类型的二进制表示中的32位反转，并输出得到的新整数。以4位二进制为例，如果输入为1（二进制为<code>0001</code>），则输出为8（二进制为<code>1000</code>）。<br/>
我们可以定义一个变量<code>m = 0</code>存储结果，每次将<code>m</code>左移一位，然后取原数字<code>n</code>的最低位赋给<code>m</code>的最低位，最后将<code>n</code>右移一位。这样循环32次即为结果。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">uint32_t</span> <span class="nf">reverseBits</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">32</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">m</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">m</span> <span class="o">=</span> <span class="n">m</span> <span class="o">|</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>当然，关于这个问题，还有许许多多更加变态的方法。下面举一例不那么变态的：<br/>
反转一个数的二进制表示，其实可以用类似于归并排序的方法完成。第一步，将原数字的第1位和第2位、第3位和第4位……依次交换；第二步，将原数字的第1-2位与第3-4位、第5-6位与第7-8位……依次交换；第三步，将原数字的第1-4位和5-8位、第9-12位和13-16位……依次交换。依次类推，对于32位的<code>unsigned int</code>类型，仅需进行<code>log(32) = 5</code>次即可完成。这种思路写成代码更是十分工整：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">uint32_t</span> <span class="nf">reverseBits</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">reverseBits</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">uint32_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0x55555555</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xAAAAAAAA</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0x33333333</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xCCCCCCCC</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0x0F0F0F0F</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xF0F0F0F0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0x00FF00FF</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xFF00FF00</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0x0000FFFF</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xFFFF0000</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>六、格雷码</h2>

<p>在一组数的编码中，若任意两个相邻的代码只有一位二进制数不同，则称这种编码为格雷码。比如三位的典型格雷码序列为<code>000, 001, 011, 010, 110, 111, 101, 100</code>。现在输入一个整数<code>n</code>（不大于31），输出<code>n</code>位的典型格雷码序列。<br/>
我们不妨称<code>k</code>位的典型格雷码序列为<code>ans{k}</code>，如何由<code>ans{k-1}</code>得到<code>ans{k}</code>呢？<br/>
观察格雷码的规律我们可以发现，<code>ans{k}</code>的前半部分的最高位均为0，且除了最高位之外的部分与<code>ans{k-1}</code>完全相同；后半部分的最高位均为1，而除了最高位之外的部分正好和<code>ans{k-1}</code>成倒序关系。<br/>
通过这个规律，我们可以写出生成<code>n</code>位典型格雷码序列的递归版本和非递归版本。这里仅写出非递归版本：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">uint32_t</span> <span class="nf">reverseBits</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">grayCode</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">((</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">ans</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>七、不使用四则运算符实现加法</h2>

<p>考虑二进制下两个数相加的操作，其实分三步：<br/>
首先不考虑进位，完成两个数的加法运算，结果为<code>sum</code>；<br/>
然后只考虑进位，计算两个数相加之后的进位情况，结果为<code>carryOver</code>；<br/>
最后将<code>sum</code>和<code>carryOver</code>相加，注意这一步相当于递归调用，仍然是拆分成先不考虑进位计算加法，然后计算进位，最后二者相加这三步。递归的终止条件是<code>carryOver</code>的值是0。</p>

<p>那么如何用位操作实现第一步和第二步呢？<br/>
首先不考虑进位的情况下，0和0以及1和1都会得到0，而0和1以及1和0会得到1。这其实是二进制的异或运算。然后只考虑进位的情况下，只有1和1的情况下会进位，所以相当于是二进制的与运算之后左移一位。<br/>
我们可以列出表达式：<code>a + b = (a ^ b) + ((a &amp; b) &lt;&lt; 1)</code>。根据此表达式写出代码：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">Add</span><span class="p">(</span><span class="kt">int</span> <span class="n">num1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">carryOver</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span><span class="p">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">^</span> <span class="n">num2</span><span class="p">;</span>
</span><span class='line'>        <span class="n">carryOver</span> <span class="o">=</span> <span class="p">(</span><span class="n">num1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">num2</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">num1</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>        <span class="n">num2</span> <span class="o">=</span> <span class="n">carryOver</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">num2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">num1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>扩展：</strong><code>(x &amp; y) + ((x ^ y) &gt;&gt; 1)</code>是干什么用的？</p>

<p><div class="expand">思路与答案<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
<code>x &amp; y</code>是取二者相同的位与，得到的结果是二者相同的位之和的一半。<br/>
<code>x ^ y</code>是取二者不同的位之和，所以<code>(x ^ y) >> 1</code>是二者不同的位之和的一半。<br/>
所以，上面两个表达式相加，其实就是取<code>x</code>和<code>y</code>的平均数。
</div></div></p>

<h2>总结</h2>

<p>本篇文章总结了二进制和位运算的一些用途。其实，位运算还有很多其他的妙用，包括快速幂算法、树状数组等。有时间我会继续在博客上介绍这些内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress插件开发：点击展开与折叠]]></title>
    <link href="http://smwlover.github.io/blog/2016/05/17/expand-plugin/"/>
    <updated>2016-05-17T22:07:17+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/05/17/expand-plugin</id>
    <content type="html"><![CDATA[<p>对于我的每一篇博文，一定存在那么一坨内容，有些人想去了解，而有些人不想去了解。如果这一坨内容直接显示在网页上，对于那些不想去了解的人未免是一种煎熬。在这种情况下，给读者一个可以将这些内容展开与折叠的按钮是再好不过的选择了。想了解的人，点击“展开”按钮再去阅读就可以；不想了解的人就不需要点击“展开”按钮，也不需要忍受这种煎熬了。这次我就开发了一个用来实现这种功能的插件。</p>

<!--more-->


<p>之前我开发的几款插件都是<code>Tag</code>型插件，但是这次<code>Tag</code>型插件就不能实现我们想要的功能了。我们需要使用<code>Block</code>型插件（姑且命名为<code>{% expand %}</code>），将要显示的内容用<code>{% expand title %}</code>和<code>{% endexpand %}</code>包裹起来。</p>

<h2>Javascript部分</h2>

<p>为了实现显示和隐藏效果，我用到了一些jQuery相关的函数。这些函数包括：<br/>
<code>$(this).next()</code>：获取当前对象的下一个兄弟对象；<br/>
<code>$(this).parent()</code>：获取当前对象的父级对象；<br/>
<code>$(this).html()</code>：获取当前对象显示的内容；<br/>
<code>$(this).html("text")</code>：将当前对象显示的内容修改为<code>text</code>；<br/>
<code>$(this).toggle()</code>：切换当前对象的显示与隐藏状态（<code>display</code>属性）；<br/>
<code>$(this).click(function(){})</code>：定义当前对象被点击时执行的函数。<br/>
有了上面这些内容作为基础，我们可以想象出对应的html代码的结构。首先加入一个按钮（假设该按钮拥有属性<code>class="expandtitle"</code>），然后在该按钮之后加入一个<code>&lt;div&gt;&lt;/div&gt;</code>块，二者位于同一层级。<br/>
我们可以在<code>source/javascripts/octopress.js</code>文件中找到<code>$('document').ready(...)</code>一行，加入下面的代码：</p>

<p><figure class='code'><figcaption><span>octopress.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nb">document</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//该函数中已经有了一些内容，不用管它，直接在这些内容后面添加。&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">//Expand:</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;.</span><span class="nx">expandtitle</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">next</span><span class="p">().</span><span class="nx">toggle</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">content</span> <span class="o">==</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">展开</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">隐藏</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">展开</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这段代码指的是对所有<code>class="expandtitle"</code>的对象，添加一个点击时触发的函数：该函数切换了当前对象下一个兄弟对象的显示与隐藏状态，并且修改了当前对象对应的html文本。</p>

<h2>插件实现部分</h2>

<p>在插件目录下新建<code>expand.rb</code>，之前已经说过了，我们新建的类需要继承自<code>Liquid::Block</code>。我参照了<code>blockquote</code>插件的实现方法，首先在<code>initialize</code>函数中通过变量<code>markup</code>获取<code>title</code>部分，然后在<code>render</code>函数中通过调用<code>super</code>获得已经解析好的<code>content</code>部分，最后将两部分整合到一段html代码中。完整的代码如下：</p>

<p><figure class='code'><figcaption><span>expand.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class Expand &amp;lt; Liquid::Block</span>
</span><span class='line'><span class="sr">    def initialize(tag_name, markup, tokens)</span>
</span><span class='line'><span class="sr">        str = &amp;ldquo;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="sr">&amp;rdquo;.strip</span>
</span><span class='line'><span class="sr">        @title = str</span>
</span><span class='line'><span class="sr">        super</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;&amp;lt;div class=</span><span class="se">\&quot;</span><span class="s2">expand</span><span class="se">\&quot;</span><span class="s2">&amp;gt;</span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2">&amp;lt;a href=</span><span class="se">\&quot;</span><span class="s2">javascript:void(0)</span><span class="se">\&quot;</span><span class="s2"> style=</span><span class="se">\&quot;</span><span class="s2">float: right;</span><span class="se">\&quot;</span><span class="s2"> class=</span><span class="se">\&quot;</span><span class="s2">expandtitle</span><span class="se">\&quot;</span><span class="s2">&amp;gt;展开&amp;lt;/a&amp;gt;&amp;lt;div class=</span><span class="se">\&quot;</span><span class="s2">expandcontent</span><span class="se">\&quot;</span><span class="s2"> style=</span><span class="se">\&quot;</span><span class="s2">display: none;</span><span class="se">\&quot;</span><span class="s2">&amp;gt;</span><span class="si">#{</span><span class="k">super</span><span class="si">}</span><span class="s2">&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;expand&amp;rsquo;, Jekyll::Expand)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在对应的html代码中，我用<code>&lt;a&gt;&lt;/a&gt;</code>表示按钮，该按钮拥有如下属性：<br/>
<code>href="javascript:void(0)"</code>：这其实是一个死链接，不指向任何地方。其实不加这句话，代码也可以正常工作，但是鼠标移到该按钮上不会显示出手形。给该按钮添加一个超链接，可以让鼠标移动到上面的时候显示出手形，更加符合用户的习惯。<br/>
<code>style="float: right;"</code>：这段代码使得该按钮一直位于一行的最右侧。<br/>
<code>class="expandtitle"</code>：对应我们在<code>source/javascripts/octopress.js</code>文件中增加的代码，使该按钮在点击时触发效果。</p>

<p>按钮的下一个兄弟对象则是需要隐藏或展开的部分，我用<code>&lt;div&gt;&lt;/div&gt;</code>表示，并且<code>style="display: none;"</code>保证其初始状态是隐藏的。</p>

<h2>样式表调节部分</h2>

<p>照例，样式表调节的部分仍在<code>_styles.scss</code>文件中完成，每个人可以根据自己的喜好定义<code>.expand</code>和<code>.expandcontent</code>的样式。我定义的样式如下：</p>

<p><div class="expand">定制<code>.expand</code>和<code>.expandcontent</code>的样式<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
<figure class='code'><figcaption><span>_styles.scss </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">//Expand Plugin:</span>
</span><span class='line'><span class="nc">.expand</span><span class="p">{</span>
</span><span class='line'>        <span class="na">border-width</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-style</span><span class="o">:</span> <span class="no">solid</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-color</span><span class="o">:</span> <span class="mh">#bbbbbb</span><span class="p">;</span>
</span><span class='line'>        <span class="na">background-color</span><span class="o">:</span> <span class="mh">#eeeeee</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-radius</span><span class="o">:</span> <span class="mi">2</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>        <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.expandcontent</span><span class="p">{</span>
</span><span class='line'>        <span class="na">margin</span><span class="o">:</span> <span class="mi">2</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-top-style</span><span class="o">:</span> <span class="no">dashed</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-top-color</span><span class="o">:</span> <span class="mh">#bbbbbb</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-top-width</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div></div></p>

<p>有些人可能想将一段行内代码或整个代码段隐藏起来，这当然是可以的，但是它们显示的外观可能并不令人满意。我们可以在<code>_styles.scss</code>文件中，定制<code>div.expand</code>类型元素或<code>.expandcontent</code>类型元素中的行内代码或代码段的样式表：</p>

<p><div class="expand">定制行内代码或代码段的样式<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
<figure class='code'><figcaption><span>_styles.scss </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.expandcontent</span> <span class="o">&gt;</span> <span class="nt">figure</span><span class="nc">.code</span><span class="p">{</span>
</span><span class='line'>        <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">0</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.expandcontent</span> <span class="o">&gt;</span> <span class="nt">code</span><span class="o">,</span> <span class="nt">div</span><span class="nc">.expand</span> <span class="o">&gt;</span> <span class="nt">code</span><span class="p">{</span>
</span><span class='line'>        <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="p">;</span>
</span><span class='line'>        <span class="na">background</span><span class="o">:</span> <span class="mh">#fff</span><span class="p">;</span>
</span><span class='line'>        <span class="na">font-size</span><span class="o">:</span> <span class="mf">.8</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>        <span class="na">line-height</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>        <span class="na">color</span><span class="o">:</span> <span class="mh">#555</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="mh">#ddd</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-radius</span><span class="o">:</span> <span class="mf">.4</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>        <span class="na">padding</span><span class="o">:</span> <span class="mi">0</span> <span class="mf">.3</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>        <span class="na">margin</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div></div></p>

<h2>局限性</h2>

<p>插件的基本开发过程大致就是这样，就像上面所说的，该插件支持将一些内容折叠起来。可折叠的内容包括一段文本、一张图片或者一段代码段（因为Octopress支持插件嵌套）。但是该插件有一点局限性存在：<br/>
在本插件内部，除去用<code>{% plugin_name parameters %}</code>调用插件的语法之外，其余的markdown语法（包括用两个空格换行，或者用三个反引号引用一段代码段）都不适用了。笔者原以为在调用完父类的<code>super</code>函数后，这类语法同样也可以被转化为相应的html代码，但是好像并不是这样，貌似这类语法的解析方式和普通的插件是不一样的。有兴趣的读者可以在代码中加上<code>print super</code>并调用<code>rake generate</code>查看一下输出结果，<del>反正我是不知道为什么会有那样的输出</del>。<br/>
在这里，我提供了几种<span class="mask">曲线救国的</span>方案来解决上面的问题：<br/>
1. 要在本插件内部换行，直接写<code>&lt;br/&gt;</code>吧；<br/>
2. 要在本插件内部添加代码段，不要用三个反引号，改用<code>codeblock</code>吧；<br/>
3. 要在本插件内部添加行内代码，不要用反引号，直接写成<code>&lt;code&gt;...&lt;/code&gt;</code>吧，或者把下面的<code>code.rb</code>文件加入到插件目录下后，用<code>{% code ... %}</code>吧。</p>

<p><figure class='code'><figcaption><span>code.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class CodeTag &amp;lt; Liquid::Tag</span>
</span><span class='line'><span class="sr">    def initialize(tag_name, markup, tokens)</span>
</span><span class='line'><span class="sr">        @code = &amp;ldquo;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="sr">&amp;rdquo;.strip</span>
</span><span class='line'><span class="sr">        super</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;&amp;lt;code&amp;gt;</span><span class="si">#{</span><span class="vi">@code</span><span class="si">}</span><span class="s2">&amp;lt;/code&amp;gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;code&amp;rsquo;, Jekyll::CodeTag)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>最终效果</h2>

<p><div class="expand">开发感想<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
总体来讲，开发这个插件的重点还是html层次结构以及jQuery逻辑的实现。<br/>
至于Octopress为什么不能正确解析插件内部的一些markdown语法，这东西太<ruby><rb>高端</rb><rp>(</rp><rt class="rubytagrt">扯淡</rt><rp>)</rp></ruby>了，我反正不想管了。<br/>
要换行的时候就加个<code>&lt;br/&gt;</code>吧，反正就五个字符，也不会累死人。
</div></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更多Octopress插件来袭]]></title>
    <link href="http://smwlover.github.io/blog/2016/05/16/more-plugins/"/>
    <updated>2016-05-16T19:18:17+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/05/16/more-plugins</id>
    <content type="html"><![CDATA[<p>有需求才会有动力，在上两篇博客中，因为我想介绍关于日麻的内容，所以我开发了两款用于显示日麻图片的插件<code>mahjong</code>和<code>majonglist</code>。然而今天，我在逛<a href="https://zh.moegirl.org/Mainpage">萌娘百科</a>时发现里面有一些很cool的东西，这么cool的东西能够搬到自己的博客中来不是极好的吗？所以，我又开发了三个简易的Octopress插件。</p>

<!--more-->


<h2>第一个插件：删除线</h2>

<p><del>其实这个东西根本没必要写成插件的</del>   ←就是这样的效果。<br/>
之前说到过，所谓Octopress的插件，其实就是把我们在markdown文件中写的内容转化为html的工具，要写关于删除线的插件，就要先弄明白删除线在html里是怎么表示的。我随便找了一个有删除线的萌娘百科网页，通过F12键查看源代码……<br/>
<img src="/images/blogimg/1.png"><br/>
可以发现，删除线什么的，就是用<code>&lt;del&gt;</code>和<code>&lt;/del&gt;</code>标签括起来嘛！所以写markdown的时候直接手动加上这样的两个标签就可以了，也不麻烦，<del>根本用不着什么插件嘛</del>。<br/>
不过，写就写了，语法是<code>{% delete sentence %}</code>。看看代码吧，反正就几行：</p>

<p><figure class='code'><figcaption><span>delete.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class DeleteTag &amp;lt; Liquid::Tag</span>
</span><span class='line'><span class="sr">    def initialize(tag_name, markup, tokens)</span>
</span><span class='line'><span class="sr">        @content = &amp;ldquo;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="sr">&amp;rdquo;.strip</span>
</span><span class='line'><span class="sr">        super</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;&amp;lt;del&amp;gt;</span><span class="si">#{</span><span class="vi">@content</span><span class="si">}</span><span class="s2">&amp;lt;/del&amp;gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;delete&amp;rsquo;, Jekyll::DeleteTag)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>第二个插件：36K钛合金防剧透屏障</h2>

<p><span class="mask">这是什么中二爆表的名字</span> ←就是这样的效果。<br/>
同理，我们要查看一下相应的html是怎么写的，我找到的网页如下：<br/>
<img src="/images/blogimg/2.png"><br/>
我们可以发现，这是一种特殊类别的<code>&lt;span&gt;</code>，在css分类器中为这种<code>&lt;span&gt;</code>定义了特殊的样式表，使得文字颜色和背景色相同，就可以达到“防剧透屏障”的效果。我们也照葫芦画瓢，开发一个语法为<code>{% mask sentence %}</code>的插件：</p>

<p><figure class='code'><figcaption><span>mask.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class MaskTag &amp;lt; Liquid::Tag</span>
</span><span class='line'><span class="sr">    def initialize(tag_name, markup, tokens)</span>
</span><span class='line'><span class="sr">        @content = &amp;ldquo;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="sr">&amp;rdquo;.strip</span>
</span><span class='line'><span class="sr">        super</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;&amp;lt;span class=</span><span class="se">\&quot;</span><span class="s2">mask</span><span class="se">\&quot;</span><span class="s2">&amp;gt;</span><span class="si">#{</span><span class="vi">@content</span><span class="si">}</span><span class="s2">&amp;lt;/span&amp;gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;mask&amp;rsquo;, Jekyll::MaskTag)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>我们定义了一种类别叫<code>mask</code>，然后我们需要到<code>sass/custom/_styles.scss</code>中定义<code>mask</code>对应的样式：</p>

<p><figure class='code'><figcaption><span>_styles.scss </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">//Mask Plugin:</span>
</span><span class='line'><span class="nc">.mask</span><span class="p">{</span>
</span><span class='line'>        <span class="na">background-color</span><span class="o">:</span> <span class="mh">#252525</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">color</span><span class="o">:</span> <span class="mh">#252525</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">text-shadow</span><span class="o">:</span> <span class="no">none</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>第三个插件：写作xx读作xx</h2>

<p>不知道大家看过《<ruby><rb>Clannad</rb><rp>(</rp><rt class="rubytagrt">人生</rt><rp>)</rp></ruby>》没有？ ←就是这样的效果。当然，这种效果还可以用来对日语进行注音，比如“<ruby><rb>学</rb><rp>(</rp><rt class="rubytagrt">がっ</rt><rp>)</rp></ruby><ruby><rb>校</rb><rp>(</rp><rt class="rubytagrt">こう</rt><rp>)</rp></ruby>”。<br/>
日语中，经常见到用假名在汉字上方标明读音的情况，这种情况叫振假名（<ruby><rb>振</rb><rp>(</rp><rt class="rubytagrt">ふ</rt><rp>)</rp></ruby>り<ruby><rb>仮</rb><rp>(</rp><rt class="rubytagrt">が</rt><rp>)</rp></ruby><ruby><rb>名</rb><rp>(</rp><rt class="rubytagrt">な</rt><rp>)</rp></ruby>）。又因为日文印刷时以五号格大小的振假名为标准，并且五号格大小的文字在印刷行业被简称为ruby，所以振假名也有“<ruby><rb>ルビー</rb><rp>(</rp><rt class="rubytagrt">ruby</rt><rp>)</rp></ruby>”的别称。所以，我把这个插件的名字叫做<code>rubytag</code>。<br/>
同样，我找到了萌娘百科的一个网页，观察振假名的具体实现方式：<br/>
<img src="/images/blogimg/3.png"><br/>
可以发现，这种效果正是利用html一个叫做<code>&lt;ruby&gt;</code>的标签实现的。其中，<code>&lt;rb&gt;&lt;/rb&gt;</code>中的内容是下面的文字，<code>&lt;rt&gt;&lt;/rt&gt;</code>中的内容是上面的标注。通过调查发现，一般情况下，<code>&lt;rp&gt;&lt;/rp&gt;</code>中的内容是不显示的，但是在不支持<code>&lt;ruby&gt;</code>标签的浏览器中，<code>&lt;rp&gt;(&lt;/rp&gt;</code>和<code>&lt;rp&gt;)&lt;/rp&gt;</code>中的内容就会显示出来，使得标注不是显示在文字上方，而是显示在由<code>&lt;rp&gt;</code>组成的一对括号中，效果类似于“学(がっ)校(こう)”。<br/>
总体来讲，这个插件的逻辑比上面两个插件要复杂一些，但是比起前面的<code>mahjonglist</code>来还是较为简单的。我定义了本插件的语法为<code>{% rubytag word1[-tag1]/word2[-tag2]/... %}</code>，其中不同的单词之间用<code>/</code>分割，每个单词及其注音则用<code>-</code>分割。本插件允许不带注音的单词，这种情况下该单词就会被当成一个普通文本来显示。<br/>
实现本插件的代码如下，总体来讲就是一个<code>string.split</code>函数的调用过程：</p>

<p><figure class='code'><figcaption><span>rubytag.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class RubyTag &amp;lt; Liquid::Tag&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">markup</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="vi">@result</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>    <span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">count</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">arr</span><span class="o">.</span><span class="n">size</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">word</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">count</span><span class="o">]</span>
</span><span class='line'>        <span class="n">word</span><span class="o">.</span><span class="n">strip!</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">word</span><span class="o">.</span><span class="n">size</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">parts</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">parts</span><span class="o">.</span><span class="n">size</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span>
</span><span class='line'>                <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;每组对应关系中内容太多&quot;</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">elsif</span> <span class="n">parts</span><span class="o">.</span><span class="n">size</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span>
</span><span class='line'>                <span class="n">html</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>                <span class="vi">@result</span> <span class="o">=</span> <span class="vi">@result</span> <span class="o">+</span> <span class="n">html</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">rb</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>                <span class="n">rt</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>                <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;ruby&amp;gt;&amp;lt;rb&amp;gt;</span><span class="si">#{</span><span class="n">rb</span><span class="si">}</span><span class="s2">&amp;lt;/rb&amp;gt;&amp;lt;rp&amp;gt;(&amp;lt;/rp&amp;gt;&amp;lt;rt class=</span><span class="se">\&quot;</span><span class="s2">rubytagrt</span><span class="se">\&quot;</span><span class="s2">&amp;gt;</span><span class="si">#{</span><span class="n">rt</span><span class="si">}</span><span class="s2">&amp;lt;/rt&amp;gt;&amp;lt;rp&amp;gt;)&amp;lt;/rp&amp;gt;&amp;lt;/ruby&amp;gt;&quot;</span>
</span><span class='line'>                <span class="vi">@result</span> <span class="o">=</span> <span class="vi">@result</span> <span class="o">+</span> <span class="n">html</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@successful</span>
</span><span class='line'>        <span class="vi">@result</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;&amp;lt;strong&amp;gt;错误：</span><span class="si">#{</span><span class="vi">@information</span><span class="si">}</span><span class="s2">&amp;lt;/strong&amp;gt;&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;rubytag&amp;rsquo;, Jekyll::RubyTag)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>由于默认的日文标注字体太丑陋，我新定义了一种标注类别<code>rubytagrt</code>，将其字体改为较美观的微软雅黑。当然这一步仍然需要修改<code>_styles.scss</code>：</p>

<p><figure class='code'><figcaption><span>_styles.scss </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">//Rubytag Plugin:</span>
</span><span class='line'><span class="nc">.rubytagrt</span><span class="p">{</span>
</span><span class='line'>        <span class="na">font-family</span><span class="o">:</span> <span class="n">microsoft</span> <span class="n">yahei</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>到此为止，这个插件的开发就告一段落，那么我们可以输入各种各样的用例，测试插件的显示效果了：<br/>
1. 正常情况：<code>{% rubytag 明日-あした %}</code>会显示成<ruby><rb>明日</rb><rp>(</rp><rt class="rubytagrt">あした</rt><rp>)</rp></ruby>；<br/>
2. 包含多个单词的情况：<code>{% rubytag 明-みょう/日-にち %}</code>会显示成<ruby><rb>明</rb><rp>(</rp><rt class="rubytagrt">みょう</rt><rp>)</rp></ruby><ruby><rb>日</rb><rp>(</rp><rt class="rubytagrt">にち</rt><rp>)</rp></ruby>；<br/>
3. 包含多个单词，但是有些单词没有标注的情况：<code>{% rubytag 振-ふ/り/仮-が/名-な %}</code>会显示成<ruby><rb>振</rb><rp>(</rp><rt class="rubytagrt">ふ</rt><rp>)</rp></ruby>り<ruby><rb>仮</rb><rp>(</rp><rt class="rubytagrt">が</rt><rp>)</rp></ruby><ruby><rb>名</rb><rp>(</rp><rt class="rubytagrt">な</rt><rp>)</rp></ruby>；<br/>
4. 错误情况：<code>{% rubytag 明-みょう-日-にち %}</code>会显示成<strong>错误：每组对应关系中内容太多</strong>。</p>

<h3>Octopress插件的嵌套浅析</h3>

<p>在插件测试中，我发现了一个神奇的事情：本插件可以嵌套在一些<code>Block</code>类型的Octopress插件中使用。比如下面的例子，我就将本插件嵌套进了<code>blockquote</code>插件中：</p>

<p><blockquote><p><ruby><rb>迷</rb><rp>(</rp><rt class="rubytagrt">まよ</rt><rp>)</rp></ruby>いはないよ、<ruby><rb>固</rb><rp>(</rp><rt class="rubytagrt">かた</rt><rp>)</rp></ruby>く<ruby><rb>決</rb><rp>(</rp><rt class="rubytagrt">き</rt><rp>)</rp></ruby>めたから。<ruby><rb>涙</rb><rp>(</rp><rt class="rubytagrt">なみだ</rt><rp>)</rp></ruby>は<ruby><rb>見</rb><rp>(</rp><rt class="rubytagrt">み</rt><rp>)</rp></ruby>せないと<ruby><rb>誓</rb><rp>(</rp><rt class="rubytagrt">ちか</rt><rp>)</rp></ruby>った。<br/>我不会迷惘，因为早已下定决心，发誓不再让他人看到我的泪水。</p><footer><strong>阿万音铃羽</strong> <cite>虹色の光りの中で</cite></footer></blockquote></p>

<p>对应的markdown文件如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% blockquote 阿万音铃羽, 虹色の光りの中で %}
</span><span class='line'>{% rubytag 迷-まよ/いはないよ、/固-かた/く/決-き/めたから。/涙-なみだ/は/見-み/せないと/誓-ちか/った。 %}
</span><span class='line'>我不会迷惘，因为早已下定决心，发誓不再让他人看到我的泪水。
</span><span class='line'>{% endblockquote %}</span></code></pre></td></tr></table></div></figure></p>

<p>关于产生这种现象的原因，我研究了一下<code>blockquote.rb</code>，可以发现，在该代码的47行处有这样的一段话：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="n">quote</span> <span class="o">=</span> <span class="n">paragraphize</span><span class="p">(</span><span class="k">super</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#以下省略</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>那么这个<code>super</code>究竟代表什么呢？通过查阅资料发现，Ruby中<code>super</code>指<strong>调用父类的同名函数，并将本函数的所有参数传入父类的同名函数</strong>。上面的代码中调用的就是其父类的<code>render(context)</code>函数。我们可以在这一行代码的前面加入<code>print super</code>，然后运行<code>rake generate</code>，看看其父类的<code>render(context)</code>函数究竟会返回什么。我们发现，输出的结果正是将嵌套在其内部的标识符<code>rubytag</code>解析完成之后的结果：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ruby>&lt;rb>迷&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">まよ&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>いはないよ、&lt;ruby>&lt;rb>固&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">かた&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>く&lt;ruby>&lt;rb>決&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">き&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>めたから。&lt;ruby>&lt;rb>涙&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">なみだ&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>は&lt;ruby>&lt;rb>見&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">み&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>せないと&lt;ruby>&lt;rb>誓&lt;/rb>&lt;rp>(&lt;/rp>&lt;rt class="rubytagrt">ちか&lt;/rt>&lt;rp>)&lt;/rp>&lt;/ruby>った。
</span><span class='line'>我不会迷惘，因为早已下定决心，发誓不再让他人看到我的泪水。</span></code></pre></td></tr></table></div></figure></p>

<p>通过这个结果，我们可以得出一个猜想：在<code>Block</code>类型标识符的解析过程中，Octopress会先解析被该标识符包裹的内容，如果这些内容中有子标识符存在，那么先解析它们并且将它们转化为html代码，然后才是对该<code>Block</code>类型标识符本身的解析。<br/>
对于<code>blockquote.rb</code>来讲，它在<code>render(context)</code>函数中通过<code>super</code>获得对其包裹的内容的解析结果，然后再通过<code>paragraphize(super)</code>对这个结果进行进一步的处理，该函数的代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">paragraphize</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="c1">#{input.lstrip.rstrip.gsub(/\n\n/, &amp;lsquo;&lt;/p&gt;&lt;p&gt;&amp;rsquo;).gsub(/\n/, &amp;lsquo;&lt;br/&gt;&amp;rsquo;)}&lt;/p&gt;&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>通过观察这段代码，我们发现，该函数对其包裹的内容的处理至少涉及三个方面：<br/>
1. 在其包裹的内容前后添加<code>&lt;p&gt;</code>和<code>&lt;/p&gt;</code>标签；<br/>
2. 将其包裹的内容中的<code>\n\n</code>替换为<code>&lt;/p&gt;&lt;p&gt;</code>标签；<br/>
3. 将其包裹的内容中的<code>\n</code>替换为<code>&lt;br/&gt;</code>标签。<br/>
说到这里，我忽然想到，在写markdown文件的时候，我们其实经常用到一个插件去嵌套其他插件，那就是<code>{% raw %}</code>。那么<code>{% raw %}</code>是如何避免解析被其包裹的内容的呢？笔者观察了<code>raw.rb</code>，但还是没有研究出答案。</p>

<h2>总结与展望：</h2>

<p>还是那句话，有需求才会有动力。获取某天，我又偶然间发现了什么想搬到自己博客中来的东西，于是又开发了一个新的Octopress插件呢。这也是有可能的，不是么？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress插件设计：mahjong(2)]]></title>
    <link href="http://smwlover.github.io/blog/2016/05/15/mahjong-plugin-2/"/>
    <updated>2016-05-15T19:54:55+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/05/15/mahjong-plugin-2</id>
    <content type="html"><![CDATA[<p>在我的上一篇博文中，我开发了一款Octopress插件，该插件支持在一行文本内利用<code>{% mahjong cardName %}</code>快速插入一张麻将牌的图片。当时提到后续的内容是开发一个名为<code>mahjonglist</code>的插件，来另起一行显示一组麻将牌，表示某位玩家的手牌。本篇博客就来简要叙述一下开发这个插件的流程。</p>

<!--more-->


<h2>一、基本语法</h2>

<p>本插件的基本语法与之前显示单张麻将牌的<code>mahjong</code>插件类似，但是因为本插件是一次性显示多张麻将牌，所以基本语法较<code>mahjong</code>插件也有一些扩展：<br/>
1. 多张牌连写：比如我有一串顺子“一万、二万、三万”，如果写成<code>1m2m3m</code>就有些啰嗦，实际上，日本麻将的玩家更喜欢将其简写为<code>123m</code>。本插件虽然支持前一种写法，但是更推荐后一种写法，将一些同类的牌连写。<br/>
2. 日麻中的鸣牌：即吃、碰和杠，为了看起来更加美观，我们通常将自己的每组吃、碰或杠的牌放到手牌的右侧，且与手牌隔开一定距离。在本插件中可以使用分隔符<code>-</code>实现。<br/>
3. 日麻中的加杠：熟悉日麻的人们知道，加杠的时候会将添加的那张牌放到原本横置的牌上面，即同时有两张牌横置。本插件中支持类似<code>4/44/4p</code>的写法，用一对<code>/</code>将加杠的部分包裹起来。</p>

<h2>二、实现方法</h2>

<p>大体的实现方法与上一个插件类似。为了连续显示多张图片，我利用html标签<code>&lt;table&gt;&lt;tr&gt;...&lt;/tr&gt;&lt;/table&gt;</code>创建了一个表格，表格中的每个元素对应一张图片<code>&lt;td&gt;&lt;img/&gt;&lt;/td&gt;</code>。对于加杠的情况，相当于在原本表格中的一栏里又嵌套了一个两行一列的表格，形如下面代码：</p>

<p><figure class='code'><figcaption><span>实现加杠的方法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;table&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;&lt;td&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;第一张麻将牌的地址&quot;</span><span class="nt">&gt;&lt;/td&gt;&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;&lt;td&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;第二张麻将牌的地址&quot;</span><span class="nt">&gt;&lt;/td&gt;&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>另外就是实现的时候要注意逻辑的严密性，考虑清楚所有可能的输入情况。比如在两个加杠符号<code>/</code>中包裹的牌数量不等于两张，或者在两个加杠符号<code>/</code>中出现了分隔符<code>-</code>，或者一个加杠符号<code>/</code>还没有合拢整个文本就结束的情况等。具体处理方法参见代码：</p>

<p><figure class='code'><figcaption><span>mahjonglist.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class MahjongListTag &amp;lt; Liquid::Tag</span>
</span><span class='line'><span class="sr">    def initialize(tag_name, markup, tokens)</span>
</span><span class='line'><span class="sr">        @successful = true #解析是否成功</span>
</span><span class='line'><span class="sr">        @curFlag = -1 #m, s, p或j对应0, 1, 2, 3</span>
</span><span class='line'><span class="sr">        @information = &amp;ldquo;&amp;rdquo; #存储错误信息</span>
</span><span class='line'><span class="sr">        @result = &amp;ldquo;&lt;/</span><span class="n">tr</span><span class="o">&gt;&lt;</span><span class="sr">/table&gt;&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="c1">#与加杠有关的信息：</span>
</span><span class='line'>    <span class="vi">@isInKakan</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="vi">@kakanCount</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>    <span class="n">strLen</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">strReversed</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'>    <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="vi">@index</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">strLen</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">curChar</span> <span class="o">=</span> <span class="n">strReversed</span><span class="o">[</span><span class="vi">@index</span><span class="o">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;m&quot;</span>
</span><span class='line'>            <span class="vi">@curFlag</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;s&quot;</span>
</span><span class='line'>            <span class="vi">@curFlag</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;p&quot;</span>
</span><span class='line'>            <span class="vi">@curFlag</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;j&quot;</span>
</span><span class='line'>            <span class="vi">@curFlag</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s1">&#39;-&#39;</span> <span class="c1">#分隔符</span>
</span><span class='line'>            <span class="k">if</span> <span class="vi">@isInKakan</span>
</span><span class='line'>                <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;加杠表示符中不能有分割符&quot;</span>
</span><span class='line'>                <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>            <span class="n">curLabel</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;td class=</span><span class="se">\&quot;</span><span class="s2">mahjongTableElement</span><span class="se">\&quot;</span><span class="s2">&amp;gt;&amp;lt;img class=</span><span class="se">\&quot;</span><span class="s2">mahjong</span><span class="se">\&quot;</span><span class="s2"> src=</span><span class="se">\&quot;</span><span class="s2">/images/mahjong/separator.png</span><span class="se">\&quot;</span><span class="s2">/&amp;gt;&amp;lt;/td&amp;gt;&quot;</span>
</span><span class='line'>            <span class="vi">@result</span> <span class="o">=</span> <span class="n">curLabel</span> <span class="o">+</span> <span class="vi">@result</span>
</span><span class='line'>            <span class="vi">@curFlag</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s1">&#39;/&#39;</span> <span class="c1">#加杠表示符</span>
</span><span class='line'>            <span class="k">if</span> <span class="vi">@isInKakan</span>
</span><span class='line'>                <span class="vi">@isInKakan</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">if</span> <span class="vi">@kakanCount</span> <span class="o">!=</span> <span class="mi">2</span>
</span><span class='line'>                    <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;加杠只允许恰好两张麻将牌横置&quot;</span>
</span><span class='line'>                    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>                <span class="vi">@kakanCount</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                <span class="vi">@result</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;td class=</span><span class="se">\&quot;</span><span class="s2">mahjongTableElement</span><span class="se">\&quot;</span><span class="s2">&amp;gt;&amp;lt;table&amp;gt;&quot;</span> <span class="o">+</span> <span class="vi">@result</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="vi">@isInKakan</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>                <span class="vi">@result</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;/table&amp;gt;&amp;lt;/td&amp;gt;&quot;</span> <span class="o">+</span> <span class="vi">@result</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">if</span> <span class="vi">@curFlag</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span>
</span><span class='line'>                <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;缺少m、p、s、j标签&quot;</span>
</span><span class='line'>                <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">curLabel</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">strReversed</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="vi">@successful</span>
</span><span class='line'>                    <span class="k">if</span> <span class="vi">@isInKakan</span> <span class="c1">#如果读取的是加杠表示符中的内容：</span>
</span><span class='line'>                        <span class="vi">@kakanCount</span> <span class="o">=</span> <span class="vi">@kakanCount</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                        <span class="k">if</span> <span class="vi">@kakanCount</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span>
</span><span class='line'>                            <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;加杠只允许恰好两张麻将牌横置&quot;</span>
</span><span class='line'>                            <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                            <span class="k">break</span>
</span><span class='line'>                        <span class="k">end</span>
</span><span class='line'>                        <span class="vi">@result</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;tr&amp;gt;&quot;</span> <span class="o">+</span> <span class="n">curLabel</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;/tr&amp;gt;&quot;</span> <span class="o">+</span> <span class="vi">@result</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                        <span class="vi">@result</span> <span class="o">=</span> <span class="n">curLabel</span> <span class="o">+</span> <span class="vi">@result</span>
</span><span class='line'>                    <span class="k">end</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="vi">@index</span> <span class="o">=</span> <span class="vi">@index</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#如果仍在加杠状态中：</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@successful</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="vi">@isInKakan</span>
</span><span class='line'>        <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;加杠表示符“/”没有结尾&quot;</span>
</span><span class='line'>        <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@result</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&quot;</span> <span class="o">+</span> <span class="vi">@result</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@successful</span>
</span><span class='line'>        <span class="vi">@result</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;&amp;lt;strong&amp;gt;错误：</span><span class="si">#{</span><span class="vi">@information</span><span class="si">}</span><span class="s2">&amp;lt;/strong&amp;gt;&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getPath</span><span class="p">(</span><span class="n">isRotated</span><span class="p">,</span> <span class="n">isAkaDora</span><span class="p">,</span> <span class="n">cardNumber</span><span class="p">)</span>
</span><span class='line'>    <span class="n">direction</span> <span class="o">=</span> <span class="s2">&quot;tate&quot;</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">isRotated</span> <span class="o">||</span> <span class="vi">@isInKakan</span>
</span><span class='line'>        <span class="n">direction</span> <span class="o">=</span> <span class="s2">&quot;yoko&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">isAkaDora</span>
</span><span class='line'>        <span class="k">if</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>            <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;aka5m&quot;</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>            <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;aka5s&quot;</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>            <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;aka5p&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">cardNumber</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;back&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cardNumber</span> <span class="o">+</span> <span class="mi">9</span> <span class="o">*</span> <span class="vi">@curFlag</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="s2">&quot;/images/mahjong/</span><span class="si">#{</span><span class="n">direction</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">.png&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cardNumber</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="n">isRotated</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">isAkaDora</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">getNumber</span> <span class="o">=</span> <span class="kp">false</span> <span class="c1">#是否读到了编号位？读到编号位就不会再往下读了。</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">until</span> <span class="n">getNumber</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">curChar</span> <span class="o">=</span> <span class="n">str</span><span class="o">[</span><span class="vi">@index</span><span class="o">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">curChar</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;$&quot;</span>
</span><span class='line'>                <span class="n">isRotated</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>                <span class="vi">@index</span> <span class="o">=</span> <span class="vi">@index</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;!&quot;</span>
</span><span class='line'>                <span class="n">isAkaDora</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>                <span class="vi">@index</span> <span class="o">=</span> <span class="vi">@index</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">getNumber</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>                <span class="n">cardNumber</span> <span class="o">=</span> <span class="n">curChar</span><span class="o">.</span><span class="n">getbyte</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">-</span> <span class="mi">48</span>
</span><span class='line'>                <span class="k">if</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">cardNumber</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">cardNumber</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>                    <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;j标签对应的编号只能为0到7&quot;</span>
</span><span class='line'>                    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">elsif</span> <span class="n">cardNumber</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">cardNumber</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">9</span>
</span><span class='line'>                    <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;m、p、s标签对应的编号只能为0到9&quot;</span>
</span><span class='line'>                    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">elsif</span> <span class="n">isAkaDora</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">cardNumber</span> <span class="o">!=</span> <span class="mi">5</span> <span class="o">||</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">#红宝牌必须是五索、五万、五饼。</span>
</span><span class='line'>                    <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;红宝牌必须是五万、五饼、五索&quot;</span>
</span><span class='line'>                    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">elsif</span> <span class="p">(</span><span class="n">isRotated</span> <span class="o">||</span> <span class="vi">@isInKakan</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">cardNumber</span> <span class="o">==</span> <span class="mi">0</span>  <span class="c1">#暗牌不能横置</span>
</span><span class='line'>                    <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;暗牌不能横置&quot;</span>
</span><span class='line'>                    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">else</span> <span class="c1">#合法的情况</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;&amp;lt;td class=</span><span class="se">\&quot;</span><span class="s2">mahjongTableElement</span><span class="se">\&quot;</span><span class="s2">&amp;gt;&amp;lt;img class=</span><span class="se">\&quot;</span><span class="s2">mahjong</span><span class="se">\&quot;</span><span class="s2"> src=</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">getPath</span><span class="p">(</span><span class="n">isRotated</span><span class="p">,</span> <span class="n">isAkaDora</span><span class="p">,</span> <span class="n">cardNumber</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">/&amp;gt;&amp;lt;/td&amp;gt;&quot;</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="vi">@information</span> <span class="o">=</span> <span class="s2">&quot;标签匹配的编号出现错误&quot;</span>
</span><span class='line'>            <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;mahjonglist&amp;rsquo;, Jekyll::MahjongListTag)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>当然，和上一篇博客类似，为了覆盖Octopress的默认表格样式，我们需要在<code>sass/custom/_styles.scss</code>文件中添加如下代码：</p>

<p><figure class='code'><figcaption><span>_styles.scss </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.mahjongTableElement</span><span class="p">{</span>
</span><span class='line'>        <span class="na">border</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>        <span class="na">vertical-align</span><span class="o">:</span> <span class="no">bottom</span><span class="p">;</span>
</span><span class='line'>        <span class="na">line-height</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>三、功能测试：</h2>

<h3>正常情况下的测试：</h3>

<ul>
<li><code>{% mahjonglist 12345m888s22255j %}</code>会显示成：<table><tr><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/1.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/2.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/3.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/4.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/5.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/17.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/17.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/17.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/29.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/29.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/29.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/32.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/32.png"/></td></tr></table></li>
<li>当然多张牌不连写也是可以的，比如<code>{% mahjonglist 12m345m8s8s8s222j55j %}</code>显示的内容应该与上面一条相同：<table><tr><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/1.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/2.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/3.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/4.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/5.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/17.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/17.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/17.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/29.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/29.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/29.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/32.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/32.png"/></td></tr></table></li>
<li>再测试鸣牌的情况，包括明杠与暗杠，比如<code>{% mahjonglist 4567p-2$13m-44$44s-0660j %}</code>会显示成：<table><tr><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/22.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/23.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/24.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/25.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/separator.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/yoko/2.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/1.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/3.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/separator.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/13.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/yoko/13.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/13.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/13.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/separator.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/back.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/33.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/33.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/back.png"/></td></tr></table></li>
<li>可以再测试一下加杠的情况，比如<code>{% mahjonglist 12345!67m-2/22/2p-11/11/j %}</code>会显示成：<table><tr><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/1.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/2.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/3.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/4.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/aka5m.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/6.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/7.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/separator.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/20.png"/></td><td class="mahjongTableElement"><table><tr><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/yoko/20.png"/></td></tr><tr><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/yoko/20.png"/></td></tr></table></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/20.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/separator.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/28.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/28.png"/></td><td class="mahjongTableElement"><table><tr><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/yoko/28.png"/></td></tr><tr><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/yoko/28.png"/></td></tr></table></td></tr></table></li>
</ul>


<h3>错误情况下的测试：</h3>

<ul>
<li>无效宝牌：<code>{% mahjonglist 12m34!5m8s8s8s222j55j %}</code>显示为<strong>错误：红宝牌必须是五万、五饼、五索</strong>；</li>
<li>数量不正确的加杠：<code>{% mahjonglist 12m34!5m8s8s8s55j-/444/4j %}</code>显示为<strong>错误：加杠只允许恰好两张麻将牌横置</strong>；</li>
<li>加杠符号中间穿插分隔符：<code>{% mahjonglist 12m34!5m8s8s8s55j-4/4-4/4j %}</code>显示为<strong>错误：加杠表示符中不能有分割符</strong>；</li>
<li>缺少<code>m、p、s、j</code>标签：<code>{% mahjonglist 12m34!5m8s8s8s222j55 %}</code>显示为<strong>错误：缺少m、p、s、j标签</strong>；</li>
<li><code>!</code>或<code>$</code>等修饰符前面缺少数字：<code>{% mahjonglist $12345m8s8s8s222j55j %}</code>显示为<strong>错误：标签匹配的编号出现错误</strong>；</li>
<li>企图横置暗牌：<code>{% mahjonglist 123456m888s5j-/02/22p %}</code>显示为<strong>错误：暗牌不能横置</strong>。</li>
</ul>


<h2>四、结语</h2>

<p>到现在为止，<code>mahjong</code>和<code>mahjonglist</code>插件的开发即告一段落，这样一来，在博客上贴关于日麻牌型的图片会方便很多。比如下面的这手麻将听什么牌呢？答案是<img class="mahjong" src="/images/mahjong/tate/14.png"/>、<img class="mahjong" src="/images/mahjong/tate/16.png"/>和<img class="mahjong" src="/images/mahjong/tate/17.png"/>。其中已经确定的役种包括<strong>一杯口</strong>和<strong>断幺</strong>，如果听<img class="mahjong" src="/images/mahjong/tate/14.png"/>和<img class="mahjong" src="/images/mahjong/tate/17.png"/>还会有<strong>平和</strong>。所以，在不考虑额外宝牌的情况下，高目是4番满贯哦。
<table><tr><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/21.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/21.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/22.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/22.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/aka5p.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/23.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/15.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/15.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/15.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/16.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/separator.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/yoko/8.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/6.png"/></td><td class="mahjongTableElement"><img class="mahjong" src="/images/mahjong/tate/7.png"/></td></tr></table>  <br/>
那么我也可以开始轻轻松松地写关于日麻的博文了，行くよ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress插件设计：mahjong]]></title>
    <link href="http://smwlover.github.io/blog/2016/05/14/mahjong-plugin/"/>
    <updated>2016-05-14T22:22:20+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/05/14/mahjong-plugin</id>
    <content type="html"><![CDATA[<p>我接触日本麻将（简称日麻），是从《天才麻将少女》这部动漫开始的，从那之后便跳进日麻的坑中无法自拔，到现在为止已经将近一年了。在这一年中，我对日本麻将也有了一些自己的理解与感悟，我也很希望将这些东西在我的博客上与大家分享。</p>

<!--more-->


<p>那么问题来了：当我想说明某个关于日麻的问题时，只凭文字总是显得不那么直观。然而如果用图片的话，对于每张麻将牌都去插入一个<code>&lt;img/&gt;</code>标签又非常不方便。究竟该如何解决呢？我的解决方法是开发一个Octopress插件，在之后写博客时，只需利用此插件简单地键入几个字符，Octopress就可以自动在生成的网页中插入对应的图片。<br/>
比如，日麻中的“一万”通常会简称为<code>1m</code>；“五饼”则通常会简称为<code>5p</code>。在我想插入一张“一万”的图片的时候，我只需要使用我开发的插件，写出如下代码<code>{% mahjong 1m %}</code>，Octopress就会自动添加该图片。是不是比起自己写<code>&lt;img/&gt;</code>标签来要方便很多？<br/>
那么就开始开发自己需要的插件吧！</p>

<h2>一、基本功能</h2>

<p>具体来说，我的需求分为两部分：首先是在一行文本内部加入单张麻将牌的图片，我计划开发一个名为<code>mahjong</code>的插件来实现；然后是可以另起一行显示一组麻将牌（通常是13张，表示某位玩家的手牌）的图片，我计划开发一个名为<code>mahjonglist</code>的插件来实现。这篇博文讲的是第一个插件的实现方式。<br/>
然后我们可以开始定义本插件的语法了，在markdown中调用插件一般是通过<code>{% plugin_name parameters %}</code>的方式，我们当然也需要遵循这种方式，所以调用我们的插件语法是<code>{% mahjong cardName %}</code>。<br/>
下一步定义<code>cardName</code>的语法。首先我们遵照日本麻将玩家的习惯，“万”简写为<code>m</code>，“饼”简写为<code>p</code>，“索”简写为<code>s</code>，这样就可以表示所有非字牌了。对于字牌，我采用后缀<code>j</code>来表示，<code>1j</code>到<code>7j</code>对应东南西北白发中。<br/>
另外，日麻中有红宝牌（赤ドラ）的概念，通常是红五万、红五索、红五饼。我采用在数字后加一个<code>!</code>的方法将红宝牌与普通牌区分。所以“五索”为<code>5s</code>，“红五索”则为<code>5!s</code>。<br/>
还有，由于日麻中在吃、碰、杠后会将其中一张牌横置，表示这张牌来自于哪个玩家。所以我采用在数字后加一个<code>$</code>的方法表示这张牌是横置的。比如要表示一个横置的北风，即为<code>4$j</code>。后缀符<code>$</code>和<code>!</code>的先后顺序无关。<br/>
最后，日麻中暗杠的表示方法是中间两张牌正放，旁边两张牌倒放，所以我们还需要表示倒放的牌（暗牌）。我采用数字0加上<code>m, p, s, j</code>中的任何一个标签表示暗牌。</p>

<h2>二、插件开发</h2>

<p>首先我们有一组<a href="https://github.com/smwlover/smwlover.github.io/tree/master/images/mahjong">麻将牌图片的资源</a>，我们需要做的是写一个<code>rb</code>文件，解析我们定义的<code>cardName</code>的语法，并且生成对应的<code>&lt;img/&gt;</code>标签。我们在<code>plugins/</code>目录下新建一个文件名为<code>mahjong.rb</code>。笔者之前没有任何Ruby开发的经验，这次开发插件，完全是参照已有插件的写法开发的。<br/>
我们发现，大部分插件都是自己定义了一个类，继承自<code>Liquid::Tag</code>或者<code>Liquid::Block</code>。在文件的最后，我们需要利用<code>Liquid::Template.register_tag()</code>对插件进行注册。<br/>
其中，继承自<code>Liquid::Block</code>的插件属于语句块类型的，即用一个开始标识符和一个结束标识符将要显示的内容包裹起来，比如<code>blockquote.rb</code>；而继承自<code>Liquid::Tag</code>的插件属于标签类型的，不需要用两个标识符包裹，比如<code>image_tag.rb</code>。考虑到我们的功能，我们需要选用的是后一种类型，即继承自<code>Liquid::Tag</code>。<br/>
我们还发现，我们的插件需要写的函数包括<code>initialize(tag_name, markup, tokens)</code>函数，我们的<code>cardName</code>就是通过<code>markup</code>参数传递进来的。在该函数中，我们需要对传进来的参数进行解析。<br/>
我们还需要写一个<code>render(context)</code>函数，这个函数执行的结果就是对应的html标签。<br/>
注意到这些点之后，我写出的插件代码如下：</p>

<p><figure class='code'><figcaption><span>mahjong.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Title: Simple Mahjong tag for Jekyll&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="ss">Author</span><span class="p">:</span> <span class="n">smwlover</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Syntax: {% mahjong cardName %}&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="ss">Examples</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;{% mahjong 1m %} 表示一万&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="o">%</span> <span class="n">mahjong</span> <span class="mi">5</span><span class="o">!</span><span class="n">s</span> <span class="sx">%} 表示红五索（日麻中的红宝牌）&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;h1&gt;{% mahjong 3$p %}</span> <span class="err">表示横置的三饼（日麻中吃、碰、杠的横置）</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;字牌用数字1-7加j表示。其中1-4分别对应东、南、西、北，5-7则对应白、发、中。&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">暗牌用数字</span><span class="mi">0</span><span class="err">加</span><span class="n">m</span><span class="err">、</span><span class="n">s</span><span class="err">、</span><span class="nb">p</span><span class="err">或</span><span class="n">j</span><span class="err">中的任何一个都可以表示。</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module Jekyll&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">MahjongTag</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Tag</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">markup</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@curFlag</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="c1">#m, s, p或j对应0, 1, 2, 3</span>
</span><span class='line'>        <span class="vi">@cardNumber</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="c1">#牌的编号</span>
</span><span class='line'>        <span class="vi">@isAkaDora</span> <span class="o">=</span> <span class="kp">false</span> <span class="c1">#是否是红宝牌</span>
</span><span class='line'>        <span class="vi">@isRotated</span> <span class="o">=</span> <span class="kp">false</span> <span class="c1">#是否是横置的牌</span>
</span><span class='line'>        <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">true</span> <span class="c1">#解析是否成功</span>
</span><span class='line'>        <span class="vi">@path</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="c1">#存储解析的结果&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">markup</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>    <span class="n">strLen</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">strReversed</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">count</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">strLen</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">curChar</span> <span class="o">=</span> <span class="n">strReversed</span><span class="o">[</span><span class="n">count</span><span class="o">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;m&quot;</span>
</span><span class='line'>                <span class="vi">@curFlag</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;s&quot;</span>
</span><span class='line'>                <span class="vi">@curFlag</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;p&quot;</span>
</span><span class='line'>                <span class="vi">@curFlag</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>            <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;j&quot;</span>
</span><span class='line'>                <span class="vi">@curFlag</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="vi">@path</span> <span class="o">=</span> <span class="s2">&quot;缺少m、p、s、j标签&quot;</span>
</span><span class='line'>                <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">if</span> <span class="vi">@cardNumber</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="c1">#如果重复声明了牌的编号</span>
</span><span class='line'>                <span class="vi">@path</span> <span class="o">=</span> <span class="s2">&quot;重复声明了牌的编号&quot;</span>
</span><span class='line'>                <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;$&quot;</span>
</span><span class='line'>                <span class="vi">@isRotated</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>            <span class="k">elsif</span> <span class="n">curChar</span> <span class="o">==</span> <span class="s2">&quot;!&quot;</span>
</span><span class='line'>                <span class="vi">@isAkaDora</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="vi">@cardNumber</span> <span class="o">=</span> <span class="n">curChar</span><span class="o">.</span><span class="n">getbyte</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">-</span> <span class="mi">48</span>
</span><span class='line'>                <span class="k">if</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="vi">@cardNumber</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">||</span> <span class="vi">@cardNumber</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>                    <span class="vi">@path</span> <span class="o">=</span> <span class="s2">&quot;j标签对应的编号只能为0到7&quot;</span>
</span><span class='line'>                    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">elsif</span> <span class="vi">@cardNumber</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">||</span> <span class="vi">@cardNumber</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">9</span>
</span><span class='line'>                    <span class="vi">@path</span> <span class="o">=</span> <span class="s2">&quot;m、p、s标签对应的编号只能为0到9&quot;</span>
</span><span class='line'>                    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">elsif</span> <span class="vi">@isAkaDora</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="vi">@cardNumber</span> <span class="o">!=</span> <span class="mi">5</span> <span class="o">||</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">#红宝牌必须是五索、五万、五饼。</span>
</span><span class='line'>                    <span class="vi">@path</span> <span class="o">=</span> <span class="s2">&quot;红宝牌必须是五万、五饼、五索&quot;</span>
</span><span class='line'>                    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">elsif</span> <span class="vi">@isRotated</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="vi">@cardNumber</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">#暗牌不能横置</span>
</span><span class='line'>                    <span class="vi">@path</span> <span class="o">=</span> <span class="s2">&quot;暗牌不能横置&quot;</span>
</span><span class='line'>                    <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@cardNumber</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="vi">@successful</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@successful</span>
</span><span class='line'>        <span class="n">getPath</span><span class="p">()</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@successful</span>
</span><span class='line'>        <span class="s2">&quot;&amp;lt;img class=</span><span class="se">\&quot;</span><span class="s2">mahjong</span><span class="se">\&quot;</span><span class="s2"> src=</span><span class="se">\&quot;</span><span class="si">#{</span><span class="vi">@path</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">/&amp;gt;&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;&amp;lt;strong&amp;gt;错误：</span><span class="si">#{</span><span class="vi">@path</span><span class="si">}</span><span class="s2">&amp;lt;/strong&amp;gt;&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getPath</span><span class="p">()</span>
</span><span class='line'>    <span class="n">direction</span> <span class="o">=</span> <span class="s2">&quot;tate&quot;</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@isRotated</span>
</span><span class='line'>        <span class="n">direction</span> <span class="o">=</span> <span class="s2">&quot;yoko&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@isAkaDora</span>
</span><span class='line'>        <span class="k">if</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>            <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;aka5m&quot;</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>            <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;aka5s&quot;</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="vi">@curFlag</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>            <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;aka5p&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@cardNumber</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;back&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@cardNumber</span> <span class="o">+</span> <span class="mi">9</span> <span class="o">*</span> <span class="vi">@curFlag</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@path</span> <span class="o">=</span> <span class="s2">&quot;/images/mahjong/</span><span class="si">#{</span><span class="n">direction</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">.png&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Liquid::Template.register_tag(&amp;lsquo;mahjong&amp;rsquo;, Jekyll::MahjongTag)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>对于我来讲，在短时间内学习Ruby语法是一件比实现代码逻辑更加困难的事情。关于Ruby语法需要说明的有两点：一是Ruby中变量的命名有一套规范，代码中以<code>@</code>开头的变量，代表类的成员变量；二是Ruby中的字符串可以通过<code>#{expression}</code>的方式直接引用一个变量或表达式的值。<br/>
需要注意到的是，在上面的代码中，我生成html的时候，为每个image增加了一个属性<code>class="mahjong"</code>。为什么要这样呢？因为Octopress自己的主题中，显示的图片有默认的样式，如果我们不加这一句，显示时就会按照默认的样式显示。而Octopress默认的样式有很粗的白色边框，还有阴影效果，不适合显示麻将牌。下图是Octopress默认的显示效果：<br/>
<img src="http://smwlover.github.io/images/mahjong/tate/1.png" /><br/>
为了覆盖这种默认的显示效果，我为每个image添加一个属性<code>class="mahjong"</code>，并且在<code>sass/custom/_styles.scss</code>文件中添加了分类器：</p>

<p><figure class='code'><figcaption><span>_styles.scss </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.mahjong</span><span class="p">{</span>
</span><span class='line'>        <span class="na">border</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-radius</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>        <span class="na">box-shadow</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这样，我们就可以看到没有边框与阴影的麻将牌了。</p>

<h2>三、效果测试</h2>

<h3>类别一：普通麻将牌</h3>

<ul>
<li><code>{% mahjong 3s %}</code>会显示出<img class="mahjong" src="/images/mahjong/tate/12.png"/>；</li>
<li><code>{% mahjong 6p %}</code>会显示出<img class="mahjong" src="/images/mahjong/tate/24.png"/>；</li>
<li><code>{% mahjong 8m %}</code>会显示出<img class="mahjong" src="/images/mahjong/tate/8.png"/>；</li>
<li><code>{% mahjong 3j %}</code>会显示出<img class="mahjong" src="/images/mahjong/tate/30.png"/>;

<h3>类别二：红宝牌与暗牌</h3></li>
<li><code>{% mahjong 5!p %}</code>会显示出<img class="mahjong" src="/images/mahjong/tate/aka5p.png"/>;</li>
<li><code>{% mahjong 5!m %}</code>会显示出<img class="mahjong" src="/images/mahjong/tate/aka5m.png"/>;</li>
<li><code>{% mahjong 5!s %}</code>会显示出<img class="mahjong" src="/images/mahjong/tate/aka5s.png"/>;</li>
<li><code>{% mahjong 0j %}</code>会显示出<img class="mahjong" src="/images/mahjong/tate/back.png"/>;</li>
<li><code>{% mahjong 0p %}</code>会显示出<img class="mahjong" src="/images/mahjong/tate/back.png"/>;

<h3>类别三：横置的牌与红宝牌综合测试</h3></li>
<li><code>{% mahjong 5$j %}</code>会显示出<img class="mahjong" src="/images/mahjong/yoko/32.png"/>;</li>
<li><code>{% mahjong 5!$s %}</code>会显示出<img class="mahjong" src="/images/mahjong/yoko/aka5s.png"/>;</li>
<li><code>{% mahjong 5$!p %}</code>会显示出<img class="mahjong" src="/images/mahjong/yoko/aka5p.png"/>;

<h3>类别四：错误情况测试</h3></li>
<li>本插件定义的错误情况包括：最右端标签不是<code>m, p, s, j</code>；对于标签<code>j</code>，数字范围不在<code>0-7</code>内或对于标签<code>m, p, s</code>，数字范围不在<code>0-9</code>内；或者红宝牌的数字不是5；或者企图将暗牌横置（日麻中暗牌不可能横置）等。</li>
<li><code>{% mahjong 4!s %}</code>会显示出<strong>错误：红宝牌必须是五万、五饼、五索</strong>;</li>
<li><code>{% mahjong 5!j %}</code>会显示出<strong>错误：红宝牌必须是五万、五饼、五索</strong>;</li>
<li><code>{% mahjong 0$j %}</code>会显示出<strong>错误：暗牌不能横置</strong>;</li>
<li><code>{% mahjong 4a %}</code>会显示出<strong>错误：缺少m、p、s、j标签</strong>;</li>
<li><code>{% mahjong bs %}</code>会显示出<strong>错误：m、p、s标签对应的编号只能为0到9</strong>;</li>
<li><code>{% mahjong 8j %}</code>会显示出<strong>错误：j标签对应的编号只能为0到7</strong>;</li>
</ul>


<h2>四、下一步工作：</h2>

<p>接下来要做的就是最开始提到的第二部分，即利用<code>mahjonglist</code>插件实现显示一行麻将牌的功能。当这一部分功能完成之后，我就会开始在我的博客中更新一些关于日麻的内容了~</p>
]]></content>
  </entry>
  
</feed>
