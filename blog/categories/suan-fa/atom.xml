<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 算法 | 美柑の部屋]]></title>
  <link href="http://smwlover.github.io/blog/categories/suan-fa/atom.xml" rel="self"/>
  <link href="http://smwlover.github.io/"/>
  <updated>2016-09-10T14:22:44+08:00</updated>
  <id>http://smwlover.github.io/</id>
  <author>
    <name><![CDATA[smwlover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hihoCoder题目赏析：状态压缩]]></title>
    <link href="http://smwlover.github.io/blog/2016/06/28/state-compression/"/>
    <updated>2016-06-28T09:48:08+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/06/28/state-compression</id>
    <content type="html"><![CDATA[<p>本文来赏析hihoCoder上的一道题目<a href="http://hihocoder.com/problemset/problem/1044">“状态压缩”</a>。我们知道，用动态规划解决问题的时候，状态的表示是很重要的一环。一般来讲，状态可以用一个数组来表示，但是对于有些问题，它们的状态中所包含的信息过多，如果要用数组表示的话，数组的维度会达到四维或以上，这时我们就需要使用状态压缩。状态压缩的核心思想是<strong>用二进制位来表示状态，用位运算来表示状态之间的转化</strong>。这样不仅减少了空间的消耗，而且提高了程序的效率。</p>

<!--more-->


<h2>一、题目</h2>

<h3>背景</h3>

<p>小Hi和小Ho决定乘坐火车前往一座城市，但是不幸的是，他们并没有能够买到很好的火车票——他们只能够乘坐最为破旧的火车进行他们的旅程。<br/>
火车上的人非常多，以致于都没有足够的位置能让每一个人都有地方坐下来。小Hi和小Ho本着礼让他们的心情——当然还因为本来他们买的就是站票，老老实实的呆在两节车厢的结合处。他们本以为就能够这样安稳抵达目的地，但事与愿违，他们这节车厢的乘务员是一个强迫症，每隔一小会都要清扫一次卫生，而时值深夜，大家都早已入睡，这种行为总是会惊醒一些人。一旦相邻的一些乘客被惊醒了大多数的话，就会同乘务员吵起来，弄得大家都睡不好。<br/>
将这一切看在眼里的小Hi与小Ho决定利用他们的算法知识，来帮助这个有着强迫症的乘务员——在不与乘客吵起来的前提下尽可能多的清扫垃圾。<br/>
小Hi和小Ho所处的车厢可以被抽象成连成一列的<code>N</code>个位置，按顺序分别编号为<code>1..N</code>，每个位置上都有且仅有一名乘客在休息。同时每个位置上都有一些垃圾需要被清理，其中第<code>i</code>个位置的垃圾数量为<code>Wi</code>。乘务员可以选择其中一些位置进行清理，但是值得注意的是，一旦编号连续的<code>M</code>个位置中有超过<code>Q</code>个的位置都在这一次清理中被选中的话（即这<code>M</code>个位置上的乘客有至少<code>Q+1</code>个被惊醒了），就会发生令人不愉快的口角。而小Hi和小Ho的任务是，计算选择哪些位置进行清理，在不发生口角的情况下，清扫尽可能多的垃圾。</p>

<h3>输入与输出</h3>

<p>输入数据的第一行为三个正整数<code>N</code>、<code>M</code>和<code>Q</code>，意义如前文所述。<br/>
输入数据的第二行为<code>N</code>个整数，分别为<code>W1</code>到<code>WN</code>，代表每一个位置上的垃圾数目。 <br/>
输出一个整数<code>Ans</code>，表示在不发生口角的情况下，乘务员最多可以清扫的垃圾数目。</p>

<p><div align="center"><table class="blogTable"><caption>样例输入与输出</caption><tr><th>样例输入</th><th>样例输出</th></tr><tr><td><code><span>5 2 1</span><br/><span>36 9 80 69 85</span></code></td><td><code>201</code></td></tr></table></div></p>

<h2>二、列出状态转移方程</h2>

<p>我们定义<code>F(i,p1,p2,...,p(m-1))</code>表示<strong>当前已经完成了第<code>1</code>个位置到第<code>i</code>个位置的清理工作，并且<code>p1</code>表示第<code>i</code>个位置是否被清理（<code>0</code>表示未清理，<code>1</code>表示已清理）、<code>p2</code>表示第<code>i-1</code>个位置是否被清理……<code>p(m-1)</code>表示第<code>i-m+2</code>个位置是否被清理的情况下，最多可以清扫的垃圾数量。</strong>注意到，<code>p1...p(m-1)</code>代表从第<code>i</code>个位置往前的连续<code>m-1</code>个位置。<br/>
假设我们已经求得了<code>F(i,p1,p2,...,p(m-1))</code>的值，我们来讨论第<code>i+1</code>个位置的清理情况：<br/>
如果不清理第<code>i+1</code>个位置，那么我们在该位置的状态可以表示为<code>F(i+1,0,p1,p2,...,p(m-2))</code>，并且由于我们没有在第<code>i+1</code>个位置清理任何垃圾，所以我们清理的垃圾数量相比于第<code>i</code>个位置是没有变化的；<br/>
如果要清理第<code>i+1</code>个位置，我们首先要观察是否违反了题目的条件，即<code>p1...p(m-1)</code>中1的数量是否小于<code>Q</code>。如果不小于<code>Q</code>，我们无法清理第<code>i+1</code>个位置；如果小于<code>Q</code>，我们可以清理，此时该位置的状态可以表示为：<code>F(i+1,1,p1,p2,...,p(m-2))</code>，并且由于我们清理了第<code>i+1</code>个位置的垃圾，所以我们清理的垃圾数量相比于第<code>i</code>个位置增加了<code>W(i+1)</code>。<br/>
综上所述，我们列出的状态转移方程如下：</p>

<p><div align="center"><img src="/images/blogimg/7.png"></div></p>

<p>因为每次状态转移都是从<code>i</code>向<code>i+1</code>进行的，所以我们只需要按照<code>i</code>从小到大的顺序进行计算就可以了。最后，我们找到第<code>N</code>个位置上对应的所有状态，这些状态中清理垃圾数量的最大值即为所求。</p>

<h2>三、状态压缩</h2>

<p>我们如果按照上面的方程求解，那么需要开辟一个维数为<code>M</code>的数组，在<code>M</code>达到两位数的时候显然是不太可能做到的。通过观察发现，对于<code>p1...p(m-1)</code>中的每个<code>p</code>，取值只有0或1两种可能，我们很自然地想到用长度为<code>m-1</code>的二进制串来表示<code>p1...p(m-1)</code>，其最高位代表<code>p1</code>，最低位代表<code>p(m-1)</code>。这样我们动态规划数组的维度可以被直接减少到二维。<br/>
此时，我们的方程可以直接写成<code>F(i,j)</code>，其中<code>i</code>的含义和之前相同，<code>j</code>则是上述二进制串对应的十进制整数，其取值范围为<code>0</code>到<code>2^(m-1)-1</code>。<br/>
如果不清理第<code>i+1</code>个位置，<code>j</code>的变化相当于<strong>右移一位，第一位补0</strong>，即：</p>

<div align="center"><img src="http://smwlover.github.io/images/blogimg/8.png" class="mahjong"/></div>


<p></p>

<p>如果要清理第<code>i+1</code>个位置，<code>j</code>的变化相当于<strong>右移一位，第一位补1</strong>，即：</p>

<div align="center"><img src="http://smwlover.github.io/images/blogimg/9.png" class="mahjong"/></div>


<p></p>

<p>通过状态压缩，我们保存状态只需要开辟<code>N*2^(m-1)</code>大小的空间。在遍历的时候，对于第<code>i</code>行，讨论清理或不清理第<code>i+1</code>个位置的情况，并且填充第<code>i+1</code>行的相应位置。最后观察第<code>N</code>行的所有位置中填充的数据，最大值即为所求。</p>

<h2>四、代码</h2>

<p><figure class='code'><figcaption><span>状态压缩 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">countFlag</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">num</span><span class="p">){</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">Q</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span> <span class="o">&gt;&gt;</span> <span class="n">Q</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">rubbish</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">rubbish</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="n">M</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">table</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">size</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="n">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">size</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="c1">//考虑第i+1个位置选还是不选：</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">countFlag</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Q</span><span class="p">)</span> <span class="c1">//可以选择：</span>
</span><span class='line'>                <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][(</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;(</span><span class="n">M</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">j</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][(</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;(</span><span class="n">M</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">j</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">)],</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">rubbish</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="c1">//不选的情况：</span>
</span><span class='line'>            <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//遍历最后一行，找到最大值：</span>
</span><span class='line'><span class="kt">int</span> <span class="n">maxRubbish</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">size</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">maxRubbish</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">maxRubbish</span><span class="p">,</span> <span class="n">table</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">maxRubbish</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hihoCoder题目赏析：刷油漆]]></title>
    <link href="http://smwlover.github.io/blog/2016/06/25/painting/"/>
    <updated>2016-06-25T09:30:10+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/06/25/painting</id>
    <content type="html"><![CDATA[<p>本文来赏析hihoCoder上的一道题目<a href="http://hihocoder.com/problemset/problem/1055">“刷油漆”</a>。为了解决这个题目，本文首先介绍了0-1背包和完全背包问题，它们在动态规划系列问题中是比较基础和典型的。然后本文在这两个问题的基础上，介绍了“刷油漆”问题的思路，并引入了一种名为“树形DP”的方法。</p>

<!--more-->


<h2>一、题目描述</h2>

<h3>1.1 背景故事</h3>

<p>小Ho有着一棵灰常好玩的树玩具！这棵树玩具是由<code>N</code>个小球和<code>N-1</code>根木棍拼凑而成，这<code>N</code>个小球都被小Ho标上了不同的数字，并且这些数字都是处于<code>1..N</code>的范围之内，每根木棍都连接着两个不同的小球，并且保证任意两个小球间都不存在两条不同的路径可以互相到达。<br/>
小Ho的树玩具的质量似乎不是很好，短短玩了几个星期，便掉漆了！<br/>
“简直是一场噩梦！”小Ho拿着树玩具眼含热泪道。<br/>
“这有什么好忧伤的，自己买点油漆刷一刷不就行了？”小Hi表示不能理解。<br/>
“还可以这样？”小Ho顿时兴高采烈了起来，立马跑出去买回来了油漆。<br/>
但是小Ho身上的钱却不够——于是他只买回了有限的油漆，这些油漆最多能给<code>M</code>个结点涂上颜色，这就意味着小Ho不能够将他心爱的树玩具中的每一个结点都涂上油漆！小Ho低头思索了半天——他既不想只选一部分结点补漆，也不想找小Hi借钱，但是很快，他想出了一个非常棒的主意：将包含1号结点的一部分连通的结点进行涂漆（这里的连通指的是这一些涂漆的结点可以互相到达并且不会经过没有涂漆的结点），然后将剩下的结点拆掉！<br/>
那么究竟选择哪些结点进行涂漆呢？小Ho想了想给每个结点都评上了分——他希望最后留下来，也就是涂漆了的那些结点的评分之和可以尽可能的高！小Ho该如何做呢？</p>

<h3>1.2 输入与输出</h3>

<p>输入的第一行为两个整数<code>N</code>、<code>M</code>，意义如前文所述。<br/>
输入的第二行为<code>N</code>个整数，其中第<code>i</code>个整数<code>Vi</code>表示标号为<code>i</code>的结点的评分。<br/>
输入的第3~N+1行，每行分别描述一根木棍，其中第<code>i+1</code>行为两个整数<code>Ai</code>、<code>Bi</code>，表示第<code>i</code>根木棍连接的两个小球的编号。<br/>
要求输出一个整数，表示使得涂漆结点的评分之和最高可能是多少。</p>

<p><div align="center"><table class="blogTable"><caption>样例输入与输出</caption><tr><th>样例输入</th><th>样例输出</th></tr><tr><td><code><span>10 4</span><br/><span>370 328 750 930 604 732 159 167 945 210</span><br/><span>1 2</span><br/><span>2 3</span><br/><span>1 4</span><br/><span>1 5</span><br/><span>4 6</span><br/><span>4 7</span><br/><span>4 8</span><br/><span>6 9</span><br/><span>5 10</span></code></td><td><code>2977</code></td></tr></table></div></p>

<h2>二、引子一：0-1背包</h2>

<p>背包问题是很基础也很典型的动态规划问题，是每个学习动态规划的人无法绕过的。背包问题指的是在给定<code>N</code>件物品（编号为<code>1..N</code>）、每件物品的价值<code>value[i]</code>以及每件物品的体积<code>need[i]</code>的前提下，计算可以放入总体积为<code>M</code>的背包中的物品的最大价值的问题。而背包问题根据同一物体最多只能选择一次还是可以选择任意多次，又分为0-1背包问题和完全背包问题两类，这一部分主要讨论0-1背包问题。<br/>
我们令<code>F(i,j)</code>表示选择前<code>i</code>件物品且背包剩余体积为<code>j</code>的情况下，可以达到的最大价值。为了计算<code>F(i,j)</code>，我们需要考虑两种情况：第一种情况是如果背包剩余体积<code>j</code>大于第<code>i</code>件物品的体积<code>need[i]</code>，我们可以选择第<code>i</code>件物品，这样我们只有<code>j-need[i]</code>的体积来容纳前<code>i-1</code>件物品，此时的价值为<code>F(i-1,j-need[i])+value[i]</code>；第二种情况是我们没有选择第<code>i</code>件物品，这样我们仍然有<code>j</code>的体积来容纳前<code>i-1</code>件物品，此时的价值为<code>F(i-1,j)</code>。<code>F(i,j)</code>为上述两个表达式中值较大的一个。<code>F(N,M)</code>即为我们要求的最终结果。<br/>
该算法的时间和空间复杂度是<code>O(N*M)</code>，因为需要生成一张<code>N*M</code>大小的表格并且将其填满。但是我们可以采取一些手段节省空间，通过状态转移方程，我们发现<code>F(i,j)</code>的值只与表格上一行的内容有关。所以我们可以只存储<code>i</code>和<code>i-1</code>两行，这样可以使空间复杂度减少至<code>O(M)</code>。</p>

<p><figure class='code'><figcaption><span>0-1背包 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">objectCount</span><span class="p">,</span> <span class="n">totalCapacity</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">objectCount</span> <span class="o">&gt;&gt;</span> <span class="n">totalCapacity</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">need</span><span class="p">(</span><span class="n">objectCount</span><span class="p">);</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">(</span><span class="n">objectCount</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">objectCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">need</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//Dynamic programming:</span>
</span><span class='line'><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">table</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">table</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">totalCapacity</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">table</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">totalCapacity</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">curTable</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">//curTable为true代表当前计算的是table[1]，否则代表当前计算的是table[0]。</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">objectCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">curTable</span> <span class="o">=</span> <span class="o">!</span><span class="n">curTable</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">totalCapacity</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">need</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">table</span><span class="p">[</span><span class="n">curTable</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="o">!</span><span class="n">curTable</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="n">need</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">table</span><span class="p">[</span><span class="o">!</span><span class="n">curTable</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">table</span><span class="p">[</span><span class="n">curTable</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="o">!</span><span class="n">curTable</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">table</span><span class="p">[</span><span class="n">curTable</span><span class="p">][</span><span class="n">totalCapacity</span><span class="p">];</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>补充：动态规划问题的两种性质</h3>

<ul>
<li><strong>重复子问题：</strong>就像递归一样，计算一个问题可以归结到对更小问题的计算上。比如0-1背包中计算<code>F(i,j)</code>可以归结到对<code>F(i-1,j-need[i])</code>的计算上。对于两个问题<code>F(i,j)</code>和<code>F(i',j')</code>，如果都能归结到对子问题<code>F(a,b)</code>的计算上，则<code>F(a,b)</code>不需要重复计算两次，因为<code>F(a,b)</code>的计算结果已经被保存下来了。</li>
<li><strong>无后效性：</strong>如果计算<code>F(i,j)</code>时用到了已经计算好的<code>F(a,b)</code>的值，我们无需关心<code>F(a,b)</code>的值究竟是对应着哪一种选择方案，它的具体选择方案不会对之后的决策产生影响。我们只需要关心<code>F(a,b)</code>的值本身。</li>
</ul>


<h2>三、引子二：完全背包</h2>

<p>对于完全背包，和0-1背包相比的不同之处在于每件物品可以选取很多次，我们可以建立一个与0-1背包类似的状态转移方程：对于第<code>i</code>件物品，我们可以枚举选择它的次数<code>k</code>，其取值范围为<code>[0,j/need[i]]</code>。所以状态转移方程为：<br/>
<code>F(i,j) = max{F(i-1, j-need[i]*k)+value[i]*k}</code><br/>
在上述算法中，计算每个<code>F(i,j)</code>的值需要循环<code>k</code>次，这使得该算法的时间复杂度几乎等于<code>O(N*M^2)</code>。经过观察发现，该算法进行了大量的重复计算，我们可以对该算法进行改进，改进之后的状态转移方程为：<br/>
<code>F(i,j) = max{F(i-1,j), F(i,j-need[i])+value[i]}</code><br/>
计算每个<code>F(i,j)</code>的值只需要<code>O(1)</code>的时间复杂度。其中，前一项表示不选第<code>i</code>件物品；后一项表示选第<code>i</code>件物品一次，注意到选择完这一次之后，还是继续讨论对第<code>i</code>件物品的选择。这样重复计算就被消除了，时间复杂度被降低到<code>O(N*M)</code>。另外，像0-1背包一样，完全背包也可以将空间从<code>O(N*M)</code>优化为<code>O(M)</code>。</p>

<h2>四、“刷油漆”问题之解</h2>

<p>我们令<code>F(node,i,j)</code>表示为结点<code>node</code>分配<code>j</code>个刷油漆的指标（即以<code>node</code>为根的子树中有<code>j</code>个结点被刷油漆），然后从该结点的前<code>i</code>个子结点中选择，总共可以达到的最大价值。这样我们要求的最终结果可以表示为<code>F(root,root-&gt;childCount,M)</code>。<br/>
我们假设我们为子结点<code>node-&gt;child[i]</code>分配<code>k</code>个指标，那么这个子结点可以提供的最大价值为<code>F(node-&gt;child[i],node-&gt;child[i]-&gt;childCount,k)</code>。除去该子结点之外，我们只剩下<code>j-k</code>个指标分配给<code>node-&gt;child[i]</code>之前的结点了，这些结点能提供的最大价值为<code>F(node,i-1,j-k)</code>。根据上面的分析，我们可以列出状态转移方程：<br/>
<strong><code>F(node,i,j)=max{F(node,i-1,j-k)+F(node-&gt;child[i],node-&gt;child[i]-&gt;childCount,k)}</code></strong><br/>
上面的等式中<code>k</code>的取值范围为<code>[0,j-1]</code>，因为根据题意，为以结点<code>node</code>为根的子树刷油漆时，需要最先为<code>node</code>结点本身刷油漆，所以分配的<code>j</code>个指标中有一个是给<code>node</code>自己的，能分配给<code>node</code>的某个子结点的指标最多只有<code>j-1</code>个。<br/>
进一步地，我们讨论一些边界情况：<br/>
<code>j=0</code>的时候，也就是没有为结点<code>node</code>分配任何指标，最后的价值肯定为<code>0</code>；<br/>
<code>j=1</code>的时候，只能为结点<code>node</code>本身刷油漆，所以最后的价值肯定为<code>v[node]</code>；<br/>
<code>i=0</code>且<code>j&gt;0</code>的时候，即使为结点<code>node</code>分配的指标再多，因为不选任何一个子结点，所以最后的价值也只能是<code>v[node]</code>。</p>

<p>那么应该如何实现上述状态转移方程呢？一般情况下，动态规划可以用数组来实现，数组的每一个维度对应状态转移方程中的一个参数。但是本题并不适用，因为数组不方便表示树中结点的父子关系。本题需要用的方法叫做<strong>树形DP</strong>，它将树的遍历和动态规划结合到一起：在树中的每个结点上都定义一个动态规划的表格，对父结点表格的计算依赖于子结点表格的计算结果，这就决定了我们可以通过一趟后序遍历将所有结点的表格填充完毕。</p>

<p><figure class='code'><figcaption><span>刷油漆 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">Node</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">label</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">visited</span><span class="p">;</span> <span class="c1">//该结点是否已经开始访问；</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">childCount</span><span class="p">;</span> <span class="c1">//子结点个数；</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">table</span><span class="p">;</span> <span class="c1">//该结点对应的动态规划表格，大小是(k+1)&lt;em&gt;(M+1)，其中k为该结点的子结点个数；</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Node</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&gt;</span> <span class="n">neighbors</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&gt;</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="o">:</span> <span class="n">label</span><span class="p">(</span><span class="n">l</span><span class="p">),</span> <span class="n">visited</span><span class="p">(</span><span class="nb">false</span><span class="p">),</span> <span class="n">childCount</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">neighbors</span><span class="p">(</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Node</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&gt;</span><span class="p">()),</span> <span class="n">child</span><span class="p">(</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Node</span><span class="o">*&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)){}</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">traverse</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">M</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">value</span><span class="p">){</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">visited</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//遍历每个子结点：</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">neighbors</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">*</span> <span class="n">curNeighbor</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">neighbors</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">curNeighbor</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">visited</span><span class="p">){</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">childCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">child</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">curNeighbor</span><span class="p">);</span>
</span><span class='line'>        <span class="n">traverse</span><span class="p">(</span><span class="n">curNeighbor</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">table</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">childCount</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">M</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">childCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">[</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">M</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">table</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">[</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">childCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">M</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">//可以为第i个子结点分配0...j-1个空间，分配0个空间即不选择第i个子结点：</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">maxValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">maxValue</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">maxValue</span><span class="p">,</span> <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">child</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">table</span><span class="p">[</span><span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">child</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">childCount</span><span class="p">][</span><span class="n">k</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">maxValue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">vertexNum</span><span class="p">,</span> <span class="n">M</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">vertexNum</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&gt;</span> <span class="n">graph</span><span class="p">(</span><span class="n">vertexNum</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">(</span><span class="n">vertexNum</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">vertexNum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">vertex1</span><span class="p">,</span> <span class="n">vertex2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vertexNum</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">vertex1</span> <span class="o">&gt;&gt;</span> <span class="n">vertex2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">graph</span><span class="p">[</span><span class="n">vertex1</span><span class="p">])</span>
</span><span class='line'>            <span class="n">graph</span><span class="p">[</span><span class="n">vertex1</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">vertex1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">graph</span><span class="p">[</span><span class="n">vertex2</span><span class="p">])</span>
</span><span class='line'>            <span class="n">graph</span><span class="p">[</span><span class="n">vertex2</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">vertex2</span><span class="p">);</span>
</span><span class='line'>        <span class="n">graph</span><span class="p">[</span><span class="n">vertex1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">neighbors</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">vertex2</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">graph</span><span class="p">[</span><span class="n">vertex2</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">neighbors</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">vertex1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">root</span> <span class="o">=</span> <span class="n">graph</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//在一次后序遍历的过程中为每个结点生成动态规划表格：</span>
</span><span class='line'>    <span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//最后结果对应F(root, root-&gt;childCount, M);</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">childCount</span><span class="p">][</span><span class="n">M</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//Delete:</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">vertexNum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="k">delete</span> <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试常见问题盘点：双指针]]></title>
    <link href="http://smwlover.github.io/blog/2016/06/09/two-pointers/"/>
    <updated>2016-06-09T15:22:29+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/06/09/two-pointers</id>
    <content type="html"><![CDATA[<p>在关于数组的问题中，有那么一类问题，它们可以利用双指针（Two Pointers）方法解决。需要说明的一点是，这里提到的“指针”不一定指的是严格意义上的指针，在很多场合下，它被用来代指用来进行遍历的下标<code>i</code>或<code>j</code>。所以“双指针”问题其实就是利用两个下标<code>i</code>和<code>j</code>对数组进行遍历的一类问题。本文就来列举一部分面试中经常涉及到的“双指针”问题。</p>

<!--more-->


<h2>类别一</h2>

<h3>1、Two Sum问题</h3>

<p><strong>问题：</strong>输入一个排好序的<code>int</code>类型数组<code>arr</code>，以及一个整数<code>target</code>。判断<code>arr</code>中是否存在两个元素，它们的和等于<code>target</code>。<br/>
<strong>解法：</strong>这个问题是双指针问题中比较基础并且比较典型的一类问题了。我们定义两个指针<code>i</code>和<code>j</code>，分别从数组的左右端点开始遍历，在遍历时，观察<code>arr[i]</code>和<code>arr[j]</code>的和<code>sum</code>。如果<code>sum &gt; target</code>，则<code>j--</code>；如果<code>sum &lt; target</code>，则<code>i++</code>。如果<code>i</code>和<code>j</code>已经相遇但是仍未找到答案，则说明原数组不存在这样的两个元素。<br/>
<strong>分析：</strong>相比起<code>O(n2)</code>的暴力解法，双指针的方法进行了剪枝，将时间复杂度减少到了<code>O(n)</code>。</p>

<h3>2、判断一个字符串是否是回文字符串</h3>

<p><strong>问题：</strong>输入一个字符串<code>str</code>，判断它是不是回文字符串。<br/>
<strong>解法：</strong>仍然是定义两个指针<code>i</code>和<code>j</code>，分别从字符串的左右端点开始遍历。在每个迭代中，观察<code>str[i]</code>和<code>str[j]</code>是否相等，并且令<code>i</code>右移一格、<code>j</code>左移一格，直到两个指针相遇。<br/>
<strong>分析：</strong>同类的题目还有在<code>O(n)</code>时间内原地反转字符串等。</p>

<h3>3、容积最大的容器</h3>

<p><strong>问题：</strong>Given <code>n</code> non-negative integers <code>a1</code>, <code>a2</code>, &hellip;, <code>an</code>, where each represents a point at coordinate <code>(i, ai)</code>. <code>n</code> vertical lines are drawn such that the two endpoints of line <code>i</code> is at <code>(i, ai)</code> and <code>(i, 0)</code>. Find two lines, which together with x-axis forms a container, such that the container contains the most water. <em>Note: You may not slant the container.</em><br/>
<strong>解法：</strong>暴力解法的时间复杂度为<code>O(n2)</code>，能不能像前面提到的Two Sum问题一样进行剪枝呢？答案是肯定的。<br/>
我们在遍历的过程中用<code>maxWater</code>记录当前最大的容积。假设容器的两条边是<code>0</code>和<code>n-1</code>号，我们可以算出一个容量<code>F(0,n-1) = height[0] * (n-1)</code>，将其作为<code>maxWater</code>的初始值。<br/>
我们注意到：<strong>如果<code>0</code>号边的高度不大于<code>n-1</code>号边的高度，所有以<code>0</code>号边为左侧边的容器容积都比<code>F(0,n-1)</code>小。</strong>因为所有这样的容器高度肯定不大于<code>height[0]</code>，但是宽度却一定小于<code>n-1</code>，所以其容积肯定小于<code>F(0,n-1)</code>，所以我们不需要对这些情况进行枚举。同理，如果<code>0</code>号边的高度大于<code>n-1</code>号边的高度，我们就不需要对其他以<code>n-1</code>号边作为右侧边的容器进行枚举了。<br/>
这样我们就完成了剪枝。我们定义两个指针<code>i</code>和<code>j</code>，分别从数组的左右端点开始遍历。每个迭代，先算出<code>F(i,j)</code>并更新<code>maxWater</code>的值，然后根据前面得出的结论：如果<code>height[i]</code>不大于<code>height[j]</code>，直接<code>i++</code>；否则直接<code>j--</code>。显然，这种方法的时间复杂度是<code>O(n)</code>。</p>

<p><figure class='code'><figcaption><span>Container With Most Water </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">maxArea</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">maxWater</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p2</span><span class="p">){</span>
</span><span class='line'>    <span class="n">maxWater</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">maxWater</span><span class="p">,</span> <span class="n">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">p1</span><span class="p">],</span> <span class="n">height</span><span class="p">[</span><span class="n">p2</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="n">p2</span><span class="o">-</span><span class="n">p1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">p2</span><span class="p">])</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">p2</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">maxWater</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>总结</h3>

<p>这一类的双指针问题有一个共同之处：分别从数组的左右端点开始遍历。其中，问题二需要这样做，是因为需要研究字符串本身的对称性；问题一和问题三需要这样做，是对暴力搜索进行剪枝的结果。</p>

<h2>类别二</h2>

<h3>1、删除数组中所有值等于<code>val</code>的元素</h3>

<p><strong>问题：</strong>Given an array and a value, remove all instances of that value in place and return the new length. <em>Note: The order of elements can be changed. It doesn&rsquo;t matter what you leave beyond the new length.</em><br/>
<strong>解法：</strong>通常我们会使用一个新的数组来存储那些不被删除的数，这样就能够很顺利的完成任务。但是实际上由于在这个过程中，新数组的大小是肯定会小于原本数组中已经处理过的数的数量的，所以我们就可以直接利用原本数组中已经处理过的数的位置，避免再开一个额外的数组。所以这里就用到了一种思想，定义两个指针<code>i</code>和<code>cnt</code>，<code>i</code>是遍历用的指针，<code>cnt</code>指向新数组的下一个位置。每当<code>i</code>遍历到一个符合条件的元素，就通过<code>arr[cnt++] = arr[i]</code>将其加入到新数组中。此方法的时间复杂度是<code>O(n)</code>。</p>

<p><figure class='code'><figcaption><span>Remove Element </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">removeElement</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>            <span class="n">nums</span><span class="p">[</span><span class="n">cnt</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>2、奇偶分类</h3>

<p><strong>问题：</strong>输入一个数组，将其进行重排，使得所有奇数位于所有偶数的前面。<br/>
<strong>解法：</strong>我们定义两个指针<code>i</code>和<code>j</code>，其中<code>j</code>是遍历用的指针，<code>i</code>则记录了当前数组奇数部分的下一个位置。每当<code>j</code>遍历到一个奇数时，就交换<code>arr[i]</code>和<code>arr[j]</code>的值，然后<code>i++</code>。这样当数组遍历完毕后，<code>arr[0..i-1]</code>就存储了所有的奇数，剩下的部分则存储了所有的偶数。</p>

<p><figure class='code'><figcaption><span>Classify Odd And Even Numbers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">num</span><span class="p">;</span> <span class="c1">//输入数组长度</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">arr</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">num</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="c1">//依次输入数组元素</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//奇数部分的下一个位置</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">num</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0x1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">num</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>3、替换空格</h3>

<p><strong>问题：</strong>实现一个函数，把字符串中的每个空格都替换成<code>"%20"</code>。<br/>
<strong>解法：</strong>如果是暴力解法，从前往后遍历字符串，在遍历到空格的时候，就将后面的所有字符后移两格，这样的方法在最坏情况下（字符串中都是空格）是<code>O(n2)</code>的。我们有更快的解法，其时间复杂度为<code>O(n)</code>，每个字符只需要向后移动一次，那就是“从后往前替换字符串”。<br/>
首先遍历一遍原字符串确认有多少个空格，这样我们就得到了新字符串的长度。然后我们令<code>p1</code>从原字符串的末尾往前遍历，<code>p2</code>指向新字符串中已经被替换好的部分的前一个元素。如果<code>arr[p1]</code>不是空格，直接将其拷贝到<code>arr[p2]</code>的位置，然后<code>p2</code>左移一格；如果<code>arr[p1]</code>是空格，则在<code>p2</code>位置依次插入<code>0</code>、<code>2</code>和<code>%</code>。</p>

<p><figure class='code'><figcaption><span>Replace Space </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">replaceSpace</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">arr</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">spaceCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>            <span class="n">spaceCount</span><span class="o">++</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">2</span><span class="o">*</span><span class="n">spaceCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">arr</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p2</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p2</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">p1</span><span class="p">];</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">--</span><span class="p">,</span> <span class="n">p2</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p2</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p2</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;2&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p2</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;%&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>总结</h3>

<p>这一类的双指针问题有一个共同之处：其中一个指针用于遍历，另一个指针指向数组已完成部分的下一个元素。这种方法可以节省空间，或者减少数据重复移动的次数。</p>

<h2>类别三</h2>

<h3>1、无重复字符的最长子字符串</h3>

<p><strong>问题：</strong>Given a string, find the length of the longest substring without repeating characters. <em>For example, the longest substring without repeating letters for</em> <code>"abcabcbb"</code> <em>is</em> <code>"abc"</code><em>, which the length is 3. For</em> <code>"bbbbb"</code> <em>the longest substring is</em> <code>"b"</code><em>, with the length of 1.</em><br/>
<strong>解法：</strong>利用<code>p1</code>和<code>p2</code>两个指针构成一个窗口，其中<code>p1</code>指向窗口的第一个元素，<code>p2</code>指向窗口最后一个元素的下一个元素。我们利用一个hashmap记录窗口中各个字符的出现次数，并且保证窗口中没有重复字符。<br/>
具体做法是：观察即将加入窗口中的字符<code>str[p2]</code>。如果该字符没有在窗口中出现过，我们可以直接将该字符加入窗口中，即<code>p2++</code>，同时调整hashmap的记录；如果该字符在窗口中出现过，那么我们令<code>p1++</code>来缩小窗口的大小，同时调整hashmap的记录，直到该字符没有在窗口中出现为止。在遍历的过程中，记录窗口达到的最大长度。算法的时间复杂度为<code>O(n)</code>。</p>

<p><figure class='code'><figcaption><span>Longest Substring Without Repeating Characters </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'><span class="n">unordered_map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">hashmap</span><span class="p">;</span>
</span><span class='line'><span class="n">hashmap</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">p1</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span> <span class="c1">//首元素加入哈希表。</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">maxLength</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">curLength</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p2</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">size</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">hashmap</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">p2</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">p2</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p2</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">curLength</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">maxLength</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">maxLength</span><span class="p">,</span> <span class="n">curLength</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">p1</span><span class="p">]]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">curLength</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">maxLength</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>2、Minimum Window Substring</h3>

<p><strong>问题：</strong>Given a string <code>S</code> and a string <code>T</code>, find the minimum window in <code>S</code> which will contain all the characters in <code>T</code> in complexity <code>O(n)</code>. For example,  <br/>
<code>
<span>S = &ldquo;ADOBECODEBANC&rdquo;</span><br/>
<span>T = &ldquo;ABC&rdquo;</span>
</code><br/>
Minimum window is <code>"BANC"</code>.<br/>
<em>Note: If there is no such window in</em> <code>S</code> <em>that covers all characters in</em> <code>T</code><em>, return the empty string</em> <code>""</code><em>. If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in</em> <code>S</code><em>.</em><br/>
<strong>解法：</strong>我们仍然利用两个指针<code>p1</code>和<code>p2</code>组成一个窗口，其中<code>p1</code>指向窗口的第一个元素，<code>p2</code>指向窗口最后一个元素的下一个元素。我们还要定义一个哈希表<code>set</code>，表示<code>T</code>中出现过哪些字符，如果遍历到没有在<code>T</code>中出现过的字符，我们可以将该字符跳过，继续遍历下一个字符。<br/>
为了记录窗口中的字符和<code>T</code>中字符的匹配情况，我们定义一个整数<code>count</code>，表示<code>T</code>中待匹配的字符数量，<code>count</code>等于<code>0</code>说明<code>T</code>中所有字符都已经匹配上；另外，定义一个哈希表<code>num</code>，表示每个字符的待匹配次数，比如当<code>num['a']</code>等于<code>2</code>时，说明窗口中还要再包括进两个<code>'a'</code>才能满足题意。需要注意的是，<strong><code>num</code>中字符对应的待匹配次数可以为负，负数说明该字符过匹配（出现次数太多了）。</strong></p>

<p>在每次遍历中，我们首先检查<code>count</code>是否大于<code>0</code>。<br/>
如果<code>count</code>大于<code>0</code>，说明还有字符待匹配，我们需要将<code>s[p2]</code>加入到窗口中，并且令<code>num[s[p2]]--</code>。如果该字符还没有过匹配（<code>num[s[p2]]&gt;=0</code>），那么将该字符加入窗口后，待匹配的字符数量减少<code>1</code>，所以<code>count--</code>；如果<code>s[p2]</code>过匹配（<code>num[s[p2]]&lt;0</code>），那么将该字符加入窗口后并不能使待匹配的字符数量减少，所以<code>count</code>不发生变化。<br/>
如果<code>count</code>等于<code>0</code>，说明已经找到了一个符合题意的窗口，我们需要将记录当前窗口的长度，然后继续向下搜索：从窗口中取出<code>s[p1]</code>，并且令<code>num[s[p1]]++</code>。如果发现<code>num[s[p1]]&gt;0</code>，说明该字符从匹配状态变成了未匹配状态，所以待匹配的字符数量增加<code>1</code>，即<code>count++</code>；如果发现<code>num[s[p1]]&lt;=0</code>，说明该字符仍是匹配状态，待匹配的字符数量并没有增加，所以<code>count</code>不发生变化。</p>

<p><figure class='code'><figcaption><span>Minimum Window Substring </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">string</span> <span class="nf">minWindow</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">,</span> <span class="n">string</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">unordered_map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">charNum</span><span class="p">;</span>
</span><span class='line'><span class="n">unordered_map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">charSet</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">charSet</span><span class="p">[</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">charNum</span><span class="p">[</span><span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">minLen</span> <span class="o">=</span> <span class="mi">2147483647</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">minStart</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p2</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">char</span> <span class="n">chr</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">p2</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">charSet</span><span class="p">[</span><span class="n">chr</span><span class="p">]){</span>
</span><span class='line'>            <span class="n">charNum</span><span class="p">[</span><span class="n">chr</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">charNum</span><span class="p">[</span><span class="n">chr</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p2</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">p2</span> <span class="o">-</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">len</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">minLen</span><span class="p">){</span>
</span><span class='line'>            <span class="n">minLen</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>            <span class="n">minStart</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">chr</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">p1</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">charSet</span><span class="p">[</span><span class="n">chr</span><span class="p">]){</span>
</span><span class='line'>            <span class="n">charNum</span><span class="p">[</span><span class="n">chr</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">charNum</span><span class="p">[</span><span class="n">chr</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">minLen</span> <span class="o">==</span> <span class="mi">2147483647</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">minStart</span><span class="p">,</span> <span class="n">minLen</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>总结</h3>

<p>这一类的双指针问题主要是利用两个指针构造一个窗口，然后对窗口的内容进行讨论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试常见问题盘点：第k大元素]]></title>
    <link href="http://smwlover.github.io/blog/2016/06/03/kth-largest-element/"/>
    <updated>2016-06-03T15:28:17+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/06/03/kth-largest-element</id>
    <content type="html"><![CDATA[<p>数组本身结构简单，但是对数组进行操作会涉及到很多经典算法，这使得数组成为了面试中最热门的考点之一。这篇文章就总结一下求数组的第<code>k</code>小/第<code>k</code>大元素，或者中位数的问题。</p>

<!--more-->


<h2>一、求数组中第k小/第k大元素</h2>

<p><strong>问题：</strong>输入一个数组以及一个整数<code>k</code>，返回数组中第<code>k</code>大的元素。<br/>
看到这个问题，我们的第一反应可能是先将输入的数组排序，这样一来，算法的时间复杂度就至少是<code>O(nlogn)</code>。其实，解决这类问题有一种更快的方法，它是基于快速排序的<code>partition</code>函数实现的。</p>

<h3>1.1 <code>partition</code>函数概述</h3>

<p><code>partition</code>函数的作用是选择一个标记元素<code>pivot</code>（一般取数组第一个元素为标记元素），将原数组划分为两部分，左边一部分元素比<code>pivot</code>小，右边一部分元素比<code>pivot</code>大，<code>pivot</code>位于中间。该函数的大致流程如下：<br/>
<strong>1. 初始：</strong>记录两个下标<code>p1</code>和<code>p2</code>。<code>p1</code>记录了比<code>pivot</code>小的部分的最后一个元素的下标，初始值为<code>0</code>；<code>p2</code>记录了当前正在遍历的元素的下标，初始值为<code>1</code>。<br/>
<strong>2. 迭代：</strong>每当<code>p2</code>遍历到一个比<code>pivot</code>小的元素，则将<code>p1++</code>，然后将<code>arr[p1]</code>的值和<code>arr[p2]</code>的值进行交换。<br/>
<strong>3. 结束：</strong>在遍历完毕后，<code>arr[1..p1]</code>存放的就是所有小于<code>pivot</code>的元素，<code>arr[p1+1..p2]</code>存放的就是所有的大于<code>pivot</code>的元素。我们将<code>arr[0]</code>和<code>arr[p1]</code>交换，这样标记元素<code>pivot</code>就位于下标为<code>p1</code>的位置，它左侧的元素小于它，它右侧的元素大于它。</p>

<h3>1.2 基于<code>partition</code>函数的求第<code>k</code>大元素的算法</h3>

<p>首先对整个数组进行一次划分，观察大于<code>pivot</code>的元素数量<code>size</code>。如果<code>size == k-1</code>，说明<code>pivot</code>正好是我们要找的第<code>k</code>大的元素，直接返回<code>pivot</code>即可；如果<code>size &gt; k-1</code>，说明第<code>k</code>大的元素位于右半部分，我们需要对右半部分递归调用<code>partition</code>函数，找右半部分第<code>k</code>大的元素；如果<code>size &lt; k-1</code>，说明第<code>k</code>大的元素位于左半部分，我们需要对左半部分递归调用<code>partition</code>函数，找左半部分第<code>k-1-size</code>大的元素。</p>

<p><figure class='code'><figcaption><span>数组第k大的元素 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">findKthLargest</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">findResult</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">findResult</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">end</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">start</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//Partition:</span>
</span><span class='line'><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span> <span class="n">p2</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">end</span><span class="p">;</span> <span class="n">p2</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">p2</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nums</span><span class="p">[</span><span class="n">start</span><span class="p">]){</span>
</span><span class='line'>        <span class="n">p1</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">p2</span><span class="p">];</span>
</span><span class='line'>        <span class="n">nums</span><span class="p">[</span><span class="n">p2</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">p1</span><span class="p">];</span>
</span><span class='line'>        <span class="n">nums</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">start</span><span class="p">];</span>
</span><span class='line'><span class="n">nums</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">p1</span><span class="p">];</span>
</span><span class='line'><span class="n">nums</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">leftSize</span> <span class="o">=</span> <span class="n">p1</span> <span class="o">-</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">rightSize</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">rightSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">rightSize</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">findResult</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">p1</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">findResult</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">p1</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="o">-</span><span class="n">rightSize</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>该算法的平均时间复杂度为<code>O(n)</code>，与快速排序一样，最坏情况下，时间复杂度为<code>O(n2)</code>。</p>

<h2>二、数组前k小/前k大的元素</h2>

<p><strong>问题：</strong>输入一个数组以及一个整数<code>k</code>，返回数组中前<code>k</code>小的元素。</p>

<h3>2.1 方法一：基于<code>partition</code>函数的算法</h3>

<p>定义<code>partition</code>函数，其返回值为<code>pivot</code>在划分之后所处的下标。首先对整个数组进行一次划分，并观察函数的返回值。<br/>
如果返回值等于<code>k</code>，我们知道<code>arr[0..k-1]</code>肯定都比<code>pivot</code>小，<code>arr[k+1..n-1]</code>肯定都比<code>pivot</code>大，换句话说，<code>arr[0..k-1]</code>就是数组的前<code>k</code>小的元素；如果返回值小于<code>k</code>，我们对右半部分进行递归调用，直到返回值等于<code>k</code>为止；如果返回值大于<code>k</code>，我们对左半部分进行递归调用，直到返回值等于<code>k</code>为止。<br/>
与上一个问题相同，该算法的平均时间复杂度为<code>O(n)</code>。</p>

<p><figure class='code'><figcaption><span>数组前k小的元素 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">partition</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">start</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">p0</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">start</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span> <span class="n">p1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">end</span><span class="p">;</span> <span class="n">p1</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">pivot</span><span class="p">){</span>
</span><span class='line'>        <span class="n">p0</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">p0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p0</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">p1</span><span class="p">];</span>
</span><span class='line'>        <span class="n">arr</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">p0</span><span class="p">];</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="n">p0</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">start</span><span class="p">];</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">p0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">findLeastKElements</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">){</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">index</span> <span class="o">!=</span> <span class="n">k</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">index</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">k</span><span class="p">){</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上述方法尽管效率较高，但是也存在一个致命的问题：<strong>运行时需要将所有数据载入内存</strong>。这就决定了该算法不适合海量数据的场合，比如从一亿个数中找出前一百个数。为了解决这个问题，我们便引入了一种基于堆的方法。</p>

<h3>2.2 方法二：基于堆的算法</h3>

<p>建立一个大根堆，然后遍历数组中的所有元素，在遍历过程中：<br/>
如果堆的大小小于<code>k</code>，则直接将该元素进堆。如果堆的大小等于<code>k</code>，则比较该元素与堆顶元素的大小。由于是大根堆，堆顶元素肯定是堆中最大的元素。如果该元素比堆顶元素还要大，那么该元素不可能是前<code>k</code>小的元素之一（因为堆中已经有<code>k</code>个比它小的元素了），我们可以直接将该元素抛弃；如果该元素比堆顶元素小，我们知道堆顶元素已经不再属于前<code>k</code>小的元素之一了，我们将堆顶元素弹出，然后将该元素进堆。<br/>
在算法执行的过程中，保证堆的大小不大于<code>k</code>。这样算法执行完毕后，堆中的元素就是原数组前<code>k</code>小的元素。</p>

<p><figure class='code'><figcaption><span>数组前k小的元素 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span> <span class="c1">//n为数组元素个数</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">//逐个输入数组元素</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">priority_queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;,</span> <span class="n">less</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">heap</span><span class="p">;</span> <span class="c1">//建立大根堆</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">heap</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'>        <span class="n">heap</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">heap</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="c1">//获取堆顶元素</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">top</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">top</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
</span><span class='line'>            <span class="n">heap</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>            <span class="n">heap</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">heap</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span> <span class="c1">//输出结果</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">heap</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">heap</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>该方法不需要将所有数据载入内存，只需要在内存中保存一个大小为<code>k</code>的堆，所以更适合处理海量数据。因为每次调整堆的时间复杂度为<code>O(logk)</code>，并且最坏情况下，每遍历到一个元素就需要对堆进行一次调整，所以该方法的时间复杂度为<code>O(nlogk)</code>。总体来讲，该方法适用于<code>n</code>较大但是<code>k</code>非常小的情况。</p>

<h2>三、求长度可变数组的中位数</h2>

<p><strong>问题：</strong>有一个数组支持两种操作：一是向该数组中加入一个元素（<code>int</code>类型）；二是求该数组中所有元素的中位数。请实现该数组。<br/>
通过本文的第一节，我们已经知道了计算大小为<code>n</code>的数组中位数的方法：如果<code>n</code>是奇数，那么中位数就是第<code>n/2 + 1</code>大的元素；如果<code>n</code>是偶数，中位数则是第<code>n/2</code>和<code>n/2 + 1</code>大的元素的平均值。我们可以直接利用上面提到的基于<code>partition</code>的方法进行递归求解。<br/>
但是本问题中，数组的长度是逐渐增加的，我们不可能在每次往数组中添加元素之后，都利用<code>O(n)</code>的时间来求新的中位数。我们需要找到更快的方法。</p>

<h3>3.1 最大最小堆法更新中位数</h3>

<p>我们保存一个大根堆和一个小根堆，并且在往数组中添加元素之后，保证以下三个条件：<br/>
1、大根堆中的元素是整个数组中较小的一半元素；<br/>
2、小根堆中的元素是整个数组中较大的一半元素；<br/>
3、大根堆和小根堆的大小之差的绝对值不超过1。<br/>
具体来说，在添加一个元素<code>num</code>时：<br/>
如果<code>num</code>小于大根堆堆顶，说明<code>num</code>位于数组前半部分，将其放入大根堆中；<br/>
如果<code>num</code>大于小根堆堆顶，说明<code>num</code>位于数组后半部分，将其放入小根堆中；<br/>
如果<code>num</code>介于二者之间，则放入哪个堆中都是可以的。<br/>
然后观察两个堆大小之差的绝对值是否超过<code>1</code>，如果是，我们需要调节两个堆的平衡，具体做法为：从元素数量较多的堆中取出一个元素，放入另一个堆中。</p>

<h3>3.2 最大最小堆法获取中位数</h3>

<p>如果大根堆与小根堆的大小相差<code>1</code>，说明原数组大小为奇数。大小较大的那个堆的堆顶元素即为中位数。如果大根堆与小根堆的大小相等，说明原数组大小为偶数。两个堆堆顶元素的平均值即为中位数。</p>

<p><figure class='code'><figcaption><span>求长度可变数组的中位数 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">MedianFinder</span> <span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">priority_queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">less</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">greaterRoot</span><span class="p">;</span> <span class="c1">//大根堆</span>
</span><span class='line'>    <span class="n">priority_queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">smallerRoot</span><span class="p">;</span> <span class="c1">//小根堆&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">MedianFinder</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">greaterRoot</span> <span class="o">=</span> <span class="n">priority_queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">less</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="n">smallerRoot</span> <span class="o">=</span> <span class="n">priority_queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Adds a number into the data structure.</span>
</span><span class='line'><span class="kt">void</span> <span class="n">addNum</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">smallerRoot</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'>        <span class="n">greaterRoot</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//观察大根堆的大小是否比小根堆多1，如果不是，则将大根堆的堆顶元素取出，放到小根堆中。</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">greaterRoot</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">greaterRoot</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>            <span class="n">greaterRoot</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>            <span class="n">smallerRoot</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">num</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">greaterRoot</span><span class="p">.</span><span class="n">top</span><span class="p">()){</span>
</span><span class='line'>            <span class="n">greaterRoot</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">greaterRoot</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="n">smallerRoot</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">greaterRoot</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                <span class="n">greaterRoot</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="n">smallerRoot</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">num</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">smallerRoot</span><span class="p">.</span><span class="n">top</span><span class="p">()){</span>
</span><span class='line'>            <span class="n">smallerRoot</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">smallerRoot</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="n">greaterRoot</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">smallerRoot</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>                <span class="n">smallerRoot</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="n">greaterRoot</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">sizeA</span> <span class="o">=</span> <span class="n">greaterRoot</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">sizeB</span> <span class="o">=</span> <span class="n">smallerRoot</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">sizeA</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">sizeB</span><span class="p">)</span>
</span><span class='line'>                <span class="n">greaterRoot</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">smallerRoot</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Returns the median of current data stream</span>
</span><span class='line'><span class="kt">double</span> <span class="n">findMedian</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sizeA</span> <span class="o">=</span> <span class="n">greaterRoot</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sizeB</span> <span class="o">=</span> <span class="n">smallerRoot</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">sizeA</span> <span class="o">==</span> <span class="n">sizeB</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">greaterRoot</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">+</span> <span class="n">smallerRoot</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">sizeA</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">sizeB</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">greaterRoot</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">smallerRoot</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>该算法每次添加元素的时间复杂度为<code>O(logn)</code>，获取中位数的时间复杂度为<code>O(1)</code>。</p>

<p><div class="expand">扩展：如果要求出数据流中第<code>n/10</code>大的元素该怎么做？<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
改变两个堆的大小比例。要求出第<code>n/2</code>大的元素即中位数时，两个堆是一样大的。<br/>
而要求出第<code>n/10</code>大的元素时，说明有<code>n/10</code>个元素小于目标元素，<code>9n/10</code>个元素大于目标元素。所以我们保证小根堆是大根堆的9倍大小就可以了。
</div></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试常见问题盘点：链表]]></title>
    <link href="http://smwlover.github.io/blog/2016/06/02/linked-list-problems/"/>
    <updated>2016-06-02T16:11:10+08:00</updated>
    <id>http://smwlover.github.io/blog/2016/06/02/linked-list-problems</id>
    <content type="html"><![CDATA[<p>链表是面试中经常被问到的一种数据结构，一是因为它实现简单，二是因为它的实现中涉及到指针操作，而一个人对指针操作的熟练程度很能够体现他的C++程序设计水平。这篇文章就来简单地盘点一下面试中经常会被问到的一些链表方面的问题。</p>

<!--more-->


<h2>一、删除一个给定的链表结点</h2>

<p><strong>问题：</strong>给定单向链表的头指针和一个结点指针，定义一个函数在<code>O(1)</code>的平均时间复杂度内删除该结点。<br/>
在链表中删除一个结点，我们需要知道该结点前驱结点的指针。但是现在只给出指向该结点的指针，又限定了<code>O(1)</code>的平均时间复杂度，所以不能通过遍历的方式找到其前驱结点。这个时候就需要我们跳出常规的思路：我们可以<strong>直接用该结点的后继结点的值覆盖掉该结点的值，然后将其后继结点删除</strong>。<br/>
当然这种方法有一个前提，就是该结点不是链表的最后一个结点。如果是的话，我们只好乖乖地采用正常的方法，从链表头开始遍历找到该结点的前驱结点了。<br/>
我们可以计算一下算法的平均时间复杂度：假设链表中有<code>n</code>个结点，我们的算法复杂度为<code>1</code>的概率为<code>(n-1)/n</code>，复杂度为<code>n</code>的概率为<code>1/n</code>，所以平均复杂度仍然为<code>O(1)</code>，满足要求。<br/>
<strong>总结：</strong>这个题主要考察我们打破常规思维的能力，以及对“平均时间复杂度”的理解。</p>

<h2>二、在一趟遍历内找到链表的中点</h2>

<p><strong>问题：</strong>给定单向链表的头指针，要求在一趟遍历内找到链表的中点。<br/>
通常情况下，我们会先进行一趟遍历，计算链表的长度<code>n</code>，然后再进行一趟遍历，返回第<code>n/2</code>个结点。<br/>
更加快速的解法是利用<strong>快慢指针</strong>，我们定义两个指针<code>slow</code>和<code>fast</code>用于遍历链表，每次迭代，快指针<code>fast</code>向前走两步，慢指针<code>slow</code>向前走一步。这样，当<code>fast</code>走到链表尾端时，<code>slow</code>指针正好指向链表的中点。</p>

<h2>三、判断链表是否存在环</h2>

<p><strong>问题：</strong>给定单向链表的头指针，判断该链表是否存在环。<br/>
仍然是使用快慢指针的方法，定义两个指针<code>slow</code>和<code>fast</code>。如果该链表不存在环，<code>fast</code>走到链表尾端，值会变为<code>NULL</code>；如果该链表存在环，<code>slow</code>和<code>fast</code>最终会相遇。</p>

<p><strong>扩展1：</strong>如何知道环的长度（即位于环中的结点个数）？<br/>
记录下<code>slow</code>和<code>fast</code>相遇的位置<code>p</code>，令<code>slow</code>和<code>fast</code>继续从<code>p</code>位置移动。我们知道，它们最后还是会在<code>p</code>处相遇，此时<code>slow</code>走了一圈，<code>fast</code>走了两圈。所以，记录<code>slow</code>从<code>p</code>开始移动到再次相遇所走的步数，就是环的长度。</p>

<p><strong>扩展2：</strong>如何找出环的入口结点在哪里？<br/>
利用两个指针<code>p1</code>和<code>p2</code>，分别从相遇点<code>p</code>和头结点<code>head</code>开始走，每次走一步，最终<code>p1</code>和<code>p2</code>肯定会相遇，相遇的结点就是环的入口结点。</p>

<p><div class="expand">如何证明？<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
如图所示：<br/>
<div align="center"><img src="/images/blogimg/6.png"></div><br/>
假设头结点到入口结点的距离为<code>a</code>，入口结点到快慢指针相遇结点的距离为<code>x</code>，环的长度为<code>r</code>。从开始到快慢指针相遇为止，慢指针总共走了<code>s</code>步，则快指针走了<code>2s</code>步。另外，假设慢指针在环中转了<code>n1</code>圈，快指针转了<code>n2</code>圈。<br/>
我们可以列出下面等式：<br/></p>

<p><code>
<span>s = a + n1<em>r + x</span><br/>
<span>2s = a + n2</em>r + x</span>
</code>
<br/>
从上面两个等式中可以得出：<br/>
<code>a = (n2 - 2<em>n1) * r - x</code><br/>
由上式可知，若两个指针<code>p1</code>和<code>p2</code>分别从相遇结点和头结点开始移动，<code>p1</code>一定会在转第<code>n2 - 2</em>n1</code>圈的过程中与<code>p2</code>在入口结点相遇。命题得证。
</div></div></p>

<p>下面的代码以链表头结点作为输入，返回指向环的入口结点的指针。如果链表不包含环，则返回<code>NULL</code>：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">ListNode</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">detectCycle</span><span class="p">(</span><span class="n">ListNode</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">head</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="n">ListNode</span><span class="o">*</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p1</span> <span class="o">!=</span> <span class="n">p2</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">p2</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span> <span class="o">||</span> <span class="o">!</span><span class="n">p2</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p1</span> <span class="o">=</span> <span class="n">p1</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p2</span> <span class="o">=</span> <span class="n">p2</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//一个从相遇点走，一个从起点走，二者相遇的地方即为环的起始点：</span>
</span><span class='line'><span class="n">p1</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p1</span> <span class="o">!=</span> <span class="n">p2</span><span class="p">){</span>
</span><span class='line'>    <span class="n">p1</span> <span class="o">=</span> <span class="n">p1</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p2</span> <span class="o">=</span> <span class="n">p2</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>扩展3：</strong>如何求出带环链表的总长度？<br/>
之前已经求出入口结点距离链表头的长度，以及链表环的长度，二者相加，就是带环链表的总长度。</p>

<h2>四、求两个链表的交点</h2>

<p><strong>问题：</strong>给定两个单向链表的头指针，返回指向它们的交点的指针，如果它们没有交点，则返回<code>NULL</code>。（先假设两个链表都没有环。）<br/>
<strong>方法一：</strong>将一个链表的头结点接到另外一个链表尾节点的后面，然后判断得到的新链表是否有环。如果有环，说明原来的链表有交点。<br/>
<strong>方法二：</strong>定义两个指针<code>p1</code>和<code>p2</code>，分别指向第一个链表的头和第二个链表的头，然后每次向前走一格。当<code>p1</code>变为<code>NULL</code>时，将<code>p1</code>重置为第二个链表的头，继续遍历；当<code>p2</code>变为<code>NULL</code>时，将<code>p2</code>重置为第一个链表的头，继续遍历。这样，<code>p1</code>和<code>p2</code>第一次相遇的地方就是两个链表的交点了。<br/>
另外，我们记录<code>p1</code>和<code>p2</code>因为遇到<code>NULL</code>而重置的次数，如果发现已经要进行第二次重置，但两个指针仍然没有相遇，则说明两个链表没有交点。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">ListNode</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">getIntersectionNode</span><span class="p">(</span><span class="n">ListNode</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">headA</span><span class="p">,</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">headB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">headA</span> <span class="o">||</span> <span class="o">!</span><span class="n">headB</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">headA</span><span class="p">;</span>
</span><span class='line'><span class="n">ListNode</span><span class="o">*</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">headB</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">p1Changed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">p2Changed</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">p1</span> <span class="o">!=</span> <span class="n">p2</span><span class="p">){</span>
</span><span class='line'>    <span class="n">p1</span> <span class="o">=</span> <span class="n">p1</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p2</span> <span class="o">=</span> <span class="n">p2</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">p1</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p1Changed</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p1</span> <span class="o">=</span> <span class="n">headB</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p1Changed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">p2</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p2Changed</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p2</span> <span class="o">=</span> <span class="n">headA</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p2Changed</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>扩展：</strong>如果不保证两个链表没有环，该如何判断？<br/>
首先判断两个链表是否有环，如果两个都没有环，直接利用上面的方法判断即可。<br/>
如果一个有环一个没有环，那么两个链表肯定没有交点。<br/>
如果两个都有环：假设利用快慢指针方法对链表<code>A</code>求得的相遇结点为<code>a</code>，对链表<code>B</code>求得的相遇结点为<code>b</code>。我们知道，<code>a</code>一定在<code>A</code>的环上，<code>b</code>一定在<code>B</code>的环上，关键是判断<code>a</code>和<code>b</code>所处的环是不是同一个环。我们从<code>a</code>开始遍历，直到再次遇到<code>a</code>之前，如果我们能够遇到<code>b</code>，说明<code>a</code>和<code>b</code>在一个环上，也就是<code>A</code>和<code>B</code>有交点；否则说明两个链表的环是单独的环，两个链表没有交点。</p>

<h2>五、反向打印链表元素</h2>

<p><strong>问题：</strong>给定单向链表的头指针，反向打印链表中的所有元素。<br/>
对于非递归方式，可以用一个栈来实现，首先遍历链表，将遍历到的元素依次进栈。在遍历完链表之后，弹栈并依次将弹出的元素打印出来。<br/>
当然，本问题也可以用递归方式实现。递归方式类似于树的后序遍历，即先打印后继结点，再打印当前结点。递归方式实现的代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">print</span><span class="p">(</span><span class="n">head</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">head</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>六、反转链表</h2>

<p><strong>问题：</strong>给定单向链表的头指针，将该链表反转，并且返回新链表的头指针。<br/>
当然，一种方法仍然是利用栈。遍历链表并将遍历到的元素一个一个压入栈，然后将栈中的元素弹出并依照弹出的顺序构造一个新的链表。<br/>
但是如果要求<strong>不能使用额外空间</strong>呢？我们需要对链表进行原地反转操作。我们在调整结点<code>node</code>的<code>next</code>指针时，除了需要知道<code>node</code>本身之外，还需要知道<code>node</code>的前一个结点<code>prev</code>，因为我们需要把结点<code>node</code>的<code>next</code>指针赋值成<code>prev</code>；同时我们还要事先保存结点<code>node</code>原本的下一个结点<code>succ</code>，以防止链表因为<code>node-&gt;next</code>被重新赋值而断开。注意这三个变量的相互关系，写出反转链表的迭代形式就很容易了：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">ListNode</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">reverseList</span><span class="p">(</span><span class="n">ListNode</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">head</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">head</span> <span class="o">||</span> <span class="o">!</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">head</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'><span class="n">ListNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">node</span><span class="p">){</span>
</span><span class='line'>    <span class="n">ListNode</span><span class="o">*</span> <span class="n">succ</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span> <span class="o">=</span> <span class="n">prev</span><span class="p">;</span>
</span><span class='line'>    <span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">succ</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">prev</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>反转链表也可以用递归的形式来实现，其实本质上和树的后序遍历仍然是类似的，即先反转后继结点，再反转当前结点。代码如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">ListNode</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">reverseRecur</span><span class="p">(</span><span class="n">ListNode</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">head</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">head</span> <span class="o">||</span> <span class="o">!</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ListNode</span><span class="o">*</span> <span class="n">p</span>  <span class="o">=</span> <span class="n">reverseRecur</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>    <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>    <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><div class="expand">对上述代码的解释<a href="javascript:void(0)" style="float: right;" class="expandtitle">展开</a><div class="expandcontent" style="display: none;">
对于一个链表<code>n[1]->n[2]->&hellip;->n[m]</code>，假设我们对<code>head = n[k]</code>一层进行递归，也就是结点<code>n[k+1]</code>后面已经反转好了，那么现在链表的状态可以表示为：<br/>
<code>n[1]->n[2]->&hellip;->n[k]->n[k+1]&lt;-n[k+2]&lt;-&hellip;n[m]</code><br/>
我们这一步要做的操作是让<code>n[k+1]</code>的<code>next</code>结点指向<code>n[k]</code>，对应的代码就是：<br/>
<code>n[k]->next->next = n[k]</code><br/>
为了避免出现环，我们还要把<code>n[k]->next</code>置为<code>NULL</code>。
</div></div></p>
]]></content>
  </entry>
  
</feed>
